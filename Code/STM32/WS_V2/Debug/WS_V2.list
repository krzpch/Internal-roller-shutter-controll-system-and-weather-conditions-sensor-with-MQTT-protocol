
WS_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008a80  08008a80  00018a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f04  08008f04  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f0c  08008f0c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001dc  080090f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080090f0  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001794a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d3  00000000  00000000  00037b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  0003af30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  0003c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023288  00000000  00000000  0003cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149f3  00000000  00000000  00060200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca611  00000000  00000000  00074bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  0013f258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a64 	.word	0x08008a64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008a64 	.word	0x08008a64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9b9 	b.w	8000ffc <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <bh1750_init>:
 *      Author: Krzysztof Półchłopek
 */

#include "bh1750.h"

void bh1750_init(bh1750_t *bh) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
// power on the device and reset it
	bh1750_Write(bh, BH1750_POWER_ON);
 8001008:	2101      	movs	r1, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f850 	bl	80010b0 <bh1750_Write>
	bh1750_Write(bh, BH1750_RESET);
 8001010:	2107      	movs	r1, #7
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f84c 	bl	80010b0 <bh1750_Write>

// check if work_mode is set to continuous measurements
	if (bh->work_mode <= BH1750_ONE_H_RES_MODE) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	2b20      	cmp	r3, #32
 800101e:	d805      	bhi.n	800102c <bh1750_init+0x2c>
		// if yes set measurement mode
		bh1750_Write(bh, bh->work_mode);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f842 	bl	80010b0 <bh1750_Write>
	}
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <bh1750_ReadMeasurement>:

void bh1750_ReadMeasurement(bh1750_t *bh) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if (bh->work_mode == BH1750_ONE_L_RES_MODE) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	2b23      	cmp	r3, #35	; 0x23
 8001042:	d107      	bne.n	8001054 <bh1750_ReadMeasurement+0x20>
		// set one shot low res measurement and wait 30 ms
		bh1750_Write(bh, BH1750_ONE_L_RES_MODE);
 8001044:	2123      	movs	r1, #35	; 0x23
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f832 	bl	80010b0 <bh1750_Write>
		HAL_Delay(30);
 800104c:	201e      	movs	r0, #30
 800104e:	f001 fb7d 	bl	800274c <HAL_Delay>
 8001052:	e016      	b.n	8001082 <bh1750_ReadMeasurement+0x4e>
	} else if (bh->work_mode == BH1750_ONE_H_RES_MODE) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	791b      	ldrb	r3, [r3, #4]
 8001058:	2b20      	cmp	r3, #32
 800105a:	d107      	bne.n	800106c <bh1750_ReadMeasurement+0x38>
		// set one shot high res measurement and wait 180 ms
		bh1750_Write(bh, BH1750_ONE_H_RES_MODE);
 800105c:	2120      	movs	r1, #32
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f826 	bl	80010b0 <bh1750_Write>
		HAL_Delay(180);
 8001064:	20b4      	movs	r0, #180	; 0xb4
 8001066:	f001 fb71 	bl	800274c <HAL_Delay>
 800106a:	e00a      	b.n	8001082 <bh1750_ReadMeasurement+0x4e>
	} else if (bh->work_mode == BH1750_ONE_H_RES2_MODE) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	791b      	ldrb	r3, [r3, #4]
 8001070:	2b21      	cmp	r3, #33	; 0x21
 8001072:	d106      	bne.n	8001082 <bh1750_ReadMeasurement+0x4e>
		// set one shot high res 2 measurement and wait 180 ms
		bh1750_Write(bh, BH1750_ONE_H_RES2_MODE);
 8001074:	2121      	movs	r1, #33	; 0x21
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f81a 	bl	80010b0 <bh1750_Write>
		HAL_Delay(180);
 800107c:	20b4      	movs	r0, #180	; 0xb4
 800107e:	f001 fb65 	bl	800274c <HAL_Delay>
	}

	uint16_t temp = bh1750_Read(bh);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f828 	bl	80010d8 <bh1750_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	81fb      	strh	r3, [r7, #14]
	bh->lx = (temp / 1.2f);
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001096:	eddf 6a05 	vldr	s13, [pc, #20]	; 80010ac <bh1750_ReadMeasurement+0x78>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a02 	vstr	s15, [r3, #8]
	return;
 80010a4:	bf00      	nop
}
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	3f99999a 	.word	0x3f99999a

080010b0 <bh1750_Write>:


HAL_StatusTypeDef bh1750_Write(bh1750_t *bh, uint8_t data) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Master_Transmit(bh->i2c, BH1750_I2C_ADDR, &data, 1, 100);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	1cfa      	adds	r2, r7, #3
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	21b8      	movs	r1, #184	; 0xb8
 80010ca:	f001 ff09 	bl	8002ee0 <HAL_I2C_Master_Transmit>
 80010ce:	4603      	mov	r3, r0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <bh1750_Read>:

uint16_t bh1750_Read(bh1750_t *bh) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	6078      	str	r0, [r7, #4]
	uint8_t temp[2];
	HAL_I2C_Master_Receive(bh->i2c, BH1750_I2C_ADDR, (uint8_t*)temp, 2, 100);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f107 020c 	add.w	r2, r7, #12
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2302      	movs	r3, #2
 80010ee:	21b8      	movs	r1, #184	; 0xb8
 80010f0:	f001 ffea 	bl	80030c8 <HAL_I2C_Master_Receive>
	return ((temp[0] << 8) | temp[1]);
 80010f4:	7b3b      	ldrb	r3, [r7, #12]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	7b7b      	ldrb	r3, [r7, #13]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	b29b      	uxth	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <BME280_WriteByte>:


#if MODE_I2C_NSPI
	// I2C communication
	void BME280_WriteByte(bme280_t *bme, uint8_t addr, uint8_t data)
	{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(bme->i2c, BME280_I2C_ADDR, addr, 1, &data, 1, 100);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	b29a      	uxth	r2, r3
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	1cbb      	adds	r3, r7, #2
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	21ec      	movs	r1, #236	; 0xec
 8001134:	f002 f8be 	bl	80032b4 <HAL_I2C_Mem_Write>
	}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <BME280_ReadByte>:

	uint8_t BME280_ReadByte(bme280_t *bme, uint8_t addr)
	{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
		uint8_t tmp = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, addr, 1, &tmp, 1, 100);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	b29a      	uxth	r2, r3
 8001158:	2364      	movs	r3, #100	; 0x64
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f107 030f 	add.w	r3, r7, #15
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	21ec      	movs	r1, #236	; 0xec
 800116a:	f002 f9b7 	bl	80034dc <HAL_I2C_Mem_Read>
		return tmp;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <BME280_Read2Bytes>:

	uint16_t BME280_Read2Bytes(bme280_t *bme, uint8_t addr)
	{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af04      	add	r7, sp, #16
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
		uint8_t temp[2];
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, addr, 1, (uint8_t*)temp, 2, 100);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	b29a      	uxth	r2, r3
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2302      	movs	r3, #2
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	21ec      	movs	r1, #236	; 0xec
 800119e:	f002 f99d 	bl	80034dc <HAL_I2C_Mem_Read>
		return ((temp[0] << 8) | temp[1]);
 80011a2:	7b3b      	ldrb	r3, [r7, #12]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	b29b      	uxth	r3, r3
	}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <BME280_ReadMeasurements>:
		uint8_t temp[3];
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, addr, 1, (uint8_t*)temp, 3, 100);
		return ((temp[0] << 16) | (temp[1] << 8) | temp[2]);
	}
	void BME280_ReadMeasurements(bme280_t *bme, int32_t *raw_temp, int32_t *raw_hum, int32_t *raw_press)
	{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b08a      	sub	sp, #40	; 0x28
 80011be:	af04      	add	r7, sp, #16
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
		uint8_t temp[8];
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, BME280_PRESS_MSB_ADDR, 1, (uint8_t*)temp, 8, 100);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2308      	movs	r3, #8
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	22f7      	movs	r2, #247	; 0xf7
 80011de:	21ec      	movs	r1, #236	; 0xec
 80011e0:	f002 f97c 	bl	80034dc <HAL_I2C_Mem_Read>

		*raw_press = ((temp[0] << 16) | (temp[1] << 8) | temp[2]);
 80011e4:	7c3b      	ldrb	r3, [r7, #16]
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	7c7b      	ldrb	r3, [r7, #17]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4313      	orrs	r3, r2
 80011ee:	7cba      	ldrb	r2, [r7, #18]
 80011f0:	431a      	orrs	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	601a      	str	r2, [r3, #0]
		*raw_temp = ((temp[3] << 16) | (temp[4] << 8) | temp[5]);
 80011f6:	7cfb      	ldrb	r3, [r7, #19]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	7d3b      	ldrb	r3, [r7, #20]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	4313      	orrs	r3, r2
 8001200:	7d7a      	ldrb	r2, [r7, #21]
 8001202:	431a      	orrs	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	601a      	str	r2, [r3, #0]
		*raw_hum = ((temp[6] << 8) | temp[7]);
 8001208:	7dbb      	ldrb	r3, [r7, #22]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	7dfa      	ldrb	r2, [r7, #23]
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
		return;
 8001214:	bf00      	nop
	}
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <BME280_Read2BytesRV>:
		return;
	}
#endif

uint16_t BME280_Read2BytesRV(bme280_t *bme, uint8_t addr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = BME280_Read2Bytes(bme, addr);
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffa3 	bl	8001178 <BME280_Read2Bytes>
 8001232:	4603      	mov	r3, r0
 8001234:	81fb      	strh	r3, [r7, #14]
	return (temp >> 8 | temp << 8);
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	b29b      	uxth	r3, r3
 800123c:	b21a      	sxth	r2, r3
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21b      	sxth	r3, r3
 8001248:	b29b      	uxth	r3, r3
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <BME280_Callibrating>:


uint8_t BME280_Callibrating(bme280_t *bme)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	uint8_t status = BME280_ReadByte(bme,BME280_STATUS_ADDR);
 800125a:	21f3      	movs	r1, #243	; 0xf3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff6f 	bl	8001140 <BME280_ReadByte>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
	return ((status & 1 ) != 0) ? 1 : 0; // return 1 if sensor is calibrating else return 0
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <BME280_Init>:



void BME280_Init(bme280_t *bme)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	// initialize values for temperature, humidity and pressure
	bme->temp = -100.0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a85      	ldr	r2, [pc, #532]	; (8001498 <BME280_Init+0x220>)
 8001284:	60da      	str	r2, [r3, #12]
	bme->press = -100.0;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a83      	ldr	r2, [pc, #524]	; (8001498 <BME280_Init+0x220>)
 800128a:	615a      	str	r2, [r3, #20]
	bme->hum = -100.0;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a82      	ldr	r2, [pc, #520]	; (8001498 <BME280_Init+0x220>)
 8001290:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
		HAL_GPIO_WritePin(bme->GPIO_port, bme->GPIO_pin, GPIO_PIN_SET);
	#endif

	// performing soft reset of the board
	BME280_WriteByte(bme, BME280_RESET_ADDR, 0xB6);
 8001292:	22b6      	movs	r2, #182	; 0xb6
 8001294:	21e0      	movs	r1, #224	; 0xe0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff38 	bl	800110c <BME280_WriteByte>
	HAL_Delay(50);
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f001 fa55 	bl	800274c <HAL_Delay>

	// waiting for end of calibration
	while(BME280_Callibrating(bme))
 80012a2:	e002      	b.n	80012aa <BME280_Init+0x32>
	{
		HAL_Delay(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f001 fa51 	bl	800274c <HAL_Delay>
	while(BME280_Callibrating(bme))
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffd1 	bl	8001252 <BME280_Callibrating>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f6      	bne.n	80012a4 <BME280_Init+0x2c>
	}

	//reading calibration data from sensor
	comp_data.t1 = BME280_Read2BytesRV(bme,BME280_DIG_T1_ADDR);
 80012b6:	2188      	movs	r1, #136	; 0x88
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffaf 	bl	800121c <BME280_Read2BytesRV>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b76      	ldr	r3, [pc, #472]	; (800149c <BME280_Init+0x224>)
 80012c4:	801a      	strh	r2, [r3, #0]
	comp_data.t2 = BME280_Read2BytesRV(bme,BME280_DIG_T2_ADDR);
 80012c6:	218a      	movs	r1, #138	; 0x8a
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffa7 	bl	800121c <BME280_Read2BytesRV>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b72      	ldr	r3, [pc, #456]	; (800149c <BME280_Init+0x224>)
 80012d4:	805a      	strh	r2, [r3, #2]
	comp_data.t3 = BME280_Read2BytesRV(bme,BME280_DIG_T3_ADDR);
 80012d6:	218c      	movs	r1, #140	; 0x8c
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff9f 	bl	800121c <BME280_Read2BytesRV>
 80012de:	4603      	mov	r3, r0
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b6e      	ldr	r3, [pc, #440]	; (800149c <BME280_Init+0x224>)
 80012e4:	809a      	strh	r2, [r3, #4]

	comp_data.p1 = BME280_Read2BytesRV(bme,BME280_DIG_P1_ADDR);
 80012e6:	218e      	movs	r1, #142	; 0x8e
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff97 	bl	800121c <BME280_Read2BytesRV>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b6a      	ldr	r3, [pc, #424]	; (800149c <BME280_Init+0x224>)
 80012f4:	80da      	strh	r2, [r3, #6]
	comp_data.p2 = BME280_Read2BytesRV(bme,BME280_DIG_P2_ADDR);
 80012f6:	2190      	movs	r1, #144	; 0x90
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff8f 	bl	800121c <BME280_Read2BytesRV>
 80012fe:	4603      	mov	r3, r0
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b66      	ldr	r3, [pc, #408]	; (800149c <BME280_Init+0x224>)
 8001304:	811a      	strh	r2, [r3, #8]
	comp_data.p3 = BME280_Read2BytesRV(bme,BME280_DIG_P3_ADDR);
 8001306:	2192      	movs	r1, #146	; 0x92
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff87 	bl	800121c <BME280_Read2BytesRV>
 800130e:	4603      	mov	r3, r0
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b62      	ldr	r3, [pc, #392]	; (800149c <BME280_Init+0x224>)
 8001314:	815a      	strh	r2, [r3, #10]
	comp_data.p4 = BME280_Read2BytesRV(bme,BME280_DIG_P4_ADDR);
 8001316:	2194      	movs	r1, #148	; 0x94
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff7f 	bl	800121c <BME280_Read2BytesRV>
 800131e:	4603      	mov	r3, r0
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b5e      	ldr	r3, [pc, #376]	; (800149c <BME280_Init+0x224>)
 8001324:	819a      	strh	r2, [r3, #12]
	comp_data.p5 = BME280_Read2BytesRV(bme,BME280_DIG_P5_ADDR);
 8001326:	2196      	movs	r1, #150	; 0x96
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff77 	bl	800121c <BME280_Read2BytesRV>
 800132e:	4603      	mov	r3, r0
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b5a      	ldr	r3, [pc, #360]	; (800149c <BME280_Init+0x224>)
 8001334:	81da      	strh	r2, [r3, #14]
	comp_data.p6 = BME280_Read2BytesRV(bme,BME280_DIG_P6_ADDR);
 8001336:	2198      	movs	r1, #152	; 0x98
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff6f 	bl	800121c <BME280_Read2BytesRV>
 800133e:	4603      	mov	r3, r0
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b56      	ldr	r3, [pc, #344]	; (800149c <BME280_Init+0x224>)
 8001344:	821a      	strh	r2, [r3, #16]
	comp_data.p7 = BME280_Read2BytesRV(bme,BME280_DIG_P7_ADDR);
 8001346:	219a      	movs	r1, #154	; 0x9a
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff67 	bl	800121c <BME280_Read2BytesRV>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <BME280_Init+0x224>)
 8001354:	825a      	strh	r2, [r3, #18]
	comp_data.p8 = BME280_Read2BytesRV(bme,BME280_DIG_P8_ADDR);
 8001356:	219c      	movs	r1, #156	; 0x9c
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff5f 	bl	800121c <BME280_Read2BytesRV>
 800135e:	4603      	mov	r3, r0
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b4e      	ldr	r3, [pc, #312]	; (800149c <BME280_Init+0x224>)
 8001364:	829a      	strh	r2, [r3, #20]
	comp_data.p9 = BME280_Read2BytesRV(bme,BME280_DIG_P9_ADDR);
 8001366:	219e      	movs	r1, #158	; 0x9e
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff57 	bl	800121c <BME280_Read2BytesRV>
 800136e:	4603      	mov	r3, r0
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b4a      	ldr	r3, [pc, #296]	; (800149c <BME280_Init+0x224>)
 8001374:	82da      	strh	r2, [r3, #22]

	comp_data.h1 = BME280_ReadByte(bme,BME280_DIG_H1_ADDR);
 8001376:	21a1      	movs	r1, #161	; 0xa1
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fee1 	bl	8001140 <BME280_ReadByte>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b46      	ldr	r3, [pc, #280]	; (800149c <BME280_Init+0x224>)
 8001384:	761a      	strb	r2, [r3, #24]
	comp_data.h2 = BME280_Read2BytesRV(bme,BME280_DIG_H2_ADDR);
 8001386:	21e1      	movs	r1, #225	; 0xe1
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff47 	bl	800121c <BME280_Read2BytesRV>
 800138e:	4603      	mov	r3, r0
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <BME280_Init+0x224>)
 8001394:	835a      	strh	r2, [r3, #26]
	comp_data.h3 = BME280_ReadByte(bme,BME280_DIG_H3_ADDR);
 8001396:	21e3      	movs	r1, #227	; 0xe3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fed1 	bl	8001140 <BME280_ReadByte>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <BME280_Init+0x224>)
 80013a4:	771a      	strb	r2, [r3, #28]
	comp_data.h4 = ((BME280_ReadByte(bme,BME280_DIG_H4_ADDR) << 4) | (BME280_ReadByte(bme,BME280_DIG_H4_ADDR + 1) & 0xF));
 80013a6:	21e4      	movs	r1, #228	; 0xe4
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fec9 	bl	8001140 <BME280_ReadByte>
 80013ae:	4603      	mov	r3, r0
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	b21c      	sxth	r4, r3
 80013b4:	21e5      	movs	r1, #229	; 0xe5
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fec2 	bl	8001140 <BME280_ReadByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	b21b      	sxth	r3, r3
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4323      	orrs	r3, r4
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <BME280_Init+0x224>)
 80013cc:	83da      	strh	r2, [r3, #30]
	comp_data.h5 = ((BME280_ReadByte(bme,BME280_DIG_H5_ADDR) >> 4) | (BME280_ReadByte(bme,BME280_DIG_H5_ADDR + 1) << 4));
 80013ce:	21e5      	movs	r1, #229	; 0xe5
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff feb5 	bl	8001140 <BME280_ReadByte>
 80013d6:	4603      	mov	r3, r0
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b21c      	sxth	r4, r3
 80013de:	21e6      	movs	r1, #230	; 0xe6
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fead 	bl	8001140 <BME280_ReadByte>
 80013e6:	4603      	mov	r3, r0
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4323      	orrs	r3, r4
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <BME280_Init+0x224>)
 80013f2:	841a      	strh	r2, [r3, #32]
	comp_data.h6 = BME280_ReadByte(bme,BME280_DIG_H6_ADDR);
 80013f4:	21e7      	movs	r1, #231	; 0xe7
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fea2 	bl	8001140 <BME280_ReadByte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <BME280_Init+0x224>)
 8001402:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t temp_reg = BME280_ReadByte(bme, BME280_CTRL_HUM_ADDR);
 8001406:	21f2      	movs	r1, #242	; 0xf2
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fe99 	bl	8001140 <BME280_ReadByte>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
	temp_reg &= 0xF8;	// clear [2:0] bits
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	f023 0307 	bic.w	r3, r3, #7
 8001418:	73fb      	strb	r3, [r7, #15]
	temp_reg |= bme->hum_oversampling;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	799a      	ldrb	r2, [r3, #6]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	4313      	orrs	r3, r2
 8001422:	73fb      	strb	r3, [r7, #15]
	BME280_WriteByte(bme,BME280_CTRL_HUM_ADDR,temp_reg);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	461a      	mov	r2, r3
 8001428:	21f2      	movs	r1, #242	; 0xf2
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fe6e 	bl	800110c <BME280_WriteByte>
	BME280_WriteByte(bme,BME280_CTRL_MEAS_ADDR,((bme->temp_oversampling << 5) | (bme->press_oversampling << 2) | bme->work_mode));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	791b      	ldrb	r3, [r3, #4]
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	b25a      	sxtb	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	b25b      	sxtb	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b25a      	sxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	79db      	ldrb	r3, [r3, #7]
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	21f4      	movs	r1, #244	; 0xf4
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe59 	bl	800110c <BME280_WriteByte>

	if (bme->work_mode == BME280_NORMAL_MODE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	79db      	ldrb	r3, [r3, #7]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d115      	bne.n	800148e <BME280_Init+0x216>
	{
		// set filter and standby time for normal mode operation of sensor
		BME280_WriteByte(bme,BME280_CONFIG_ADDR,(uint8_t)(((bme->standby_time & 0x7) << 5) | ((bme->filter &7) << 2)) & 0xFC );
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7a1b      	ldrb	r3, [r3, #8]
 8001466:	015b      	lsls	r3, r3, #5
 8001468:	b25a      	sxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	b25b      	sxtb	r3, r3
 8001472:	f003 031c 	and.w	r3, r3, #28
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b25b      	sxtb	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	21f5      	movs	r1, #245	; 0xf5
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fe3f 	bl	800110c <BME280_WriteByte>
	}
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	c2c80000 	.word	0xc2c80000
 800149c:	20000208 	.word	0x20000208

080014a0 <BME280_ReadAll>:
	bme->press = (int32_t)p / 256000.0;
	return;
}

void BME280_ReadAll(bme280_t *bme)
{
 80014a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a4:	b0a4      	sub	sp, #144	; 0x90
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	64f8      	str	r0, [r7, #76]	; 0x4c
	// check mode of the sensor
	if (bme->work_mode == BME280_FORCED_MODE) {
 80014aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ac:	79db      	ldrb	r3, [r3, #7]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d12c      	bne.n	800150c <BME280_ReadAll+0x6c>
		uint8_t curr_mode;
		// force measurement
		uint8_t control = BME280_ReadByte(bme, BME280_CTRL_MEAS_ADDR);
 80014b2:	21f4      	movs	r1, #244	; 0xf4
 80014b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014b6:	f7ff fe43 	bl	8001140 <BME280_ReadByte>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		control &= ~(0x03);
 80014c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014c4:	f023 0303 	bic.w	r3, r3, #3
 80014c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		control |= BME280_FORCED_MODE;
 80014cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		BME280_WriteByte(bme, BME280_CTRL_MEAS_ADDR, control);
 80014d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014dc:	461a      	mov	r2, r3
 80014de:	21f4      	movs	r1, #244	; 0xf4
 80014e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014e2:	f7ff fe13 	bl	800110c <BME280_WriteByte>

		// wait for end of measurements
		while (1) {
			curr_mode = BME280_ReadByte(bme, BME280_CTRL_MEAS_ADDR);
 80014e6:	21f4      	movs	r1, #244	; 0xf4
 80014e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014ea:	f7ff fe29 	bl	8001140 <BME280_ReadByte>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			curr_mode &= 0x03;
 80014f4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			// break if board finished measurements
			if (curr_mode == BME280_SLEEP_MODE)
 8001500:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001504:	2b00      	cmp	r3, #0
 8001506:	d000      	beq.n	800150a <BME280_ReadAll+0x6a>
			curr_mode = BME280_ReadByte(bme, BME280_CTRL_MEAS_ADDR);
 8001508:	e7ed      	b.n	80014e6 <BME280_ReadAll+0x46>
				break;
 800150a:	bf00      	nop
		}
	}
	int32_t raw_press, raw_temp, raw_hum;
	// read all raw data from the sensor
	BME280_ReadMeasurements(bme, &raw_temp, &raw_hum, &raw_press);
 800150c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001510:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001514:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001518:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800151a:	f7ff fe4e 	bl	80011ba <BME280_ReadMeasurements>

	// temperature part
	if (raw_temp == 0x800000) {
 800151e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001520:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001524:	d103      	bne.n	800152e <BME280_ReadAll+0x8e>
		bme->temp = -100;
 8001526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001528:	4b97      	ldr	r3, [pc, #604]	; (8001788 <BME280_ReadAll+0x2e8>)
 800152a:	60d3      	str	r3, [r2, #12]
 800152c:	e045      	b.n	80015ba <BME280_ReadAll+0x11a>
	} else {
		raw_temp = raw_temp >> 4;
 800152e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001530:	111b      	asrs	r3, r3, #4
 8001532:	65bb      	str	r3, [r7, #88]	; 0x58

		uint32_t var1, var2;

		var1 = ((((raw_temp >> 3) - ((int32_t) comp_data.t1 << 1)))
 8001534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001536:	10da      	asrs	r2, r3, #3
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <BME280_ReadAll+0x2ec>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	1ad2      	subs	r2, r2, r3
				* ((int32_t) comp_data.t2)) >> 11;
 8001540:	4b92      	ldr	r3, [pc, #584]	; (800178c <BME280_ReadAll+0x2ec>)
 8001542:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001546:	fb03 f302 	mul.w	r3, r3, r2
 800154a:	12db      	asrs	r3, r3, #11
		var1 = ((((raw_temp >> 3) - ((int32_t) comp_data.t1 << 1)))
 800154c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		var2 = (((((raw_temp >> 4) - ((int32_t) comp_data.t1))
 8001550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001552:	111a      	asrs	r2, r3, #4
 8001554:	4b8d      	ldr	r3, [pc, #564]	; (800178c <BME280_ReadAll+0x2ec>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	1ad1      	subs	r1, r2, r3
				* ((raw_temp >> 4) - ((int32_t) comp_data.t1))) >> 12)
 800155a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800155c:	111a      	asrs	r2, r3, #4
 800155e:	4b8b      	ldr	r3, [pc, #556]	; (800178c <BME280_ReadAll+0x2ec>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	fb03 f301 	mul.w	r3, r3, r1
 8001568:	131a      	asrs	r2, r3, #12
				* ((int32_t) comp_data.t3)) >> 14;
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <BME280_ReadAll+0x2ec>)
 800156c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001570:	fb03 f302 	mul.w	r3, r3, r2
 8001574:	139b      	asrs	r3, r3, #14
		var2 = (((((raw_temp >> 4) - ((int32_t) comp_data.t1))
 8001576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		// t_fine carries global temperature for compensation for humidity and pressure
		t_fine = var1 + var2;
 800157a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800157e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001582:	4413      	add	r3, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4b82      	ldr	r3, [pc, #520]	; (8001790 <BME280_ReadAll+0x2f0>)
 8001588:	601a      	str	r2, [r3, #0]
		// return value in DegC
		bme->temp = ((t_fine * 5 + 128) >> 8) / 100.0;
 800158a:	4b81      	ldr	r3, [pc, #516]	; (8001790 <BME280_ReadAll+0x2f0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3380      	adds	r3, #128	; 0x80
 8001596:	121b      	asrs	r3, r3, #8
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffd3 	bl	8000544 <__aeabi_i2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <BME280_ReadAll+0x2f4>)
 80015a4:	f7ff f962 	bl	800086c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb0a 	bl	8000bc8 <__aeabi_d2f>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015b8:	60da      	str	r2, [r3, #12]
	}

	// pressure part
	if (raw_temp == 0x800000) {
 80015ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80015c0:	d104      	bne.n	80015cc <BME280_ReadAll+0x12c>
		bme->press = 0;
 80015c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	e1d8      	b.n	800197e <BME280_ReadAll+0x4de>
	} else {
		raw_press = raw_press >> 4;
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	111b      	asrs	r3, r3, #4
 80015d0:	65fb      	str	r3, [r7, #92]	; 0x5c

		int64_t val1, val2, p;

		val1 = ((int64_t) t_fine) - 128000;
 80015d2:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <BME280_ReadAll+0x2f0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015dc:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80015e0:	f143 35ff 	adc.w	r5, r3, #4294967295
 80015e4:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
		val2 = val1 * val1 * (int64_t) comp_data.p6;
 80015e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015ec:	fb03 f102 	mul.w	r1, r3, r2
 80015f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015f4:	fb03 f302 	mul.w	r3, r3, r2
 80015f8:	18ca      	adds	r2, r1, r3
 80015fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015fc:	fba3 4503 	umull	r4, r5, r3, r3
 8001600:	1953      	adds	r3, r2, r5
 8001602:	461d      	mov	r5, r3
 8001604:	4b61      	ldr	r3, [pc, #388]	; (800178c <BME280_ReadAll+0x2ec>)
 8001606:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800160a:	b21a      	sxth	r2, r3
 800160c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001610:	fb02 f005 	mul.w	r0, r2, r5
 8001614:	fb04 f103 	mul.w	r1, r4, r3
 8001618:	4401      	add	r1, r0
 800161a:	fba4 2302 	umull	r2, r3, r4, r2
 800161e:	4419      	add	r1, r3
 8001620:	460b      	mov	r3, r1
 8001622:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001626:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		val2 = val2 + ((val1 * (int64_t) comp_data.p5) << 17);
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <BME280_ReadAll+0x2ec>)
 800162c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001630:	b21a      	sxth	r2, r3
 8001632:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001636:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001638:	fb03 f001 	mul.w	r0, r3, r1
 800163c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800163e:	fb02 f101 	mul.w	r1, r2, r1
 8001642:	4408      	add	r0, r1
 8001644:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001646:	fba1 2302 	umull	r2, r3, r1, r2
 800164a:	18c1      	adds	r1, r0, r3
 800164c:	460b      	mov	r3, r1
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	0459      	lsls	r1, r3, #17
 8001658:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800165c:	0450      	lsls	r0, r2, #17
 800165e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001662:	eb12 0800 	adds.w	r8, r2, r0
 8001666:	eb43 0901 	adc.w	r9, r3, r1
 800166a:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
		val2 = val2 + (((int64_t) comp_data.p4) << 35);
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <BME280_ReadAll+0x2ec>)
 8001670:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001674:	b21a      	sxth	r2, r3
 8001676:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	00d1      	lsls	r1, r2, #3
 8001684:	2000      	movs	r0, #0
 8001686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800168a:	1814      	adds	r4, r2, r0
 800168c:	61bc      	str	r4, [r7, #24]
 800168e:	414b      	adcs	r3, r1
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001696:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		val1 = ((val1 * val1 * (int64_t) comp_data.p3) >> 8)
 800169a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800169c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800169e:	fb03 f102 	mul.w	r1, r3, r2
 80016a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a6:	fb03 f302 	mul.w	r3, r3, r2
 80016aa:	18ca      	adds	r2, r1, r3
 80016ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ae:	fba3 4503 	umull	r4, r5, r3, r3
 80016b2:	1953      	adds	r3, r2, r5
 80016b4:	461d      	mov	r5, r3
 80016b6:	4b35      	ldr	r3, [pc, #212]	; (800178c <BME280_ReadAll+0x2ec>)
 80016b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016bc:	b21a      	sxth	r2, r3
 80016be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016c2:	fb02 f005 	mul.w	r0, r2, r5
 80016c6:	fb04 f103 	mul.w	r1, r4, r3
 80016ca:	4401      	add	r1, r0
 80016cc:	fba4 2302 	umull	r2, r3, r4, r2
 80016d0:	4419      	add	r1, r3
 80016d2:	460b      	mov	r3, r1
 80016d4:	f04f 0800 	mov.w	r8, #0
 80016d8:	f04f 0900 	mov.w	r9, #0
 80016dc:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80016e0:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80016e4:	ea4f 2923 	mov.w	r9, r3, asr #8
				+ ((val1 * (int64_t) comp_data.p2) << 12);
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <BME280_ReadAll+0x2ec>)
 80016ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016f4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80016f6:	fb03 f001 	mul.w	r0, r3, r1
 80016fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80016fc:	fb02 f101 	mul.w	r1, r2, r1
 8001700:	1844      	adds	r4, r0, r1
 8001702:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001704:	fba1 0102 	umull	r0, r1, r1, r2
 8001708:	1863      	adds	r3, r4, r1
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	030b      	lsls	r3, r1, #12
 8001716:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800171a:	0302      	lsls	r2, r0, #12
		val1 = ((val1 * val1 * (int64_t) comp_data.p3) >> 8)
 800171c:	eb18 0102 	adds.w	r1, r8, r2
 8001720:	6139      	str	r1, [r7, #16]
 8001722:	eb49 0303 	adc.w	r3, r9, r3
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800172c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		val1 = (((((int64_t) 1) << 47) + val1)) * ((int64_t) comp_data.p1) >> 33;
 8001730:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001734:	1c11      	adds	r1, r2, #0
 8001736:	6439      	str	r1, [r7, #64]	; 0x40
 8001738:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <BME280_ReadAll+0x2ec>)
 8001740:	88db      	ldrh	r3, [r3, #6]
 8001742:	b29a      	uxth	r2, r3
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800174c:	4629      	mov	r1, r5
 800174e:	fb02 f001 	mul.w	r0, r2, r1
 8001752:	4621      	mov	r1, r4
 8001754:	fb01 f103 	mul.w	r1, r1, r3
 8001758:	4401      	add	r1, r0
 800175a:	4620      	mov	r0, r4
 800175c:	fba0 2302 	umull	r2, r3, r0, r2
 8001760:	4419      	add	r1, r3
 8001762:	460b      	mov	r3, r1
 8001764:	f04f 0000 	mov.w	r0, #0
 8001768:	f04f 0100 	mov.w	r1, #0
 800176c:	1058      	asrs	r0, r3, #1
 800176e:	17d9      	asrs	r1, r3, #31
 8001770:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78

		if (val1 == 0) {
 8001774:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001778:	4313      	orrs	r3, r2
 800177a:	d10d      	bne.n	8001798 <BME280_ReadAll+0x2f8>
			// avoid division by 0
			bme->press = 0;
 800177c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	e0fb      	b.n	800197e <BME280_ReadAll+0x4de>
 8001786:	bf00      	nop
 8001788:	c2c80000 	.word	0xc2c80000
 800178c:	20000208 	.word	0x20000208
 8001790:	2000022c 	.word	0x2000022c
 8001794:	40590000 	.word	0x40590000
		} else {
			p = 1048576 - raw_press;
 8001798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800179e:	461a      	mov	r2, r3
 80017a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017a4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			p = (((p << 31) - val2) * 3125) / val1;
 80017a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017aa:	105b      	asrs	r3, r3, #1
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017b0:	07db      	lsls	r3, r3, #31
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017b8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80017bc:	4621      	mov	r1, r4
 80017be:	ebb1 0a02 	subs.w	sl, r1, r2
 80017c2:	4629      	mov	r1, r5
 80017c4:	eb61 0b03 	sbc.w	fp, r1, r3
 80017c8:	4652      	mov	r2, sl
 80017ca:	465b      	mov	r3, fp
 80017cc:	1891      	adds	r1, r2, r2
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	415b      	adcs	r3, r3
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d8:	eb12 020a 	adds.w	r2, r2, sl
 80017dc:	eb43 030b 	adc.w	r3, r3, fp
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	0199      	lsls	r1, r3, #6
 80017ea:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80017ee:	0190      	lsls	r0, r2, #6
 80017f0:	1812      	adds	r2, r2, r0
 80017f2:	eb41 0303 	adc.w	r3, r1, r3
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001804:	0090      	lsls	r0, r2, #2
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	eb12 020a 	adds.w	r2, r2, sl
 800180e:	eb43 030b 	adc.w	r3, r3, fp
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001820:	0090      	lsls	r0, r2, #2
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	eb12 010a 	adds.w	r1, r2, sl
 800182a:	6339      	str	r1, [r7, #48]	; 0x30
 800182c:	eb43 030b 	adc.w	r3, r3, fp
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
 8001832:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001836:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800183a:	f7ff fa15 	bl	8000c68 <__aeabi_ldivmod>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			val1 = (((int64_t) comp_data.p9) * (p >> 13) * (p >> 13)) >> 25;
 8001846:	4b86      	ldr	r3, [pc, #536]	; (8001a60 <BME280_ReadAll+0x5c0>)
 8001848:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800184c:	b218      	sxth	r0, r3
 800184e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001852:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	0b62      	lsrs	r2, r4, #13
 8001860:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001864:	136b      	asrs	r3, r5, #13
 8001866:	fb02 f501 	mul.w	r5, r2, r1
 800186a:	fb00 f403 	mul.w	r4, r0, r3
 800186e:	442c      	add	r4, r5
 8001870:	fba0 0102 	umull	r0, r1, r0, r2
 8001874:	1863      	adds	r3, r4, r1
 8001876:	4619      	mov	r1, r3
 8001878:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	0b62      	lsrs	r2, r4, #13
 8001886:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800188a:	136b      	asrs	r3, r5, #13
 800188c:	fb02 f501 	mul.w	r5, r2, r1
 8001890:	fb00 f403 	mul.w	r4, r0, r3
 8001894:	442c      	add	r4, r5
 8001896:	fba0 0102 	umull	r0, r1, r0, r2
 800189a:	1863      	adds	r3, r4, r1
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	0e42      	lsrs	r2, r0, #25
 80018a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018ac:	164b      	asrs	r3, r1, #25
 80018ae:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			val2 = (((int64_t) comp_data.p8) * p) >> 19;
 80018b2:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <BME280_ReadAll+0x5c0>)
 80018b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018c0:	fb03 f001 	mul.w	r0, r3, r1
 80018c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80018c6:	fb02 f101 	mul.w	r1, r2, r1
 80018ca:	1844      	adds	r4, r0, r1
 80018cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018ce:	fba1 0102 	umull	r0, r1, r1, r2
 80018d2:	1863      	adds	r3, r4, r1
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	0cc2      	lsrs	r2, r0, #19
 80018e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018e4:	14cb      	asrs	r3, r1, #19
 80018e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

			p = ((p + val1 + val2) >> 8) + (((int64_t) comp_data.p7) << 4);
 80018ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80018ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80018f2:	1884      	adds	r4, r0, r2
 80018f4:	62bc      	str	r4, [r7, #40]	; 0x28
 80018f6:	eb41 0303 	adc.w	r3, r1, r3
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001900:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001904:	4621      	mov	r1, r4
 8001906:	1889      	adds	r1, r1, r2
 8001908:	6239      	str	r1, [r7, #32]
 800190a:	4629      	mov	r1, r5
 800190c:	eb43 0101 	adc.w	r1, r3, r1
 8001910:	6279      	str	r1, [r7, #36]	; 0x24
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800191e:	4623      	mov	r3, r4
 8001920:	0a18      	lsrs	r0, r3, #8
 8001922:	462b      	mov	r3, r5
 8001924:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001928:	462b      	mov	r3, r5
 800192a:	1219      	asrs	r1, r3, #8
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <BME280_ReadAll+0x5c0>)
 800192e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001932:	b21c      	sxth	r4, r3
 8001934:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	012b      	lsls	r3, r5, #4
 8001942:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001946:	0122      	lsls	r2, r4, #4
 8001948:	1884      	adds	r4, r0, r2
 800194a:	603c      	str	r4, [r7, #0]
 800194c:	eb41 0303 	adc.w	r3, r1, r3
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001956:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			// returning value in hPa
			bme->press = (int32_t) p / 25600.0;
 800195a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdf1 	bl	8000544 <__aeabi_i2d>
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <BME280_ReadAll+0x5c4>)
 8001968:	f7fe ff80 	bl	800086c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f928 	bl	8000bc8 <__aeabi_d2f>
 8001978:	4602      	mov	r2, r0
 800197a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800197c:	615a      	str	r2, [r3, #20]
		}
	}

	// humidity part
	if (raw_hum == 0x8000) {
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001984:	d103      	bne.n	800198e <BME280_ReadAll+0x4ee>
		bme->hum = -100;
 8001986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001988:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <BME280_ReadAll+0x5c8>)
 800198a:	611a      	str	r2, [r3, #16]
		float h = (val1 >> 12);
		// convert value to final % RH float value
		bme->hum = h / 1024.0;
	}

	return;
 800198c:	e063      	b.n	8001a56 <BME280_ReadAll+0x5b6>
		val1 = (t_fine - ((int32_t) 76800));
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <BME280_ReadAll+0x5cc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001996:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (((((raw_hum << 14) - (((int32_t) comp_data.h4) << 20) -
 8001998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199a:	039a      	lsls	r2, r3, #14
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <BME280_ReadAll+0x5c0>)
 800199e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019a2:	051b      	lsls	r3, r3, #20
 80019a4:	1ad2      	subs	r2, r2, r3
					(((int32_t) comp_data.h5) * val1)) + ((int32_t) 16384)) >> 15) *
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <BME280_ReadAll+0x5c0>)
 80019a8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ac:	4619      	mov	r1, r3
 80019ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019b0:	fb03 f301 	mul.w	r3, r3, r1
		val1 = (((((raw_hum << 14) - (((int32_t) comp_data.h4) << 20) -
 80019b4:	1ad3      	subs	r3, r2, r3
					(((int32_t) comp_data.h5) * val1)) + ((int32_t) 16384)) >> 15) *
 80019b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019ba:	13db      	asrs	r3, r3, #15
					(((((((val1 * ((int32_t) comp_data.h6)) >> 10) *
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <BME280_ReadAll+0x5c0>)
 80019be:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019c2:	4611      	mov	r1, r2
 80019c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019c6:	fb02 f201 	mul.w	r2, r2, r1
 80019ca:	1292      	asrs	r2, r2, #10
					(((val1 * ((int32_t) comp_data.h3)) >> 11) +
 80019cc:	4924      	ldr	r1, [pc, #144]	; (8001a60 <BME280_ReadAll+0x5c0>)
 80019ce:	7f09      	ldrb	r1, [r1, #28]
 80019d0:	4608      	mov	r0, r1
 80019d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80019d4:	fb01 f100 	mul.w	r1, r1, r0
 80019d8:	12c9      	asrs	r1, r1, #11
 80019da:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					(((((((val1 * ((int32_t) comp_data.h6)) >> 10) *
 80019de:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
 80019e2:	1292      	asrs	r2, r2, #10
 80019e4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					((int32_t) comp_data.h2) + 8192) >> 14));
 80019e8:	491d      	ldr	r1, [pc, #116]	; (8001a60 <BME280_ReadAll+0x5c0>)
 80019ea:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
					((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
 80019ee:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t) comp_data.h2) + 8192) >> 14));
 80019f2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019f6:	1392      	asrs	r2, r2, #14
		val1 = (((((raw_hum << 14) - (((int32_t) comp_data.h4) << 20) -
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (val1 - (((((val1 >> 15) * (val1 >> 15)) >> 7) *
 80019fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a00:	13db      	asrs	r3, r3, #15
 8001a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a04:	13d2      	asrs	r2, r2, #15
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	11db      	asrs	r3, r3, #7
					((int32_t) comp_data.h1)) >> 4));
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <BME280_ReadAll+0x5c0>)
 8001a0e:	7e12      	ldrb	r2, [r2, #24]
		val1 = (val1 - (((((val1 >> 15) * (val1 >> 15)) >> 7) *
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
					((int32_t) comp_data.h1)) >> 4));
 8001a14:	111b      	asrs	r3, r3, #4
		val1 = (val1 - (((((val1 >> 15) * (val1 >> 15)) >> 7) *
 8001a16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (val1 < 0) ? 0 : val1;
 8001a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a22:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (val1 > 419430400) ? 419430400 : val1;
 8001a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a26:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a2a:	bfa8      	it	ge
 8001a2c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a30:	667b      	str	r3, [r7, #100]	; 0x64
		float h = (val1 >> 12);
 8001a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a34:	131b      	asrs	r3, r3, #12
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		bme->hum = h / 1024.0;
 8001a42:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a46:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001a70 <BME280_ReadAll+0x5d0>
 8001a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a50:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 8001a54:	bf00      	nop
}
 8001a56:	3790      	adds	r7, #144	; 0x90
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000208 	.word	0x20000208
 8001a64:	40d90000 	.word	0x40d90000
 8001a68:	c2c80000 	.word	0xc2c80000
 8001a6c:	2000022c 	.word	0x2000022c
 8001a70:	44800000 	.word	0x44800000

08001a74 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	4a4a      	ldr	r2, [pc, #296]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4a44      	ldr	r2, [pc, #272]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aae:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a38      	ldr	r2, [pc, #224]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <MX_GPIO_Init+0x144>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_PDN_Pin|BT_WAKEUP_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2182      	movs	r1, #130	; 0x82
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af2:	f001 f935 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2108      	movs	r1, #8
 8001afa:	4830      	ldr	r0, [pc, #192]	; (8001bbc <MX_GPIO_Init+0x148>)
 8001afc:	f001 f930 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BT_PDN_Pin|BT_WAKEUP_Pin;
 8001b00:	2382      	movs	r3, #130	; 0x82
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f000 ff9f 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_INT_Pin;
 8001b1e:	2310      	movs	r3, #16
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <MX_GPIO_Init+0x14c>)
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_INT_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f000 ff92 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b38:	2333      	movs	r3, #51	; 0x33
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481c      	ldr	r0, [pc, #112]	; (8001bbc <MX_GPIO_Init+0x148>)
 8001b4c:	f000 ff86 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b50:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8001b54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f000 ff78 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	480e      	ldr	r0, [pc, #56]	; (8001bbc <MX_GPIO_Init+0x148>)
 8001b84:	f000 ff6a 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <MX_GPIO_Init+0x150>)
 8001b9c:	f000 ff5e 	bl	8002a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f000 ff14 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001baa:	200a      	movs	r0, #10
 8001bac:	f000 ff2d 	bl	8002a0a <HAL_NVIC_EnableIRQ>

}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	48001c00 	.word	0x48001c00

08001bc8 <btInit>:
#include <hm-bt4502.h>

extern UART_HandleTypeDef hlpuart1;


void btInit(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd4:	f001 f8c4 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BT_PDN_GPIO_Port, BT_PDN_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2102      	movs	r1, #2
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f001 f8be 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001be4:	2014      	movs	r0, #20
 8001be6:	f000 fdb1 	bl	800274c <HAL_Delay>
	// reset BLE module
	btSend((uint8_t*) "TTM:RST-SYSTEMRESET\r\n\0",
 8001bea:	2116      	movs	r1, #22
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <btInit+0x34>)
 8001bee:	f000 f807 	bl	8001c00 <btSend>
			sizeof("TTM:RST-SYSTEMRESET\r\n"));
	HAL_Delay(20);
 8001bf2:	2014      	movs	r0, #20
 8001bf4:	f000 fdaa 	bl	800274c <HAL_Delay>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	08008a80 	.word	0x08008a80

08001c00 <btSend>:
void btSend(uint8_t *data, size_t len) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f001 f8a5 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001c16:	2002      	movs	r0, #2
 8001c18:	f000 fd98 	bl	800274c <HAL_Delay>
	HAL_UART_Transmit(&hlpuart1, data, len, 100);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	2364      	movs	r3, #100	; 0x64
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4806      	ldr	r0, [pc, #24]	; (8001c40 <btSend+0x40>)
 8001c26:	f003 fd0d 	bl	8005644 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f001 f895 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000032c 	.word	0x2000032c

08001c44 <btSleep>:
void btSleep(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BT_PDN_GPIO_Port, BT_PDN_Pin, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f001 f886 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <btWakeup>:
void btWakeup(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BT_PDN_GPIO_Port, BT_PDN_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2102      	movs	r1, #2
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c64:	f001 f87c 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <btGetState>:

void btStateSwitch(void) {
	HAL_GPIO_TogglePin(BT_PDN_GPIO_Port, BT_PDN_Pin);
}

GPIO_PinState btGetState(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BT_PDN_GPIO_Port, BT_PDN_Pin);
 8001c70:	2102      	movs	r1, #2
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c76:	f001 f85b 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <MX_I2C1_Init+0x78>)
 8001c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <MX_I2C1_Init+0x7c>)
 8001c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001cbc:	f001 f880 	bl	8002dc0 <HAL_I2C_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cc6:	f000 fa47 	bl	8002158 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4809      	ldr	r0, [pc, #36]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001cce:	f001 ffa7 	bl	8003c20 <HAL_I2CEx_ConfigAnalogFilter>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cd8:	f000 fa3e 	bl	8002158 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_I2C1_Init+0x74>)
 8001ce0:	f001 ffe9 	bl	8003cb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cea:	f000 fa35 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000230 	.word	0x20000230
 8001cf8:	40005400 	.word	0x40005400
 8001cfc:	00303d5b 	.word	0x00303d5b

08001d00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b09e      	sub	sp, #120	; 0x78
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2254      	movs	r2, #84	; 0x54
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 f9c7 	bl	80060b4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_I2C_MspInit+0xa8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d136      	bne.n	8001d9e <HAL_I2C_MspInit+0x9e>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d30:	2340      	movs	r3, #64	; 0x40
 8001d32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fecc 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d4a:	f000 fa05 	bl	8002158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_I2C_MspInit+0xac>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_I2C_MspInit+0xac>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_I2C_MspInit+0xac>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6a:	2312      	movs	r3, #18
 8001d6c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d76:	2304      	movs	r3, #4
 8001d78:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <HAL_I2C_MspInit+0xb0>)
 8001d82:	f000 fe6b 	bl	8002a5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_I2C_MspInit+0xac>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_I2C_MspInit+0xac>)
 8001d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_I2C_MspInit+0xac>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3778      	adds	r7, #120	; 0x78
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40005400 	.word	0x40005400
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400

08001db4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001db8:	f3bf 8f4f 	dsb	sy
}
 8001dbc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <__NVIC_SystemReset+0x24>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001dc6:	4904      	ldr	r1, [pc, #16]	; (8001dd8 <__NVIC_SystemReset+0x24>)
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_SystemReset+0x28>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dce:	f3bf 8f4f 	dsb	sy
}
 8001dd2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <__NVIC_SystemReset+0x20>
 8001dd8:	e000ed00 	.word	0xe000ed00
 8001ddc:	05fa0004 	.word	0x05fa0004

08001de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de4:	f000 fc3d 	bl	8002662 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de8:	f000 f8f4 	bl	8001fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dec:	f7ff fe42 	bl	8001a74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001df0:	f7ff ff46 	bl	8001c80 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001df4:	f000 fb88 	bl	8002508 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8001df8:	f000 f9b4 	bl	8002164 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	bme.i2c = &hi2c1;
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <main+0x1b8>)
 8001dfe:	4a67      	ldr	r2, [pc, #412]	; (8001f9c <main+0x1bc>)
 8001e00:	601a      	str	r2, [r3, #0]

	bme.filter = BME280_FILTER_OFF;
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <main+0x1b8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	725a      	strb	r2, [r3, #9]
	bme.temp_oversampling = BME280_TEMPERATURE_OVER_1;
 8001e08:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <main+0x1b8>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	711a      	strb	r2, [r3, #4]
	bme.press_oversampling = BME280_PRESSURE_OVER_1;
 8001e0e:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <main+0x1b8>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	715a      	strb	r2, [r3, #5]
	bme.hum_oversampling = BME280_HUMIDITY_OVER_1;
 8001e14:	4b60      	ldr	r3, [pc, #384]	; (8001f98 <main+0x1b8>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	719a      	strb	r2, [r3, #6]
	bme.work_mode = BME280_NORMAL_MODE;
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <main+0x1b8>)
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	71da      	strb	r2, [r3, #7]
	bme.standby_time = BME280_STANDBY_20;
 8001e20:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <main+0x1b8>)
 8001e22:	2207      	movs	r2, #7
 8001e24:	721a      	strb	r2, [r3, #8]

	bh.i2c = &hi2c1;
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <main+0x1c0>)
 8001e28:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <main+0x1bc>)
 8001e2a:	601a      	str	r2, [r3, #0]
	bh.work_mode = BH1750_ONE_H_RES2_MODE;
 8001e2c:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <main+0x1c0>)
 8001e2e:	2221      	movs	r2, #33	; 0x21
 8001e30:	711a      	strb	r2, [r3, #4]

	BME280_Init(&bme);
 8001e32:	4859      	ldr	r0, [pc, #356]	; (8001f98 <main+0x1b8>)
 8001e34:	f7ff fa20 	bl	8001278 <BME280_Init>
	bh1750_init(&bh);
 8001e38:	4859      	ldr	r0, [pc, #356]	; (8001fa0 <main+0x1c0>)
 8001e3a:	f7ff f8e1 	bl	8001000 <bh1750_init>

	btInit();	// initialize ble pins and reset module
 8001e3e:	f7ff fec3 	bl	8001bc8 <btInit>
	memset((void*) BLE_RxTable, '\0', sizeof(BLE_RxTable));
 8001e42:	2214      	movs	r2, #20
 8001e44:	2100      	movs	r1, #0
 8001e46:	4857      	ldr	r0, [pc, #348]	; (8001fa4 <main+0x1c4>)
 8001e48:	f004 f934 	bl	80060b4 <memset>

	LED_Blink(1, 400);
 8001e4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001e50:	2001      	movs	r0, #1
 8001e52:	f000 f951 	bl	80020f8 <LED_Blink>

	BME280_ReadAll(&bme);
 8001e56:	4850      	ldr	r0, [pc, #320]	; (8001f98 <main+0x1b8>)
 8001e58:	f7ff fb22 	bl	80014a0 <BME280_ReadAll>
	bh1750_ReadMeasurement(&bh);
 8001e5c:	4850      	ldr	r0, [pc, #320]	; (8001fa0 <main+0x1c0>)
 8001e5e:	f7ff f8e9 	bl	8001034 <bh1750_ReadMeasurement>

	LED_Blink(1, 400);
 8001e62:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001e66:	2001      	movs	r0, #1
 8001e68:	f000 f946 	bl	80020f8 <LED_Blink>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	210a      	movs	r1, #10
 8001e70:	484d      	ldr	r0, [pc, #308]	; (8001fa8 <main+0x1c8>)
 8001e72:	f003 fa6d 	bl	8005350 <HAL_RTCEx_SetWakeUpTimer_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {


		if (BLE_interrupt == 1) {
 8001e76:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <main+0x1cc>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d168      	bne.n	8001f50 <main+0x170>
			BLE_interrupt = 0;
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <main+0x1cc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
			if (strcmp((char*) BLE_RxTable, (char*) "TTM:CONNECT\r\n") == 0) {
 8001e84:	494a      	ldr	r1, [pc, #296]	; (8001fb0 <main+0x1d0>)
 8001e86:	4847      	ldr	r0, [pc, #284]	; (8001fa4 <main+0x1c4>)
 8001e88:	f7fe f9a2 	bl	80001d0 <strcmp>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d13c      	bne.n	8001f0c <main+0x12c>
				BLE_connected = 1;
 8001e92:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <main+0x1d4>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				LED_Blink(3, 200);
 8001e98:	21c8      	movs	r1, #200	; 0xc8
 8001e9a:	2003      	movs	r0, #3
 8001e9c:	f000 f92c 	bl	80020f8 <LED_Blink>
				if (BLE_connected == 1) {
 8001ea0:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <main+0x1d4>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d12b      	bne.n	8001f00 <main+0x120>
					BME280_ReadAll(&bme);
 8001ea8:	483b      	ldr	r0, [pc, #236]	; (8001f98 <main+0x1b8>)
 8001eaa:	f7ff faf9 	bl	80014a0 <BME280_ReadAll>
					bh1750_ReadMeasurement(&bh);
 8001eae:	483c      	ldr	r0, [pc, #240]	; (8001fa0 <main+0x1c0>)
 8001eb0:	f7ff f8c0 	bl	8001034 <bh1750_ReadMeasurement>
 8001eb4:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <main+0x1b8>)
 8001eb6:	68db      	ldr	r3, [r3, #12]

					memcpy((uint8_t*)BLE_TxTable, &bme.temp, 4);
 8001eb8:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <main+0x1d8>)
 8001eba:	6013      	str	r3, [r2, #0]
					memcpy((uint8_t*)BLE_TxTable + 4, &bme.hum, 4);
 8001ebc:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <main+0x1dc>)
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <main+0x1b8>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	6013      	str	r3, [r2, #0]
					memcpy((uint8_t*)BLE_TxTable + 8, &bme.press, 4);
 8001ec4:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <main+0x1e0>)
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <main+0x1b8>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	6013      	str	r3, [r2, #0]
					memcpy((uint8_t*)BLE_TxTable + 12, &bh.lx, 4);
 8001ecc:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <main+0x1e4>)
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <main+0x1c0>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	6013      	str	r3, [r2, #0]

					//BLE_TxLen = sprintf((char*) BLE_TxTable, "T:%.2f H:%.2f P:%.2f L:%.2f\n", bme.temp, bme.hum, bme.press, bh.lx);
					HAL_Delay(1000);
 8001ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ed8:	f000 fc38 	bl	800274c <HAL_Delay>
					// send and go to sleep

					btSend((uint8_t*) BLE_TxTable, 16);
 8001edc:	2110      	movs	r1, #16
 8001ede:	4836      	ldr	r0, [pc, #216]	; (8001fb8 <main+0x1d8>)
 8001ee0:	f7ff fe8e 	bl	8001c00 <btSend>
					memset((void*) BLE_TxTable, 0, sizeof(BLE_TxTable));
 8001ee4:	2232      	movs	r2, #50	; 0x32
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4833      	ldr	r0, [pc, #204]	; (8001fb8 <main+0x1d8>)
 8001eea:	f004 f8e3 	bl	80060b4 <memset>
					HAL_Delay(1000);
 8001eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef2:	f000 fc2b 	bl	800274c <HAL_Delay>
					btSleep();
 8001ef6:	f7ff fea5 	bl	8001c44 <btSleep>

					BLE_connected = 0;
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <main+0x1d4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
				}

				HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001f00:	2204      	movs	r2, #4
 8001f02:	213c      	movs	r1, #60	; 0x3c
 8001f04:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <main+0x1c8>)
 8001f06:	f003 fa23 	bl	8005350 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f0a:	e01c      	b.n	8001f46 <main+0x166>

			} else if (strcmp((char*) BLE_RxTable, (char*) "TTM:DISCONNECT\r\n") == 0) {
 8001f0c:	492e      	ldr	r1, [pc, #184]	; (8001fc8 <main+0x1e8>)
 8001f0e:	4825      	ldr	r0, [pc, #148]	; (8001fa4 <main+0x1c4>)
 8001f10:	f7fe f95e 	bl	80001d0 <strcmp>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d107      	bne.n	8001f2a <main+0x14a>
				BLE_connected = 0;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <main+0x1d4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
				LED_Blink(2, 200);
 8001f20:	21c8      	movs	r1, #200	; 0xc8
 8001f22:	2002      	movs	r0, #2
 8001f24:	f000 f8e8 	bl	80020f8 <LED_Blink>
 8001f28:	e00d      	b.n	8001f46 <main+0x166>
			} else if (strcmp((char*) BLE_RxTable, (char*) "TTM:DISCONNECT FOR TIMEOUT\r\n") == 0) {
 8001f2a:	4928      	ldr	r1, [pc, #160]	; (8001fcc <main+0x1ec>)
 8001f2c:	481d      	ldr	r0, [pc, #116]	; (8001fa4 <main+0x1c4>)
 8001f2e:	f7fe f94f 	bl	80001d0 <strcmp>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <main+0x166>
				LED_Blink(1, 500);
 8001f38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f000 f8db 	bl	80020f8 <LED_Blink>
				NVIC_SystemReset();
 8001f42:	f7ff ff37 	bl	8001db4 <__NVIC_SystemReset>

			}
			memset((void*) BLE_RxTable, 0, sizeof(BLE_RxTable));
 8001f46:	2214      	movs	r2, #20
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4816      	ldr	r0, [pc, #88]	; (8001fa4 <main+0x1c4>)
 8001f4c:	f004 f8b2 	bl	80060b4 <memset>
		}

		if (RTC_interrupt == 1) {
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <main+0x1f0>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d119      	bne.n	8001f8c <main+0x1ac>
			RTC_interrupt = 0;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <main+0x1f0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]

			if (btGetState() == GPIO_PIN_SET) {
 8001f5e:	f7ff fe85 	bl	8001c6c <btGetState>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <main+0x198>
				// if BT module is in sleep wake it up and set timer for 10 seconds
				btWakeup();
 8001f68:	f7ff fe76 	bl	8001c58 <btWakeup>
				HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	210a      	movs	r1, #10
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <main+0x1c8>)
 8001f72:	f003 f9ed 	bl	8005350 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f76:	e009      	b.n	8001f8c <main+0x1ac>

			} else {
				//else wait for 1 min for next connection cycle
				BLE_connected = 0;
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <main+0x1d4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
				btSleep();
 8001f7e:	f7ff fe61 	bl	8001c44 <btSleep>
				HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001f82:	2204      	movs	r2, #4
 8001f84:	213c      	movs	r1, #60	; 0x3c
 8001f86:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <main+0x1c8>)
 8001f88:	f003 f9e2 	bl	8005350 <HAL_RTCEx_SetWakeUpTimer_IT>
		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_SuspendTick();
 8001f8c:	f000 fc02 	bl	8002794 <HAL_SuspendTick>
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f001 ff51 	bl	8003e38 <HAL_PWREx_EnterSTOP2Mode>
		if (BLE_interrupt == 1) {
 8001f96:	e76e      	b.n	8001e76 <main+0x96>
 8001f98:	20000294 	.word	0x20000294
 8001f9c:	20000230 	.word	0x20000230
 8001fa0:	200002e0 	.word	0x200002e0
 8001fa4:	20000280 	.word	0x20000280
 8001fa8:	200002ec 	.word	0x200002ec
 8001fac:	200001f9 	.word	0x200001f9
 8001fb0:	08008a98 	.word	0x08008a98
 8001fb4:	200001fa 	.word	0x200001fa
 8001fb8:	200002ac 	.word	0x200002ac
 8001fbc:	200002b0 	.word	0x200002b0
 8001fc0:	200002b4 	.word	0x200002b4
 8001fc4:	200002b8 	.word	0x200002b8
 8001fc8:	08008aa8 	.word	0x08008aa8
 8001fcc:	08008abc 	.word	0x08008abc
 8001fd0:	200001f8 	.word	0x200001f8

08001fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b096      	sub	sp, #88	; 0x58
 8001fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	2244      	movs	r2, #68	; 0x44
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f866 	bl	80060b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ff6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ffa:	f001 fec7 	bl	8003d8c <HAL_PWREx_ControlVoltageScaling>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002004:	f000 f8a8 	bl	8002158 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002008:	f001 fea2 	bl	8003d50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <SystemClock_Config+0xa8>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <SystemClock_Config+0xa8>)
 8002014:	f023 0318 	bic.w	r3, r3, #24
 8002018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800201c:	230e      	movs	r3, #14
 800201e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002028:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800202a:	2310      	movs	r3, #16
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800202e:	2301      	movs	r3, #1
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4618      	mov	r0, r3
 800203c:	f001 ff28 	bl	8003e90 <HAL_RCC_OscConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002046:	f000 f887 	bl	8002158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204a:	230f      	movs	r3, #15
 800204c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800204e:	2301      	movs	r3, #1
 8002050:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fb34 	bl	80046d0 <HAL_RCC_ClockConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800206e:	f000 f873 	bl	8002158 <Error_Handler>
  }
}
 8002072:	bf00      	nop
 8002074:	3758      	adds	r7, #88	; 0x58
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8002088:	f7ff ffa4 	bl	8001fd4 <SystemClock_Config>
	HAL_ResumeTick();
 800208c:	f000 fb92 	bl	80027b4 <HAL_ResumeTick>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f003 f9f1 	bl	8005478 <HAL_RTCEx_DeactivateWakeUpTimer>
	RTC_interrupt = 1;
 8002096:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200001f8 	.word	0x200001f8

080020a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
	SystemClock_Config();
 80020b2:	f7ff ff8f 	bl	8001fd4 <SystemClock_Config>
	HAL_ResumeTick();
 80020b6:	f000 fb7d 	bl	80027b4 <HAL_ResumeTick>
	if (GPIO_Pin == BT_INT_Pin) {
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d10e      	bne.n	80020de <HAL_GPIO_EXTI_Callback+0x36>
		HAL_UARTEx_ReceiveToIdle(&hlpuart1, (uint8_t*) BLE_RxTable,
 80020c0:	231e      	movs	r3, #30
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_GPIO_EXTI_Callback+0x40>)
 80020c6:	2214      	movs	r2, #20
 80020c8:	4908      	ldr	r1, [pc, #32]	; (80020ec <HAL_GPIO_EXTI_Callback+0x44>)
 80020ca:	4809      	ldr	r0, [pc, #36]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80020cc:	f003 fec1 	bl	8005e52 <HAL_UARTEx_ReceiveToIdle>
				BLE_RxTableLen, &BLE_RxLen, 30);
		if (BLE_RxLen > 0) { // set flag only if received something
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_GPIO_EXTI_Callback+0x40>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_EXTI_Callback+0x36>
			BLE_interrupt = 1;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200002de 	.word	0x200002de
 80020ec:	20000280 	.word	0x20000280
 80020f0:	2000032c 	.word	0x2000032c
 80020f4:	200001f9 	.word	0x200001f9

080020f8 <LED_Blink>:

void LED_Blink(uint8_t blinsk,uint16_t interval) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	460a      	mov	r2, r1
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	4613      	mov	r3, r2
 8002106:	80bb      	strh	r3, [r7, #4]
	for (uint8_t i = 0; i < blinsk; i++) {
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e018      	b.n	8002140 <LED_Blink+0x48>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	2108      	movs	r1, #8
 8002112:	4810      	ldr	r0, [pc, #64]	; (8002154 <LED_Blink+0x5c>)
 8002114:	f000 fe24 	bl	8002d60 <HAL_GPIO_WritePin>
		HAL_Delay(interval>>1);
 8002118:	88bb      	ldrh	r3, [r7, #4]
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fb14 	bl	800274c <HAL_Delay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	2108      	movs	r1, #8
 8002128:	480a      	ldr	r0, [pc, #40]	; (8002154 <LED_Blink+0x5c>)
 800212a:	f000 fe19 	bl	8002d60 <HAL_GPIO_WritePin>
		HAL_Delay(interval>>1);
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	b29b      	uxth	r3, r3
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fb09 	bl	800274c <HAL_Delay>
	for (uint8_t i = 0; i < blinsk; i++) {
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	429a      	cmp	r2, r3
 8002146:	d3e2      	bcc.n	800210e <LED_Blink+0x16>
	}

}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	48000400 	.word	0x48000400

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002160:	e7fe      	b.n	8002160 <Error_Handler+0x8>
	...

08002164 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_RTC_Init+0x48>)
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <MX_RTC_Init+0x4c>)
 800216c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <MX_RTC_Init+0x48>)
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <MX_RTC_Init+0x48>)
 8002176:	227f      	movs	r2, #127	; 0x7f
 8002178:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_RTC_Init+0x48>)
 800217c:	22ff      	movs	r2, #255	; 0xff
 800217e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <MX_RTC_Init+0x48>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_RTC_Init+0x48>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <MX_RTC_Init+0x48>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_RTC_Init+0x48>)
 8002194:	2200      	movs	r2, #0
 8002196:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <MX_RTC_Init+0x48>)
 800219a:	f002 ff85 	bl	80050a8 <HAL_RTC_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80021a4:	f7ff ffd8 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200002ec 	.word	0x200002ec
 80021b0:	40002800 	.word	0x40002800

080021b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b098      	sub	sp, #96	; 0x60
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	2254      	movs	r2, #84	; 0x54
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 ff75 	bl	80060b4 <memset>
  if(rtcHandle->Instance==RTC)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <HAL_RTC_MspInit+0x68>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d11f      	bne.n	8002214 <HAL_RTC_MspInit+0x60>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fc79 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021f0:	f7ff ffb2 	bl	8002158 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RTC_MspInit+0x6c>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_RTC_MspInit+0x6c>)
 80021fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2105      	movs	r1, #5
 8002208:	2003      	movs	r0, #3
 800220a:	f000 fbe2 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800220e:	2003      	movs	r0, #3
 8002210:	f000 fbfb 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002214:	bf00      	nop
 8002216:	3760      	adds	r7, #96	; 0x60
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40002800 	.word	0x40002800
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_RTC_MspDeInit+0x30>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10a      	bne.n	800224c <HAL_RTC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RTC_MspDeInit+0x34>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_RTC_MspDeInit+0x34>)
 800223e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);
 8002246:	2003      	movs	r0, #3
 8002248:	f000 fbed 	bl	8002a26 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40002800 	.word	0x40002800
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_MspInit+0x44>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <HAL_MspInit+0x44>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6613      	str	r3, [r2, #96]	; 0x60
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_MspInit+0x44>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_MspInit+0x44>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_MspInit+0x44>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_MspInit+0x44>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <NMI_Handler+0x4>

080022aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <MemManage_Handler+0x4>

080022b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f0:	f000 fa0c 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <RTC_WKUP_IRQHandler+0x10>)
 80022fe:	f003 f919 	bl	8005534 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200002ec 	.word	0x200002ec

0800230c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002310:	2010      	movs	r0, #16
 8002312:	f000 fd3d 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}

0800231a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
	return 1;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_kill>:

int _kill(int pid, int sig)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002334:	f003 fe94 	bl	8006060 <__errno>
 8002338:	4603      	mov	r3, r0
 800233a:	2216      	movs	r2, #22
 800233c:	601a      	str	r2, [r3, #0]
	return -1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_exit>:

void _exit (int status)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002352:	f04f 31ff 	mov.w	r1, #4294967295
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffe7 	bl	800232a <_kill>
	while (1) {}		/* Make sure we hang here */
 800235c:	e7fe      	b.n	800235c <_exit+0x12>

0800235e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e00a      	b.n	8002386 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002370:	f3af 8000 	nop.w
 8002374:	4601      	mov	r1, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	60ba      	str	r2, [r7, #8]
 800237c:	b2ca      	uxtb	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	dbf0      	blt.n	8002370 <_read+0x12>
	}

return len;
 800238e:	687b      	ldr	r3, [r7, #4]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e009      	b.n	80023be <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	dbf1      	blt.n	80023aa <_write+0x12>
	}
	return len;
 80023c6:	687b      	ldr	r3, [r7, #4]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_close>:

int _close(int file)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	return -1;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f8:	605a      	str	r2, [r3, #4]
	return 0;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_isatty>:

int _isatty(int file)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	return 1;
 8002410:	2301      	movs	r3, #1
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
	return 0;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <_sbrk+0x5c>)
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <_sbrk+0x60>)
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <_sbrk+0x64>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <_sbrk+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	429a      	cmp	r2, r3
 8002466:	d207      	bcs.n	8002478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002468:	f003 fdfa 	bl	8006060 <__errno>
 800246c:	4603      	mov	r3, r0
 800246e:	220c      	movs	r2, #12
 8002470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	e009      	b.n	800248c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <_sbrk+0x64>)
 8002488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000c000 	.word	0x2000c000
 8002498:	00000400 	.word	0x00000400
 800249c:	200001fc 	.word	0x200001fc
 80024a0:	200003c8 	.word	0x200003c8

080024a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <SystemInit+0x5c>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <SystemInit+0x5c>)
 80024b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <SystemInit+0x60>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <SystemInit+0x60>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <SystemInit+0x60>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <SystemInit+0x60>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <SystemInit+0x60>)
 80024d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80024d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <SystemInit+0x60>)
 80024dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <SystemInit+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <SystemInit+0x60>)
 80024e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SystemInit+0x60>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	40021000 	.word	0x40021000

08002508 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <MX_LPUART1_UART_Init+0x54>)
 8002510:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 8002514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002518:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <MX_LPUART1_UART_Init+0x50>)
 8002546:	f003 f82f 	bl	80055a8 <HAL_UART_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002550:	f7ff fe02 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000032c 	.word	0x2000032c
 800255c:	40008000 	.word	0x40008000

08002560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b09e      	sub	sp, #120	; 0x78
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	2254      	movs	r2, #84	; 0x54
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fd97 	bl	80060b4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	; (8002608 <HAL_UART_MspInit+0xa8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d137      	bne.n	8002600 <HAL_UART_MspInit+0xa0>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002590:	2320      	movs	r3, #32
 8002592:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8002594:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 fa9c 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025aa:	f7ff fdd5 	bl	8002158 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <HAL_UART_MspInit+0xac>)
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_UART_MspInit+0xac>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_UART_MspInit+0xac>)
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_UART_MspInit+0xac>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <HAL_UART_MspInit+0xac>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_UART_MspInit+0xac>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025de:	230c      	movs	r3, #12
 80025e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80025ee:	2308      	movs	r3, #8
 80025f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fc:	f000 fa2e 	bl	8002a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002600:	bf00      	nop
 8002602:	3778      	adds	r7, #120	; 0x78
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40008000 	.word	0x40008000
 800260c:	40021000 	.word	0x40021000

08002610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002648 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002614:	f7ff ff46 	bl	80024a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002618:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800261a:	e003      	b.n	8002624 <LoopCopyDataInit>

0800261c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800261e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002620:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002622:	3104      	adds	r1, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002624:	480a      	ldr	r0, [pc, #40]	; (8002650 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002628:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800262a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800262c:	d3f6      	bcc.n	800261c <CopyDataInit>
	ldr	r2, =_sbss
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002630:	e002      	b.n	8002638 <LoopFillZerobss>

08002632 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002632:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002634:	f842 3b04 	str.w	r3, [r2], #4

08002638 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <LoopForever+0x16>)
	cmp	r2, r3
 800263a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800263c:	d3f9      	bcc.n	8002632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800263e:	f003 fd15 	bl	800606c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002642:	f7ff fbcd 	bl	8001de0 <main>

08002646 <LoopForever>:

LoopForever:
    b LoopForever
 8002646:	e7fe      	b.n	8002646 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002648:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 800264c:	08008f14 	.word	0x08008f14
	ldr	r0, =_sdata
 8002650:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002654:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002658:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 800265c:	200003c4 	.word	0x200003c4

08002660 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC1_IRQHandler>

08002662 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266c:	2003      	movs	r0, #3
 800266e:	f000 f9a5 	bl	80029bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002672:	2000      	movs	r0, #0
 8002674:	f000 f80e 	bl	8002694 <HAL_InitTick>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	71fb      	strb	r3, [r7, #7]
 8002682:	e001      	b.n	8002688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002684:	f7ff fdea 	bl	800225c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002688:	79fb      	ldrb	r3, [r7, #7]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_InitTick+0x6c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_InitTick+0x70>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_InitTick+0x6c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f9bf 	bl	8002a42 <HAL_SYSTICK_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	d809      	bhi.n	80026e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d0:	2200      	movs	r2, #0
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f000 f97b 	bl	80029d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_InitTick+0x74>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e007      	b.n	80026f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e004      	b.n	80026f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	e001      	b.n	80026f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000008 	.word	0x20000008
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x20>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x24>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_IncTick+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000008 	.word	0x20000008
 8002730:	200003b0 	.word	0x200003b0

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200003b0 	.word	0x200003b0

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff ffee 	bl	8002734 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d005      	beq.n	8002772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_Delay+0x44>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002772:	bf00      	nop
 8002774:	f7ff ffde 	bl	8002734 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <HAL_Delay+0x28>
  {
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000008 	.word	0x20000008

08002794 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_SuspendTick+0x1c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_SuspendTick+0x1c>)
 800279e:	f023 0302 	bic.w	r3, r3, #2
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_ResumeTick+0x1c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_ResumeTick+0x1c>)
 80027be:	f043 0302 	orr.w	r3, r3, #2
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <__NVIC_SetPriorityGrouping>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_DisableIRQ>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db12      	blt.n	80028ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	490a      	ldr	r1, [pc, #40]	; (80028b8 <__NVIC_DisableIRQ+0x44>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	3320      	adds	r3, #32
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80028a0:	f3bf 8f4f 	dsb	sy
}
 80028a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028a6:	f3bf 8f6f 	isb	sy
}
 80028aa:	bf00      	nop
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002988:	d301      	bcc.n	800298e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <SysTick_Config+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002996:	210f      	movs	r1, #15
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f7ff ff8e 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <SysTick_Config+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <SysTick_Config+0x40>)
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000e010 	.word	0xe000e010

080029bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff05 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029e4:	f7ff ff1a 	bl	800281c <__NVIC_GetPriorityGrouping>
 80029e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7ff ff8e 	bl	8002910 <NVIC_EncodePriority>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff5d 	bl	80028bc <__NVIC_SetPriority>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff0d 	bl	8002838 <__NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff1d 	bl	8002874 <__NVIC_DisableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ff94 	bl	8002978 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6a:	e148      	b.n	8002cfe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 813a 	beq.w	8002cf8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_GPIO_Init+0x48>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a98:	2b11      	cmp	r3, #17
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b12      	cmp	r3, #18
 8002aa2:	d130      	bne.n	8002b06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ada:	2201      	movs	r2, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f003 0201 	and.w	r2, r3, #1
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	2203      	movs	r2, #3
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0xea>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b12      	cmp	r3, #18
 8002b44:	d123      	bne.n	8002b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	6939      	ldr	r1, [r7, #16]
 8002b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0203 	and.w	r2, r3, #3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8094 	beq.w	8002cf8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd0:	4b52      	ldr	r3, [pc, #328]	; (8002d1c <HAL_GPIO_Init+0x2c0>)
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd4:	4a51      	ldr	r2, [pc, #324]	; (8002d1c <HAL_GPIO_Init+0x2c0>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6613      	str	r3, [r2, #96]	; 0x60
 8002bdc:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <HAL_GPIO_Init+0x2c0>)
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002be8:	4a4d      	ldr	r2, [pc, #308]	; (8002d20 <HAL_GPIO_Init+0x2c4>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c12:	d00d      	beq.n	8002c30 <HAL_GPIO_Init+0x1d4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a43      	ldr	r2, [pc, #268]	; (8002d24 <HAL_GPIO_Init+0x2c8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <HAL_GPIO_Init+0x1d0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a42      	ldr	r2, [pc, #264]	; (8002d28 <HAL_GPIO_Init+0x2cc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_GPIO_Init+0x1cc>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e004      	b.n	8002c32 <HAL_GPIO_Init+0x1d6>
 8002c28:	2307      	movs	r3, #7
 8002c2a:	e002      	b.n	8002c32 <HAL_GPIO_Init+0x1d6>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <HAL_GPIO_Init+0x1d6>
 8002c30:	2300      	movs	r3, #0
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	f002 0203 	and.w	r2, r2, #3
 8002c38:	0092      	lsls	r2, r2, #2
 8002c3a:	4093      	lsls	r3, r2
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c42:	4937      	ldr	r1, [pc, #220]	; (8002d20 <HAL_GPIO_Init+0x2c4>)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	3302      	adds	r3, #2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c74:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c9e:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cc8:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f aeaf 	bne.w	8002a6c <HAL_GPIO_Init+0x10>
  }
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40010000 	.word	0x40010000
 8002d24:	48000400 	.word	0x48000400
 8002d28:	48000800 	.word	0x48000800
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e001      	b.n	8002d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f97a 	bl	80020a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e081      	b.n	8002ed6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe ff8a 	bl	8001d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	; 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	e006      	b.n	8002e48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d104      	bne.n	8002e5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	ea42 0103 	orr.w	r1, r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69d9      	ldr	r1, [r3, #28]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	817b      	strh	r3, [r7, #10]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 80da 	bne.w	80030b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Master_Transmit+0x30>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0d3      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f18:	f7ff fc0c 	bl	8002734 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2319      	movs	r3, #25
 8002f24:	2201      	movs	r2, #1
 8002f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fcbc 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0be      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2221      	movs	r2, #33	; 0x21
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2210      	movs	r2, #16
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	893a      	ldrh	r2, [r7, #8]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2bff      	cmp	r3, #255	; 0xff
 8002f6a:	d90e      	bls.n	8002f8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	; 0xff
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fe1e 	bl	8003bc4 <I2C_TransferConfig>
 8002f88:	e06c      	b.n	8003064 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fe0d 	bl	8003bc4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002faa:	e05b      	b.n	8003064 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	6a39      	ldr	r1, [r7, #32]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fcb9 	bl	8003928 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e07b      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d034      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x184>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d130      	bne.n	8003064 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	2200      	movs	r2, #0
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fc4b 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e04d      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2bff      	cmp	r3, #255	; 0xff
 8003024:	d90e      	bls.n	8003044 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	2300      	movs	r3, #0
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fdc1 	bl	8003bc4 <I2C_TransferConfig>
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fdb0 	bl	8003bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d19e      	bne.n	8002fac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fc98 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e01a      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003096:	400b      	ands	r3, r1
 8003098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	80002000 	.word	0x80002000
 80030c4:	fe00e800 	.word	0xfe00e800

080030c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	817b      	strh	r3, [r7, #10]
 80030d8:	4613      	mov	r3, r2
 80030da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 80db 	bne.w	80032a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_I2C_Master_Receive+0x30>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0d4      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003100:	f7ff fb18 	bl	8002734 <HAL_GetTick>
 8003104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2319      	movs	r3, #25
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fbc8 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0bf      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2222      	movs	r2, #34	; 0x22
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2210      	movs	r2, #16
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	893a      	ldrh	r2, [r7, #8]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	2bff      	cmp	r3, #255	; 0xff
 8003152:	d90e      	bls.n	8003172 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	b2da      	uxtb	r2, r3
 8003160:	8979      	ldrh	r1, [r7, #10]
 8003162:	4b52      	ldr	r3, [pc, #328]	; (80032ac <HAL_I2C_Master_Receive+0x1e4>)
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fd2a 	bl	8003bc4 <I2C_TransferConfig>
 8003170:	e06d      	b.n	800324e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_I2C_Master_Receive+0x1e4>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fd19 	bl	8003bc4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003192:	e05c      	b.n	800324e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	6a39      	ldr	r1, [r7, #32]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fc41 	bl	8003a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e07c      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d034      	beq.n	800324e <HAL_I2C_Master_Receive+0x186>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d130      	bne.n	800324e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fb56 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e04d      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	2bff      	cmp	r3, #255	; 0xff
 800320e:	d90e      	bls.n	800322e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	22ff      	movs	r2, #255	; 0xff
 8003214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	b2da      	uxtb	r2, r3
 800321c:	8979      	ldrh	r1, [r7, #10]
 800321e:	2300      	movs	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fccc 	bl	8003bc4 <I2C_TransferConfig>
 800322c:	e00f      	b.n	800324e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	b2da      	uxtb	r2, r3
 800323e:	8979      	ldrh	r1, [r7, #10]
 8003240:	2300      	movs	r3, #0
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fcbb 	bl	8003bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d19d      	bne.n	8003194 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6a39      	ldr	r1, [r7, #32]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fba3 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e01a      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2220      	movs	r2, #32
 8003272:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_I2C_Master_Receive+0x1e8>)
 8003280:	400b      	ands	r3, r1
 8003282:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	80002400 	.word	0x80002400
 80032b0:	fe00e800 	.word	0xfe00e800

080032b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	460b      	mov	r3, r1
 80032c8:	813b      	strh	r3, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	f040 80f9 	bne.w	80034ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x34>
 80032e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0ed      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_Mem_Write+0x4e>
 80032fe:	2302      	movs	r3, #2
 8003300:	e0e6      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800330a:	f7ff fa13 	bl	8002734 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2319      	movs	r3, #25
 8003316:	2201      	movs	r2, #1
 8003318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fac3 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0d1      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2221      	movs	r2, #33	; 0x21
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2240      	movs	r2, #64	; 0x40
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003354:	88f8      	ldrh	r0, [r7, #6]
 8003356:	893a      	ldrh	r2, [r7, #8]
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	4603      	mov	r3, r0
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f9d3 	bl	8003710 <I2C_RequestMemoryWrite>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0a9      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2bff      	cmp	r3, #255	; 0xff
 8003384:	d90e      	bls.n	80033a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	22ff      	movs	r2, #255	; 0xff
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	b2da      	uxtb	r2, r3
 8003392:	8979      	ldrh	r1, [r7, #10]
 8003394:	2300      	movs	r3, #0
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fc11 	bl	8003bc4 <I2C_TransferConfig>
 80033a2:	e00f      	b.n	80033c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	8979      	ldrh	r1, [r7, #10]
 80033b6:	2300      	movs	r3, #0
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fc00 	bl	8003bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 faad 	bl	8003928 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e07b      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d034      	beq.n	800347c <HAL_I2C_Mem_Write+0x1c8>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d130      	bne.n	800347c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2200      	movs	r2, #0
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fa3f 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e04d      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2bff      	cmp	r3, #255	; 0xff
 800343c:	d90e      	bls.n	800345c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	22ff      	movs	r2, #255	; 0xff
 8003442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	b2da      	uxtb	r2, r3
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	2300      	movs	r3, #0
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fbb5 	bl	8003bc4 <I2C_TransferConfig>
 800345a:	e00f      	b.n	800347c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	b2da      	uxtb	r2, r3
 800346c:	8979      	ldrh	r1, [r7, #10]
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fba4 	bl	8003bc4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d19e      	bne.n	80033c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa8c 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e01a      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2220      	movs	r2, #32
 80034a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_I2C_Mem_Write+0x224>)
 80034ae:	400b      	ands	r3, r1
 80034b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	fe00e800 	.word	0xfe00e800

080034dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	4608      	mov	r0, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	461a      	mov	r2, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	817b      	strh	r3, [r7, #10]
 80034ee:	460b      	mov	r3, r1
 80034f0:	813b      	strh	r3, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b20      	cmp	r3, #32
 8003500:	f040 80fd 	bne.w	80036fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_I2C_Mem_Read+0x34>
 800350a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0f1      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_I2C_Mem_Read+0x4e>
 8003526:	2302      	movs	r3, #2
 8003528:	e0ea      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003532:	f7ff f8ff 	bl	8002734 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2319      	movs	r3, #25
 800353e:	2201      	movs	r2, #1
 8003540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f9af 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0d5      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2222      	movs	r2, #34	; 0x22
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800357c:	88f8      	ldrh	r0, [r7, #6]
 800357e:	893a      	ldrh	r2, [r7, #8]
 8003580:	8979      	ldrh	r1, [r7, #10]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4603      	mov	r3, r0
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f913 	bl	80037b8 <I2C_RequestMemoryRead>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0ad      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2bff      	cmp	r3, #255	; 0xff
 80035ac:	d90e      	bls.n	80035cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	22ff      	movs	r2, #255	; 0xff
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	8979      	ldrh	r1, [r7, #10]
 80035bc:	4b52      	ldr	r3, [pc, #328]	; (8003708 <HAL_I2C_Mem_Read+0x22c>)
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fafd 	bl	8003bc4 <I2C_TransferConfig>
 80035ca:	e00f      	b.n	80035ec <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	8979      	ldrh	r1, [r7, #10]
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_I2C_Mem_Read+0x22c>)
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 faec 	bl	8003bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	2200      	movs	r2, #0
 80035f4:	2104      	movs	r1, #4
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f956 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07c      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d034      	beq.n	80036ac <HAL_I2C_Mem_Read+0x1d0>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d130      	bne.n	80036ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	2200      	movs	r2, #0
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f927 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e04d      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	d90e      	bls.n	800368c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fa9d 	bl	8003bc4 <I2C_TransferConfig>
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	8979      	ldrh	r1, [r7, #10]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fa8c 	bl	8003bc4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d19a      	bne.n	80035ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f974 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e01a      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2220      	movs	r2, #32
 80036d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_I2C_Mem_Read+0x230>)
 80036de:	400b      	ands	r3, r1
 80036e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	80002400 	.word	0x80002400
 800370c:	fe00e800 	.word	0xfe00e800

08003710 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	460b      	mov	r3, r1
 8003724:	813b      	strh	r3, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <I2C_RequestMemoryWrite+0xa4>)
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fa43 	bl	8003bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	69b9      	ldr	r1, [r7, #24]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f8f0 	bl	8003928 <I2C_WaitOnTXISFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e02c      	b.n	80037ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003758:	893b      	ldrh	r3, [r7, #8]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
 8003762:	e015      	b.n	8003790 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	b29b      	uxth	r3, r3
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	69b9      	ldr	r1, [r7, #24]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f8d6 	bl	8003928 <I2C_WaitOnTXISFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e012      	b.n	80037ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003786:	893b      	ldrh	r3, [r7, #8]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2200      	movs	r2, #0
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f884 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	80002000 	.word	0x80002000

080037b8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	4608      	mov	r0, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	461a      	mov	r2, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	817b      	strh	r3, [r7, #10]
 80037ca:	460b      	mov	r3, r1
 80037cc:	813b      	strh	r3, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <I2C_RequestMemoryRead+0xa4>)
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2300      	movs	r3, #0
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f9f0 	bl	8003bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f89d 	bl	8003928 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e02c      	b.n	8003852 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037fe:	893b      	ldrh	r3, [r7, #8]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
 8003808:	e015      	b.n	8003836 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800380a:	893b      	ldrh	r3, [r7, #8]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	b29b      	uxth	r3, r3
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f883 	bl	8003928 <I2C_WaitOnTXISFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e012      	b.n	8003852 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800382c:	893b      	ldrh	r3, [r7, #8]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2200      	movs	r2, #0
 800383e:	2140      	movs	r1, #64	; 0x40
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f831 	bl	80038a8 <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	80002000 	.word	0x80002000

08003860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b02      	cmp	r3, #2
 8003874:	d103      	bne.n	800387e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d007      	beq.n	800389c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	619a      	str	r2, [r3, #24]
  }
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b8:	e022      	b.n	8003900 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d01e      	beq.n	8003900 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fe ff37 	bl	8002734 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d113      	bne.n	8003900 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e00f      	b.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	429a      	cmp	r2, r3
 800391c:	d0cd      	beq.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003934:	e02c      	b.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f8dc 	bl	8003af8 <I2C_IsAcknowledgeFailed>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e02a      	b.n	80039a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d01e      	beq.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fe feef 	bl	8002734 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d113      	bne.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e007      	b.n	80039a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d1cb      	bne.n	8003936 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b4:	e028      	b.n	8003a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f89c 	bl	8003af8 <I2C_IsAcknowledgeFailed>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e026      	b.n	8003a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fe feb3 	bl	8002734 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d113      	bne.n	8003a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e007      	b.n	8003a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d1cf      	bne.n	80039b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a2c:	e055      	b.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f860 	bl	8003af8 <I2C_IsAcknowledgeFailed>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e053      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d129      	bne.n	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d105      	bne.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e03f      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a7e:	400b      	ands	r3, r1
 8003a80:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e022      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7fe fe46 	bl	8002734 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e007      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d1a2      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	fe00e800 	.word	0xfe00e800

08003af8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d151      	bne.n	8003bb6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b12:	e022      	b.n	8003b5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d01e      	beq.n	8003b5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1c:	f7fe fe0a 	bl	8002734 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <I2C_IsAcknowledgeFailed+0x3a>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d113      	bne.n	8003b5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f043 0220 	orr.w	r2, r3, #32
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e02e      	b.n	8003bb8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d1d5      	bne.n	8003b14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2220      	movs	r2, #32
 8003b76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7ff fe71 	bl	8003860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6859      	ldr	r1, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <I2C_IsAcknowledgeFailed+0xc8>)
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	fe00e800 	.word	0xfe00e800

08003bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	0d5b      	lsrs	r3, r3, #21
 8003be0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003be4:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <I2C_TransferConfig+0x58>)
 8003be6:	430b      	orrs	r3, r1
 8003be8:	43db      	mvns	r3, r3
 8003bea:	ea02 0103 	and.w	r1, r2, r3
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bf4:	7a7b      	ldrb	r3, [r7, #9]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	03ff63ff 	.word	0x03ff63ff

08003c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d138      	bne.n	8003ca8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e032      	b.n	8003caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e000      	b.n	8003caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d139      	bne.n	8003d40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e033      	b.n	8003d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2224      	movs	r2, #36	; 0x24
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40007000 	.word	0x40007000

08003d70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40007000 	.word	0x40007000

08003d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9a:	d130      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da8:	d038      	beq.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2232      	movs	r2, #50	; 0x32
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd0:	e002      	b.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d102      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x60>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f2      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d110      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e00f      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d007      	beq.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e14:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	20000000 	.word	0x20000000
 8003e34:	431bde83 	.word	0x431bde83

08003e38 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0307 	bic.w	r3, r3, #7
 8003e4a:	4a0f      	ldr	r2, [pc, #60]	; (8003e88 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003e64:	bf30      	wfi
 8003e66:	e002      	b.n	8003e6e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003e68:	bf40      	sev
    __WFE();
 8003e6a:	bf20      	wfe
    __WFE();
 8003e6c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	4a06      	ldr	r2, [pc, #24]	; (8003e8c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	6113      	str	r3, [r2, #16]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f000 bc11 	b.w	80046c6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea4:	4ba0      	ldr	r3, [pc, #640]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eae:	4b9e      	ldr	r3, [pc, #632]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80e4 	beq.w	800408e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_RCC_OscConfig+0x4c>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	f040 808b 	bne.w	8003fea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	f040 8087 	bne.w	8003fea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003edc:	4b92      	ldr	r3, [pc, #584]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x64>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e3e8      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	4b8b      	ldr	r3, [pc, #556]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <HAL_RCC_OscConfig+0x7e>
 8003f04:	4b88      	ldr	r3, [pc, #544]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0c:	e005      	b.n	8003f1a <HAL_RCC_OscConfig+0x8a>
 8003f0e:	4b86      	ldr	r3, [pc, #536]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d223      	bcs.n	8003f66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fd7a 	bl	8004a1c <RCC_SetFlashLatencyFromMSIRange>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e3c9      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f32:	4b7d      	ldr	r3, [pc, #500]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7c      	ldr	r2, [pc, #496]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b7a      	ldr	r3, [pc, #488]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4977      	ldr	r1, [pc, #476]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f50:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4972      	ldr	r1, [pc, #456]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
 8003f64:	e025      	b.n	8003fb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f66:	4b70      	ldr	r3, [pc, #448]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6f      	ldr	r2, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	f043 0308 	orr.w	r3, r3, #8
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b6d      	ldr	r3, [pc, #436]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	496a      	ldr	r1, [pc, #424]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f84:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	4965      	ldr	r1, [pc, #404]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fd3a 	bl	8004a1c <RCC_SetFlashLatencyFromMSIRange>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e389      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb2:	f000 fc6f 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	495a      	ldr	r1, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x29c>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	fa22 f303 	lsr.w	r3, r2, r3
 8003fce:	4a58      	ldr	r2, [pc, #352]	; (8004130 <HAL_RCC_OscConfig+0x2a0>)
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fd2:	4b58      	ldr	r3, [pc, #352]	; (8004134 <HAL_RCC_OscConfig+0x2a4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fb5c 	bl	8002694 <HAL_InitTick>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d052      	beq.n	800408c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	e36d      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d032      	beq.n	8004058 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a4c      	ldr	r2, [pc, #304]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ffe:	f7fe fb99 	bl	8002734 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004006:	f7fe fb95 	bl	8002734 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e356      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004018:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004024:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 800402a:	f043 0308 	orr.w	r3, r3, #8
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	493a      	ldr	r1, [pc, #232]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004042:	4b39      	ldr	r3, [pc, #228]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	4935      	ldr	r1, [pc, #212]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
 8004056:	e01a      	b.n	800408e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004058:	4b33      	ldr	r3, [pc, #204]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a32      	ldr	r2, [pc, #200]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004064:	f7fe fb66 	bl	8002734 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800406c:	f7fe fb62 	bl	8002734 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e323      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800407e:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x1dc>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d073      	beq.n	8004182 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d005      	beq.n	80040ac <HAL_RCC_OscConfig+0x21c>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d10e      	bne.n	80040c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d063      	beq.n	8004180 <HAL_RCC_OscConfig+0x2f0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d15f      	bne.n	8004180 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e300      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d106      	bne.n	80040dc <HAL_RCC_OscConfig+0x24c>
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a15      	ldr	r2, [pc, #84]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0x288>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x270>
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0x288>
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a08      	ldr	r2, [pc, #32]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a05      	ldr	r2, [pc, #20]	; (8004128 <HAL_RCC_OscConfig+0x298>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe fb08 	bl	8002734 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004126:	e010      	b.n	800414a <HAL_RCC_OscConfig+0x2ba>
 8004128:	40021000 	.word	0x40021000
 800412c:	08008adc 	.word	0x08008adc
 8004130:	20000000 	.word	0x20000000
 8004134:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fe fafc 	bl	8002734 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e2bd      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414a:	4baf      	ldr	r3, [pc, #700]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x2a8>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe faec 	bl	8002734 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe fae8 	bl	8002734 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e2a9      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004172:	4ba5      	ldr	r3, [pc, #660]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x2d0>
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d060      	beq.n	8004250 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_OscConfig+0x310>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d119      	bne.n	80041ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d116      	bne.n	80041ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a0:	4b99      	ldr	r3, [pc, #612]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_OscConfig+0x328>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e286      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b8:	4b93      	ldr	r3, [pc, #588]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	4990      	ldr	r1, [pc, #576]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041cc:	e040      	b.n	8004250 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d023      	beq.n	800421e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d6:	4b8c      	ldr	r3, [pc, #560]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a8b      	ldr	r2, [pc, #556]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fe faa7 	bl	8002734 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fe faa3 	bl	8002734 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e264      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fc:	4b82      	ldr	r3, [pc, #520]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b7f      	ldr	r3, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	061b      	lsls	r3, r3, #24
 8004216:	497c      	ldr	r1, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
 800421c:	e018      	b.n	8004250 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421e:	4b7a      	ldr	r3, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a79      	ldr	r2, [pc, #484]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fe fa83 	bl	8002734 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004232:	f7fe fa7f 	bl	8002734 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e240      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004244:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01c      	beq.n	800429e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426a:	4a67      	ldr	r2, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fa5e 	bl	8002734 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427c:	f7fe fa5a 	bl	8002734 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e21b      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428e:	4b5e      	ldr	r3, [pc, #376]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <HAL_RCC_OscConfig+0x3ec>
 800429c:	e01b      	b.n	80042d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429e:	4b5a      	ldr	r3, [pc, #360]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80042a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a4:	4a58      	ldr	r2, [pc, #352]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fe fa41 	bl	8002734 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b6:	f7fe fa3d 	bl	8002734 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e1fe      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80042ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ef      	bne.n	80042b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80a6 	beq.w	8004430 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e4:	2300      	movs	r3, #0
 80042e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042e8:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10d      	bne.n	8004310 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	4b44      	ldr	r3, [pc, #272]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a43      	ldr	r2, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004300:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430c:	2301      	movs	r3, #1
 800430e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004310:	4b3e      	ldr	r3, [pc, #248]	; (800440c <HAL_RCC_OscConfig+0x57c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d118      	bne.n	800434e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800431c:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_RCC_OscConfig+0x57c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a3a      	ldr	r2, [pc, #232]	; (800440c <HAL_RCC_OscConfig+0x57c>)
 8004322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004326:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004328:	f7fe fa04 	bl	8002734 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004330:	f7fe fa00 	bl	8002734 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1c1      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004342:	4b32      	ldr	r3, [pc, #200]	; (800440c <HAL_RCC_OscConfig+0x57c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d108      	bne.n	8004368 <HAL_RCC_OscConfig+0x4d8>
 8004356:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435c:	4a2a      	ldr	r2, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004366:	e024      	b.n	80043b2 <HAL_RCC_OscConfig+0x522>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d110      	bne.n	8004392 <HAL_RCC_OscConfig+0x502>
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	4a24      	ldr	r2, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	4a20      	ldr	r2, [pc, #128]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004390:	e00f      	b.n	80043b2 <HAL_RCC_OscConfig+0x522>
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	4a1b      	ldr	r2, [pc, #108]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80043aa:	f023 0304 	bic.w	r3, r3, #4
 80043ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fe f9bb 	bl	8002734 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fe f9b7 	bl	8002734 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e176      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_OscConfig+0x578>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ed      	beq.n	80043c2 <HAL_RCC_OscConfig+0x532>
 80043e6:	e01a      	b.n	800441e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fe f9a4 	bl	8002734 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ee:	e00f      	b.n	8004410 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fe f9a0 	bl	8002734 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d906      	bls.n	8004410 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e15f      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004410:	4baa      	ldr	r3, [pc, #680]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e8      	bne.n	80043f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441e:	7ffb      	ldrb	r3, [r7, #31]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004424:	4ba5      	ldr	r3, [pc, #660]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	4aa4      	ldr	r2, [pc, #656]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 800442a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d03c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01c      	beq.n	800447e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004444:	4b9d      	ldr	r3, [pc, #628]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800444a:	4a9c      	ldr	r2, [pc, #624]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fe f96e 	bl	8002734 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800445c:	f7fe f96a 	bl	8002734 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e12b      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800446e:	4b93      	ldr	r3, [pc, #588]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ef      	beq.n	800445c <HAL_RCC_OscConfig+0x5cc>
 800447c:	e01b      	b.n	80044b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800447e:	4b8f      	ldr	r3, [pc, #572]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004484:	4a8d      	ldr	r2, [pc, #564]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fe f951 	bl	8002734 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004496:	f7fe f94d 	bl	8002734 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e10e      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044a8:	4b84      	ldr	r3, [pc, #528]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80044aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ef      	bne.n	8004496 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8102 	beq.w	80046c4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f040 80c5 	bne.w	8004654 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044ca:	4b7c      	ldr	r3, [pc, #496]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 0203 	and.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	429a      	cmp	r2, r3
 80044dc:	d12c      	bne.n	8004538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	3b01      	subs	r3, #1
 80044ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d123      	bne.n	8004538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d11b      	bne.n	8004538 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d113      	bne.n	8004538 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	3b01      	subs	r3, #1
 800451e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d109      	bne.n	8004538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	3b01      	subs	r3, #1
 8004532:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d067      	beq.n	8004608 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d062      	beq.n	8004604 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800453e:	4b5f      	ldr	r3, [pc, #380]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0bb      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800454e:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5a      	ldr	r2, [pc, #360]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004558:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800455a:	f7fe f8eb 	bl	8002734 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fe f8e7 	bl	8002734 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0a8      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004574:	4b51      	ldr	r3, [pc, #324]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004580:	4b4e      	ldr	r3, [pc, #312]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	4b4e      	ldr	r3, [pc, #312]	; (80046c0 <HAL_RCC_OscConfig+0x830>)
 8004586:	4013      	ands	r3, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004590:	3a01      	subs	r2, #1
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	4311      	orrs	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800459a:	0212      	lsls	r2, r2, #8
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045a2:	0852      	lsrs	r2, r2, #1
 80045a4:	3a01      	subs	r2, #1
 80045a6:	0552      	lsls	r2, r2, #21
 80045a8:	4311      	orrs	r1, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045ae:	0852      	lsrs	r2, r2, #1
 80045b0:	3a01      	subs	r2, #1
 80045b2:	0652      	lsls	r2, r2, #25
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045ba:	06d2      	lsls	r2, r2, #27
 80045bc:	430a      	orrs	r2, r1
 80045be:	493f      	ldr	r1, [pc, #252]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045c4:	4b3d      	ldr	r3, [pc, #244]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3c      	ldr	r2, [pc, #240]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80045ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d0:	4b3a      	ldr	r3, [pc, #232]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a39      	ldr	r2, [pc, #228]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80045d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045dc:	f7fe f8aa 	bl	8002734 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fe f8a6 	bl	8002734 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e067      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f6:	4b31      	ldr	r3, [pc, #196]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004602:	e05f      	b.n	80046c4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e05e      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d157      	bne.n	80046c4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004614:	4b29      	ldr	r3, [pc, #164]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a28      	ldr	r2, [pc, #160]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 800461a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a25      	ldr	r2, [pc, #148]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800462c:	f7fe f882 	bl	8002734 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe f87e 	bl	8002734 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e03f      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x7a4>
 8004652:	e037      	b.n	80046c4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d02d      	beq.n	80046b6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b18      	ldr	r3, [pc, #96]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a17      	ldr	r2, [pc, #92]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004664:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4a11      	ldr	r2, [pc, #68]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004678:	f023 0303 	bic.w	r3, r3, #3
 800467c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4a0e      	ldr	r2, [pc, #56]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 8004684:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fe f851 	bl	8002734 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fe f84d 	bl	8002734 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e00e      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <HAL_RCC_OscConfig+0x82c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x806>
 80046b4:	e006      	b.n	80046c4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e005      	b.n	80046c6 <HAL_RCC_OscConfig+0x836>
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0c8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d910      	bls.n	8004714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 0207 	bic.w	r2, r3, #7
 80046fa:	4961      	ldr	r1, [pc, #388]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b5f      	ldr	r3, [pc, #380]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b0      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d04c      	beq.n	80047ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d107      	bne.n	8004738 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004728:	4b56      	ldr	r3, [pc, #344]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d121      	bne.n	8004778 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e09e      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d107      	bne.n	8004750 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004740:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d115      	bne.n	8004778 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e092      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004758:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e086      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004768:	4b46      	ldr	r3, [pc, #280]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e07e      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004778:	4b42      	ldr	r3, [pc, #264]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 0203 	bic.w	r2, r3, #3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	493f      	ldr	r1, [pc, #252]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478a:	f7fd ffd3 	bl	8002734 <HAL_GetTick>
 800478e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004790:	e00a      	b.n	80047a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004792:	f7fd ffcf 	bl	8002734 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e066      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a8:	4b36      	ldr	r3, [pc, #216]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 020c 	and.w	r2, r3, #12
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d1eb      	bne.n	8004792 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c6:	4b2f      	ldr	r3, [pc, #188]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	492c      	ldr	r1, [pc, #176]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d8:	4b29      	ldr	r3, [pc, #164]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d210      	bcs.n	8004808 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b26      	ldr	r3, [pc, #152]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 0207 	bic.w	r2, r3, #7
 80047ee:	4924      	ldr	r1, [pc, #144]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <HAL_RCC_ClockConfig+0x1b0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e036      	b.n	8004876 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4918      	ldr	r1, [pc, #96]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4910      	ldr	r1, [pc, #64]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004846:	f000 f825 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 800484a:	4602      	mov	r2, r0
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	490c      	ldr	r1, [pc, #48]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	5ccb      	ldrb	r3, [r1, r3]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fd ff12 	bl	8002694 <HAL_InitTick>
 8004870:	4603      	mov	r3, r0
 8004872:	72fb      	strb	r3, [r7, #11]

  return status;
 8004874:	7afb      	ldrb	r3, [r7, #11]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40022000 	.word	0x40022000
 8004884:	40021000 	.word	0x40021000
 8004888:	08008adc 	.word	0x08008adc
 800488c:	20000000 	.word	0x20000000
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a2:	4b3e      	ldr	r3, [pc, #248]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048ac:	4b3b      	ldr	r3, [pc, #236]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x34>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	d121      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11e      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	e005      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048f0:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004904:	e00a      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d102      	bne.n	8004912 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800490c:	4b25      	ldr	r3, [pc, #148]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	e004      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d101      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004918:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800491a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d134      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0xa6>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d003      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0xac>
 8004938:	e005      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800493c:	617b      	str	r3, [r7, #20]
      break;
 800493e:	e005      	b.n	800494c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004940:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004942:	617b      	str	r3, [r7, #20]
      break;
 8004944:	e002      	b.n	800494c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	617b      	str	r3, [r7, #20]
      break;
 800494a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800494c:	4b13      	ldr	r3, [pc, #76]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	3301      	adds	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	fb02 f203 	mul.w	r2, r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_RCC_GetSysClockFreq+0x108>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	0e5b      	lsrs	r3, r3, #25
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	3301      	adds	r3, #1
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800498c:	69bb      	ldr	r3, [r7, #24]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	08008af4 	.word	0x08008af4
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	007a1200 	.word	0x007a1200

080049ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000000 	.word	0x20000000

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4904      	ldr	r1, [pc, #16]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000
 80049ec:	08008aec 	.word	0x08008aec

080049f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f4:	f7ff ffda 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0adb      	lsrs	r3, r3, #11
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08008aec 	.word	0x08008aec

08004a1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a34:	f7ff f99c 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 8004a38:	6178      	str	r0, [r7, #20]
 8004a3a:	e014      	b.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a3c:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
 8004a48:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a54:	f7ff f98c 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 8004a58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6c:	d10b      	bne.n	8004a86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d919      	bls.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2ba0      	cmp	r3, #160	; 0xa0
 8004a78:	d902      	bls.n	8004a80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e013      	b.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a80:	2301      	movs	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e010      	b.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d902      	bls.n	8004a92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e00a      	b.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b80      	cmp	r3, #128	; 0x80
 8004a96:	d102      	bne.n	8004a9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a98:	2302      	movs	r3, #2
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	e004      	b.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b70      	cmp	r3, #112	; 0x70
 8004aa2:	d101      	bne.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 0207 	bic.w	r2, r3, #7
 8004ab0:	4909      	ldr	r1, [pc, #36]	; (8004ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40022000 	.word	0x40022000

08004adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ae8:	2300      	movs	r3, #0
 8004aea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d031      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b00:	d01a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b06:	d814      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b10:	d10f      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b12:	4bac      	ldr	r3, [pc, #688]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4aab      	ldr	r2, [pc, #684]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b1e:	e00c      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f9cc 	bl	8004ec4 <RCCEx_PLLSAI1_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	74fb      	strb	r3, [r7, #19]
      break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b40:	4ba0      	ldr	r3, [pc, #640]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	499d      	ldr	r1, [pc, #628]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b56:	e001      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8099 	beq.w	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b6e:	4b95      	ldr	r3, [pc, #596]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b84:	4b8f      	ldr	r3, [pc, #572]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	4a8e      	ldr	r2, [pc, #568]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b90:	4b8c      	ldr	r3, [pc, #560]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba0:	4b89      	ldr	r3, [pc, #548]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a88      	ldr	r2, [pc, #544]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004baa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bac:	f7fd fdc2 	bl	8002734 <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bb2:	e009      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb4:	f7fd fdbe 	bl	8002734 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	74fb      	strb	r3, [r7, #19]
        break;
 8004bc6:	e005      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc8:	4b7f      	ldr	r3, [pc, #508]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d155      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bda:	4b7a      	ldr	r3, [pc, #488]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01e      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d019      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bf6:	4b73      	ldr	r3, [pc, #460]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c02:	4b70      	ldr	r3, [pc, #448]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	4a6e      	ldr	r2, [pc, #440]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c12:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	4a6a      	ldr	r2, [pc, #424]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c22:	4a68      	ldr	r2, [pc, #416]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fd7e 	bl	8002734 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3a:	e00b      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fd7a 	bl	8002734 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d902      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	74fb      	strb	r3, [r7, #19]
            break;
 8004c52:	e006      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c54:	4b5b      	ldr	r3, [pc, #364]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0ec      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c68:	4b56      	ldr	r3, [pc, #344]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	4953      	ldr	r1, [pc, #332]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c7e:	e004      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	74bb      	strb	r3, [r7, #18]
 8004c84:	e001      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8a:	7c7b      	ldrb	r3, [r7, #17]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c90:	4b4c      	ldr	r3, [pc, #304]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	4a4b      	ldr	r2, [pc, #300]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ca8:	4b46      	ldr	r3, [pc, #280]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4943      	ldr	r1, [pc, #268]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cca:	4b3e      	ldr	r3, [pc, #248]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f023 020c 	bic.w	r2, r3, #12
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	493a      	ldr	r1, [pc, #232]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cec:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	4932      	ldr	r1, [pc, #200]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d0e:	4b2d      	ldr	r3, [pc, #180]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	4929      	ldr	r1, [pc, #164]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	4921      	ldr	r1, [pc, #132]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d52:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4918      	ldr	r1, [pc, #96]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	4910      	ldr	r1, [pc, #64]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02c      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	4907      	ldr	r1, [pc, #28]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db4:	d10a      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db6:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a02      	ldr	r2, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc0:	60d3      	str	r3, [r2, #12]
 8004dc2:	e015      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f871 	bl	8004ec4 <RCCEx_PLLSAI1_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004dec:	7cfb      	ldrb	r3, [r7, #19]
 8004dee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d028      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dfc:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1a:	d106      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
 8004e28:	e011      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f842 	bl	8004ec4 <RCCEx_PLLSAI1_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01c      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e5a:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e68:	4915      	ldr	r1, [pc, #84]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f81f 	bl	8004ec4 <RCCEx_PLLSAI1_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004e90:	7cfb      	ldrb	r3, [r7, #19]
 8004e92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	4904      	ldr	r1, [pc, #16]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004eb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000

08004ec4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ed2:	4b74      	ldr	r3, [pc, #464]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d018      	beq.n	8004f10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ede:	4b71      	ldr	r3, [pc, #452]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0203 	and.w	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d10d      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ef6:	4b6b      	ldr	r3, [pc, #428]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
       ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d047      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
 8004f0e:	e044      	b.n	8004f9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d018      	beq.n	8004f4a <RCCEx_PLLSAI1_Config+0x86>
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d825      	bhi.n	8004f68 <RCCEx_PLLSAI1_Config+0xa4>
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d002      	beq.n	8004f26 <RCCEx_PLLSAI1_Config+0x62>
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d009      	beq.n	8004f38 <RCCEx_PLLSAI1_Config+0x74>
 8004f24:	e020      	b.n	8004f68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f26:	4b5f      	ldr	r3, [pc, #380]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d11d      	bne.n	8004f6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f36:	e01a      	b.n	8004f6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f38:	4b5a      	ldr	r3, [pc, #360]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d116      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f48:	e013      	b.n	8004f72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f4a:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f56:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f66:	e006      	b.n	8004f76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	e004      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e002      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10d      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f7e:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	430b      	orrs	r3, r1
 8004f94:	4943      	ldr	r1, [pc, #268]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d17c      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fa0:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3f      	ldr	r2, [pc, #252]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fac:	f7fd fbc2 	bl	8002734 <HAL_GetTick>
 8004fb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fb2:	e009      	b.n	8004fc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fb4:	f7fd fbbe 	bl	8002734 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d902      	bls.n	8004fc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fc6:	e005      	b.n	8004fd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ef      	bne.n	8004fb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d15f      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fe0:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6892      	ldr	r2, [r2, #8]
 8004ff0:	0211      	lsls	r1, r2, #8
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68d2      	ldr	r2, [r2, #12]
 8004ff6:	06d2      	lsls	r2, r2, #27
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	492a      	ldr	r1, [pc, #168]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]
 8005000:	e027      	b.n	8005052 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d112      	bne.n	800502e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005008:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005010:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6892      	ldr	r2, [r2, #8]
 8005018:	0211      	lsls	r1, r2, #8
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6912      	ldr	r2, [r2, #16]
 800501e:	0852      	lsrs	r2, r2, #1
 8005020:	3a01      	subs	r2, #1
 8005022:	0552      	lsls	r2, r2, #21
 8005024:	430a      	orrs	r2, r1
 8005026:	491f      	ldr	r1, [pc, #124]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	610b      	str	r3, [r1, #16]
 800502c:	e011      	b.n	8005052 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800502e:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005036:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	0211      	lsls	r1, r2, #8
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6952      	ldr	r2, [r2, #20]
 8005044:	0852      	lsrs	r2, r2, #1
 8005046:	3a01      	subs	r2, #1
 8005048:	0652      	lsls	r2, r2, #25
 800504a:	430a      	orrs	r2, r1
 800504c:	4915      	ldr	r1, [pc, #84]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800505c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505e:	f7fd fb69 	bl	8002734 <HAL_GetTick>
 8005062:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005064:	e009      	b.n	800507a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005066:	f7fd fb65 	bl	8002734 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d902      	bls.n	800507a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	73fb      	strb	r3, [r7, #15]
          break;
 8005078:	e005      	b.n	8005086 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0ef      	beq.n	8005066 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005096:	4313      	orrs	r3, r2
 8005098:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000

080050a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 808b 	beq.w	80051d2 <HAL_RTC_Init+0x12a>
    assert_param(IS_RTC_BINARY_MODE(hrtc->Init.BinMode));
    assert_param(IS_RTC_BINARY_MIX_BCDU(hrtc->Init.BinMixBcdU));
#endif

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d124      	bne.n	8005112 <HAL_RTC_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2020 	strb.w	r2, [r3, #32]
      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a42      	ldr	r2, [pc, #264]	; (80051dc <HAL_RTC_Init+0x134>)
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a41      	ldr	r2, [pc, #260]	; (80051e0 <HAL_RTC_Init+0x138>)
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a41      	ldr	r2, [pc, #260]	; (80051e4 <HAL_RTC_Init+0x13c>)
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <HAL_RTC_Init+0x140>)
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif

#if defined(RTC_TAMPER1_SUPPORT)
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
#endif /* RTC_TAMPER1_SUPPORT */
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a40      	ldr	r2, [pc, #256]	; (80051ec <HAL_RTC_Init+0x144>)
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34
#if defined(RTC_TAMPER3_SUPPORT)
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
#endif /* RTC_TAMPER3_SUPPORT */

      if (hrtc->MspInitCallback == NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_RTC_Init+0x54>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a3d      	ldr	r2, [pc, #244]	; (80051f0 <HAL_RTC_Init+0x148>)
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <HAL_RTC_Init+0x6a>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a39      	ldr	r2, [pc, #228]	; (80051f4 <HAL_RTC_Init+0x14c>)
 8005110:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	22ca      	movs	r2, #202	; 0xca
 8005120:	625a      	str	r2, [r3, #36]	; 0x24
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2253      	movs	r2, #83	; 0x53
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f894 	bl	8005258 <RTC_EnterInitMode>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d14b      	bne.n	80051d2 <HAL_RTC_Init+0x12a>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514c:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6899      	ldr	r1, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68d2      	ldr	r2, [r2, #12]
 8005174:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6919      	ldr	r1, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	041a      	lsls	r2, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f898 	bl	80052c0 <RTC_ExitInitMode>
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11b      	bne.n	80051d2 <HAL_RTC_Init+0x12a>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0203 	bic.w	r2, r2, #3
 80051a8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	22ff      	movs	r2, #255	; 0xff
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	08005581 	.word	0x08005581
 80051e4:	0800533d 	.word	0x0800533d
 80051e8:	08002081 	.word	0x08002081
 80051ec:	08005595 	.word	0x08005595
 80051f0:	080021b5 	.word	0x080021b5
 80051f4:	08002225 	.word	0x08002225

080051f8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005222:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005224:	f7fd fa86 	bl	8002734 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800522a:	e009      	b.n	8005240 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800522c:	f7fd fa82 	bl	8002734 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800523a:	d901      	bls.n	8005240 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e007      	b.n	8005250 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0ee      	beq.n	800522c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d120      	bne.n	80052b4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800527c:	f7fd fa5a 	bl	8002734 <HAL_GetTick>
 8005280:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005282:	e00d      	b.n	80052a0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005284:	f7fd fa56 	bl	8002734 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005292:	d905      	bls.n	80052a0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2203      	movs	r2, #3
 800529c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <RTC_EnterInitMode+0x5c>
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d1e7      	bne.n	8005284 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80052cc:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <RTC_ExitInitMode+0x78>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <RTC_ExitInitMode+0x78>)
 80052d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80052d8:	4b17      	ldr	r3, [pc, #92]	; (8005338 <RTC_ExitInitMode+0x78>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10c      	bne.n	80052fe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff91 	bl	800520c <HAL_RTC_WaitForSynchro>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01e      	beq.n	800532e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2203      	movs	r2, #3
 80052f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e017      	b.n	800532e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <RTC_ExitInitMode+0x78>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4a0d      	ldr	r2, [pc, #52]	; (8005338 <RTC_ExitInitMode+0x78>)
 8005304:	f023 0320 	bic.w	r3, r3, #32
 8005308:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ff7e 	bl	800520c <HAL_RTC_WaitForSynchro>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2203      	movs	r2, #3
 800531a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <RTC_ExitInitMode+0x78>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	4a04      	ldr	r2, [pc, #16]	; (8005338 <RTC_ExitInitMode+0x78>)
 8005328:	f043 0320 	orr.w	r3, r3, #32
 800532c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40002800 	.word	0x40002800

0800533c <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005366:	2302      	movs	r3, #2
 8005368:	e07f      	b.n	800546a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	22ca      	movs	r2, #202	; 0xca
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2253      	movs	r2, #83	; 0x53
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005398:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80053aa:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d120      	bne.n	80053fc <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80053ba:	f7fd f9bb 	bl	8002734 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80053c0:	e015      	b.n	80053ee <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053c2:	f7fd f9b7 	bl	8002734 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d0:	d90d      	bls.n	80053ee <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e03d      	b.n	800546a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0e2      	beq.n	80053c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f023 0107 	bic.w	r1, r3, #7
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005418:	4b16      	ldr	r3, [pc, #88]	; (8005474 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005422:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005424:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4a12      	ldr	r2, [pc, #72]	; (8005474 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800542a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800542e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800543e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800544e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40010400 	.word	0x40010400

08005478 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800548a:	2302      	movs	r3, #2
 800548c:	e04d      	b.n	800552a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	22ca      	movs	r2, #202	; 0xca
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2253      	movs	r2, #83	; 0x53
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054bc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054cc:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80054ce:	f7fd f931 	bl	8002734 <HAL_GetTick>
 80054d2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80054d4:	e015      	b.n	8005502 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054d6:	f7fd f92d 	bl	8002734 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e4:	d90d      	bls.n	8005502 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	22ff      	movs	r2, #255	; 0xff
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2203      	movs	r2, #3
 80054f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e013      	b.n	800552a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0e2      	beq.n	80054d6 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800553e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005542:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005562:	60da      	str	r2, [r3, #12]
#endif

    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40010400 	.word	0x40010400

08005580 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e040      	b.n	800563c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc ffc8 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2224      	movs	r2, #36	; 0x24
 80055d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f8c0 	bl	800576c <UART_SetConfig>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e022      	b.n	800563c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fac0 	bl	8005b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb47 	bl	8005cc8 <UART_CheckIdleState>
 800563a:	4603      	mov	r3, r0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005658:	2b20      	cmp	r3, #32
 800565a:	f040 8082 	bne.w	8005762 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_UART_Transmit+0x26>
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e07a      	b.n	8005764 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_UART_Transmit+0x38>
 8005678:	2302      	movs	r3, #2
 800567a:	e073      	b.n	8005764 <HAL_UART_Transmit+0x120>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2221      	movs	r2, #33	; 0x21
 8005690:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005692:	f7fd f84f 	bl	8002734 <HAL_GetTick>
 8005696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	88fa      	ldrh	r2, [r7, #6]
 80056a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b0:	d108      	bne.n	80056c4 <HAL_UART_Transmit+0x80>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e003      	b.n	80056cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056d4:	e02d      	b.n	8005732 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	2180      	movs	r1, #128	; 0x80
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 fb3a 	bl	8005d5a <UART_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e039      	b.n	8005764 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005702:	b292      	uxth	r2, r2
 8005704:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	3302      	adds	r3, #2
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	e008      	b.n	8005720 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	781a      	ldrb	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	b292      	uxth	r2, r2
 8005718:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3301      	adds	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1cb      	bne.n	80056d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2200      	movs	r2, #0
 8005746:	2140      	movs	r1, #64	; 0x40
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fb06 	bl	8005d5a <UART_WaitOnFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e005      	b.n	8005764 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800576c:	b5b0      	push	{r4, r5, r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	4313      	orrs	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4baf      	ldr	r3, [pc, #700]	; (8005a54 <UART_SetConfig+0x2e8>)
 8005798:	4013      	ands	r3, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	69f9      	ldr	r1, [r7, #28]
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4aa4      	ldr	r2, [pc, #656]	; (8005a58 <UART_SetConfig+0x2ec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a9b      	ldr	r2, [pc, #620]	; (8005a5c <UART_SetConfig+0x2f0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d121      	bne.n	8005836 <UART_SetConfig+0xca>
 80057f2:	4b9b      	ldr	r3, [pc, #620]	; (8005a60 <UART_SetConfig+0x2f4>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d817      	bhi.n	8005830 <UART_SetConfig+0xc4>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x9c>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	08005819 	.word	0x08005819
 800580c:	08005825 	.word	0x08005825
 8005810:	0800581f 	.word	0x0800581f
 8005814:	0800582b 	.word	0x0800582b
 8005818:	2301      	movs	r3, #1
 800581a:	76fb      	strb	r3, [r7, #27]
 800581c:	e070      	b.n	8005900 <UART_SetConfig+0x194>
 800581e:	2302      	movs	r3, #2
 8005820:	76fb      	strb	r3, [r7, #27]
 8005822:	e06d      	b.n	8005900 <UART_SetConfig+0x194>
 8005824:	2304      	movs	r3, #4
 8005826:	76fb      	strb	r3, [r7, #27]
 8005828:	e06a      	b.n	8005900 <UART_SetConfig+0x194>
 800582a:	2308      	movs	r3, #8
 800582c:	76fb      	strb	r3, [r7, #27]
 800582e:	e067      	b.n	8005900 <UART_SetConfig+0x194>
 8005830:	2310      	movs	r3, #16
 8005832:	76fb      	strb	r3, [r7, #27]
 8005834:	e064      	b.n	8005900 <UART_SetConfig+0x194>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a8a      	ldr	r2, [pc, #552]	; (8005a64 <UART_SetConfig+0x2f8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d132      	bne.n	80058a6 <UART_SetConfig+0x13a>
 8005840:	4b87      	ldr	r3, [pc, #540]	; (8005a60 <UART_SetConfig+0x2f4>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	f003 030c 	and.w	r3, r3, #12
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d828      	bhi.n	80058a0 <UART_SetConfig+0x134>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0xe8>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005889 	.word	0x08005889
 8005858:	080058a1 	.word	0x080058a1
 800585c:	080058a1 	.word	0x080058a1
 8005860:	080058a1 	.word	0x080058a1
 8005864:	08005895 	.word	0x08005895
 8005868:	080058a1 	.word	0x080058a1
 800586c:	080058a1 	.word	0x080058a1
 8005870:	080058a1 	.word	0x080058a1
 8005874:	0800588f 	.word	0x0800588f
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058a1 	.word	0x080058a1
 8005884:	0800589b 	.word	0x0800589b
 8005888:	2300      	movs	r3, #0
 800588a:	76fb      	strb	r3, [r7, #27]
 800588c:	e038      	b.n	8005900 <UART_SetConfig+0x194>
 800588e:	2302      	movs	r3, #2
 8005890:	76fb      	strb	r3, [r7, #27]
 8005892:	e035      	b.n	8005900 <UART_SetConfig+0x194>
 8005894:	2304      	movs	r3, #4
 8005896:	76fb      	strb	r3, [r7, #27]
 8005898:	e032      	b.n	8005900 <UART_SetConfig+0x194>
 800589a:	2308      	movs	r3, #8
 800589c:	76fb      	strb	r3, [r7, #27]
 800589e:	e02f      	b.n	8005900 <UART_SetConfig+0x194>
 80058a0:	2310      	movs	r3, #16
 80058a2:	76fb      	strb	r3, [r7, #27]
 80058a4:	e02c      	b.n	8005900 <UART_SetConfig+0x194>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a6b      	ldr	r2, [pc, #428]	; (8005a58 <UART_SetConfig+0x2ec>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d125      	bne.n	80058fc <UART_SetConfig+0x190>
 80058b0:	4b6b      	ldr	r3, [pc, #428]	; (8005a60 <UART_SetConfig+0x2f4>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058be:	d017      	beq.n	80058f0 <UART_SetConfig+0x184>
 80058c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058c4:	d817      	bhi.n	80058f6 <UART_SetConfig+0x18a>
 80058c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ca:	d00b      	beq.n	80058e4 <UART_SetConfig+0x178>
 80058cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d0:	d811      	bhi.n	80058f6 <UART_SetConfig+0x18a>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <UART_SetConfig+0x172>
 80058d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058da:	d006      	beq.n	80058ea <UART_SetConfig+0x17e>
 80058dc:	e00b      	b.n	80058f6 <UART_SetConfig+0x18a>
 80058de:	2300      	movs	r3, #0
 80058e0:	76fb      	strb	r3, [r7, #27]
 80058e2:	e00d      	b.n	8005900 <UART_SetConfig+0x194>
 80058e4:	2302      	movs	r3, #2
 80058e6:	76fb      	strb	r3, [r7, #27]
 80058e8:	e00a      	b.n	8005900 <UART_SetConfig+0x194>
 80058ea:	2304      	movs	r3, #4
 80058ec:	76fb      	strb	r3, [r7, #27]
 80058ee:	e007      	b.n	8005900 <UART_SetConfig+0x194>
 80058f0:	2308      	movs	r3, #8
 80058f2:	76fb      	strb	r3, [r7, #27]
 80058f4:	e004      	b.n	8005900 <UART_SetConfig+0x194>
 80058f6:	2310      	movs	r3, #16
 80058f8:	76fb      	strb	r3, [r7, #27]
 80058fa:	e001      	b.n	8005900 <UART_SetConfig+0x194>
 80058fc:	2310      	movs	r3, #16
 80058fe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a54      	ldr	r2, [pc, #336]	; (8005a58 <UART_SetConfig+0x2ec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d173      	bne.n	80059f2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800590a:	7efb      	ldrb	r3, [r7, #27]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d824      	bhi.n	800595a <UART_SetConfig+0x1ee>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0x1ac>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800593d 	.word	0x0800593d
 800591c:	0800595b 	.word	0x0800595b
 8005920:	08005945 	.word	0x08005945
 8005924:	0800595b 	.word	0x0800595b
 8005928:	0800594b 	.word	0x0800594b
 800592c:	0800595b 	.word	0x0800595b
 8005930:	0800595b 	.word	0x0800595b
 8005934:	0800595b 	.word	0x0800595b
 8005938:	08005953 	.word	0x08005953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800593c:	f7ff f842 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8005940:	6178      	str	r0, [r7, #20]
        break;
 8005942:	e00f      	b.n	8005964 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005944:	4b48      	ldr	r3, [pc, #288]	; (8005a68 <UART_SetConfig+0x2fc>)
 8005946:	617b      	str	r3, [r7, #20]
        break;
 8005948:	e00c      	b.n	8005964 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594a:	f7fe ffa3 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 800594e:	6178      	str	r0, [r7, #20]
        break;
 8005950:	e008      	b.n	8005964 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005956:	617b      	str	r3, [r7, #20]
        break;
 8005958:	e004      	b.n	8005964 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	76bb      	strb	r3, [r7, #26]
        break;
 8005962:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80fe 	beq.w	8005b68 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4413      	add	r3, r2
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	429a      	cmp	r2, r3
 800597a:	d305      	bcc.n	8005988 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d902      	bls.n	800598e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	76bb      	strb	r3, [r7, #26]
 800598c:	e0ec      	b.n	8005b68 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4618      	mov	r0, r3
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	020b      	lsls	r3, r1, #8
 80059a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059a4:	0202      	lsls	r2, r0, #8
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	6849      	ldr	r1, [r1, #4]
 80059aa:	0849      	lsrs	r1, r1, #1
 80059ac:	4608      	mov	r0, r1
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	1814      	adds	r4, r2, r0
 80059b4:	eb43 0501 	adc.w	r5, r3, r1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	461a      	mov	r2, r3
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7fb f99f 	bl	8000d08 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4613      	mov	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d8:	d308      	bcc.n	80059ec <UART_SetConfig+0x280>
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e0:	d204      	bcs.n	80059ec <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e0bd      	b.n	8005b68 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	76bb      	strb	r3, [r7, #26]
 80059f0:	e0ba      	b.n	8005b68 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fa:	d168      	bne.n	8005ace <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80059fc:	7efb      	ldrb	r3, [r7, #27]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d834      	bhi.n	8005a6c <UART_SetConfig+0x300>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0x29c>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a6d 	.word	0x08005a6d
 8005a20:	08005a6d 	.word	0x08005a6d
 8005a24:	08005a6d 	.word	0x08005a6d
 8005a28:	08005a4b 	.word	0x08005a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f7fe ffca 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8005a30:	6178      	str	r0, [r7, #20]
        break;
 8005a32:	e020      	b.n	8005a76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a34:	f7fe ffdc 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 8005a38:	6178      	str	r0, [r7, #20]
        break;
 8005a3a:	e01c      	b.n	8005a76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <UART_SetConfig+0x2fc>)
 8005a3e:	617b      	str	r3, [r7, #20]
        break;
 8005a40:	e019      	b.n	8005a76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a42:	f7fe ff27 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8005a46:	6178      	str	r0, [r7, #20]
        break;
 8005a48:	e015      	b.n	8005a76 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4e:	617b      	str	r3, [r7, #20]
        break;
 8005a50:	e011      	b.n	8005a76 <UART_SetConfig+0x30a>
 8005a52:	bf00      	nop
 8005a54:	efff69f3 	.word	0xefff69f3
 8005a58:	40008000 	.word	0x40008000
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40004400 	.word	0x40004400
 8005a68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	76bb      	strb	r3, [r7, #26]
        break;
 8005a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d075      	beq.n	8005b68 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	005a      	lsls	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	441a      	add	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b0f      	cmp	r3, #15
 8005a98:	d916      	bls.n	8005ac8 <UART_SetConfig+0x35c>
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa0:	d212      	bcs.n	8005ac8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f023 030f 	bic.w	r3, r3, #15
 8005aaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	89fb      	ldrh	r3, [r7, #14]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	89fa      	ldrh	r2, [r7, #14]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	e04f      	b.n	8005b68 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	76bb      	strb	r3, [r7, #26]
 8005acc:	e04c      	b.n	8005b68 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ace:	7efb      	ldrb	r3, [r7, #27]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d828      	bhi.n	8005b26 <UART_SetConfig+0x3ba>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x370>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b09 	.word	0x08005b09
 8005ae4:	08005b11 	.word	0x08005b11
 8005ae8:	08005b27 	.word	0x08005b27
 8005aec:	08005b17 	.word	0x08005b17
 8005af0:	08005b27 	.word	0x08005b27
 8005af4:	08005b27 	.word	0x08005b27
 8005af8:	08005b27 	.word	0x08005b27
 8005afc:	08005b1f 	.word	0x08005b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7fe ff60 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8005b04:	6178      	str	r0, [r7, #20]
        break;
 8005b06:	e013      	b.n	8005b30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b08:	f7fe ff72 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 8005b0c:	6178      	str	r0, [r7, #20]
        break;
 8005b0e:	e00f      	b.n	8005b30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b10:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <UART_SetConfig+0x414>)
 8005b12:	617b      	str	r3, [r7, #20]
        break;
 8005b14:	e00c      	b.n	8005b30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b16:	f7fe febd 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8005b1a:	6178      	str	r0, [r7, #20]
        break;
 8005b1c:	e008      	b.n	8005b30 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b22:	617b      	str	r3, [r7, #20]
        break;
 8005b24:	e004      	b.n	8005b30 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	76bb      	strb	r3, [r7, #26]
        break;
 8005b2e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d018      	beq.n	8005b68 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	085a      	lsrs	r2, r3, #1
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	441a      	add	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b0f      	cmp	r3, #15
 8005b50:	d908      	bls.n	8005b64 <UART_SetConfig+0x3f8>
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b58:	d204      	bcs.n	8005b64 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	60da      	str	r2, [r3, #12]
 8005b62:	e001      	b.n	8005b68 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b74:	7ebb      	ldrb	r3, [r7, #26]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	00f42400 	.word	0x00f42400

08005b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c82:	d10a      	bne.n	8005c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd8:	f7fc fd2c 	bl	8002734 <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d10e      	bne.n	8005d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f82d 	bl	8005d5a <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e023      	b.n	8005d52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d10e      	bne.n	8005d36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f817 	bl	8005d5a <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e00d      	b.n	8005d52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6a:	e05e      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d05a      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d74:	f7fc fcde 	bl	8002734 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d302      	bcc.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11b      	bne.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e043      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d02c      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dde:	d124      	bne.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005df8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e00f      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d091      	beq.n	8005d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b088      	sub	sp, #32
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	f040 80f5 	bne.w	8006056 <HAL_UARTEx_ReceiveToIdle+0x204>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_UARTEx_ReceiveToIdle+0x26>
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_UARTEx_ReceiveToIdle+0x2a>
    {
      return  HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0ed      	b.n	8006058 <HAL_UARTEx_ReceiveToIdle+0x206>
    }

    __HAL_LOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_UARTEx_ReceiveToIdle+0x38>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e0e6      	b.n	8006058 <HAL_UARTEx_ReceiveToIdle+0x206>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2222      	movs	r2, #34	; 0x22
 8005e9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ea6:	f7fc fc45 	bl	8002734 <HAL_GetTick>
 8005eaa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec4:	d10e      	bne.n	8005ee4 <HAL_UARTEx_ReceiveToIdle+0x92>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d105      	bne.n	8005eda <HAL_UARTEx_ReceiveToIdle+0x88>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ed8:	e02d      	b.n	8005f36 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ee2:	e028      	b.n	8005f36 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_UARTEx_ReceiveToIdle+0xb6>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <HAL_UARTEx_ReceiveToIdle+0xac>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005efc:	e01b      	b.n	8005f36 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	227f      	movs	r2, #127	; 0x7f
 8005f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f06:	e016      	b.n	8005f36 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f10:	d10d      	bne.n	8005f2e <HAL_UARTEx_ReceiveToIdle+0xdc>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <HAL_UARTEx_ReceiveToIdle+0xd2>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	227f      	movs	r2, #127	; 0x7f
 8005f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f22:	e008      	b.n	8005f36 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	223f      	movs	r2, #63	; 0x3f
 8005f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f2c:	e003      	b.n	8005f36 <HAL_UARTEx_ReceiveToIdle+0xe4>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f3c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	d108      	bne.n	8005f5a <HAL_UARTEx_ReceiveToIdle+0x108>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <HAL_UARTEx_ReceiveToIdle+0x108>
    {
      pdata8bits  = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e003      	b.n	8005f62 <HAL_UARTEx_ReceiveToIdle+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f70:	e05b      	b.n	800602a <HAL_UARTEx_ReceiveToIdle+0x1d8>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d10c      	bne.n	8005f9a <HAL_UARTEx_ReceiveToIdle+0x148>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2210      	movs	r2, #16
 8005f86:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <HAL_UARTEx_ReceiveToIdle+0x148>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e05e      	b.n	8006058 <HAL_UARTEx_ReceiveToIdle+0x206>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d12c      	bne.n	8006002 <HAL_UARTEx_ReceiveToIdle+0x1b0>
      {
        if (pdata8bits == NULL)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10c      	bne.n	8005fc8 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	8a7b      	ldrh	r3, [r7, #18]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e00d      	b.n	8005fe4 <HAL_UARTEx_ReceiveToIdle+0x192>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	8a7b      	ldrh	r3, [r7, #18]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d00f      	beq.n	800602a <HAL_UARTEx_ReceiveToIdle+0x1d8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800600a:	f7fc fb93 	bl	8002734 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <HAL_UARTEx_ReceiveToIdle+0x1ce>
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <HAL_UARTEx_ReceiveToIdle+0x1d8>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e016      	b.n	8006058 <HAL_UARTEx_ReceiveToIdle+0x206>
    while (huart->RxXferCount > 0U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d19d      	bne.n	8005f72 <HAL_UARTEx_ReceiveToIdle+0x120>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006042:	b29b      	uxth	r3, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	b29a      	uxth	r2, r3
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <HAL_UARTEx_ReceiveToIdle+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <__errno>:
 8006060:	4b01      	ldr	r3, [pc, #4]	; (8006068 <__errno+0x8>)
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	2000000c 	.word	0x2000000c

0800606c <__libc_init_array>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	4d0d      	ldr	r5, [pc, #52]	; (80060a4 <__libc_init_array+0x38>)
 8006070:	4c0d      	ldr	r4, [pc, #52]	; (80060a8 <__libc_init_array+0x3c>)
 8006072:	1b64      	subs	r4, r4, r5
 8006074:	10a4      	asrs	r4, r4, #2
 8006076:	2600      	movs	r6, #0
 8006078:	42a6      	cmp	r6, r4
 800607a:	d109      	bne.n	8006090 <__libc_init_array+0x24>
 800607c:	4d0b      	ldr	r5, [pc, #44]	; (80060ac <__libc_init_array+0x40>)
 800607e:	4c0c      	ldr	r4, [pc, #48]	; (80060b0 <__libc_init_array+0x44>)
 8006080:	f002 fcf0 	bl	8008a64 <_init>
 8006084:	1b64      	subs	r4, r4, r5
 8006086:	10a4      	asrs	r4, r4, #2
 8006088:	2600      	movs	r6, #0
 800608a:	42a6      	cmp	r6, r4
 800608c:	d105      	bne.n	800609a <__libc_init_array+0x2e>
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	f855 3b04 	ldr.w	r3, [r5], #4
 8006094:	4798      	blx	r3
 8006096:	3601      	adds	r6, #1
 8006098:	e7ee      	b.n	8006078 <__libc_init_array+0xc>
 800609a:	f855 3b04 	ldr.w	r3, [r5], #4
 800609e:	4798      	blx	r3
 80060a0:	3601      	adds	r6, #1
 80060a2:	e7f2      	b.n	800608a <__libc_init_array+0x1e>
 80060a4:	08008f0c 	.word	0x08008f0c
 80060a8:	08008f0c 	.word	0x08008f0c
 80060ac:	08008f0c 	.word	0x08008f0c
 80060b0:	08008f10 	.word	0x08008f10

080060b4 <memset>:
 80060b4:	4402      	add	r2, r0
 80060b6:	4603      	mov	r3, r0
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d100      	bne.n	80060be <memset+0xa>
 80060bc:	4770      	bx	lr
 80060be:	f803 1b01 	strb.w	r1, [r3], #1
 80060c2:	e7f9      	b.n	80060b8 <memset+0x4>

080060c4 <__cvt>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	ec55 4b10 	vmov	r4, r5, d0
 80060cc:	2d00      	cmp	r5, #0
 80060ce:	460e      	mov	r6, r1
 80060d0:	4619      	mov	r1, r3
 80060d2:	462b      	mov	r3, r5
 80060d4:	bfbb      	ittet	lt
 80060d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060da:	461d      	movlt	r5, r3
 80060dc:	2300      	movge	r3, #0
 80060de:	232d      	movlt	r3, #45	; 0x2d
 80060e0:	700b      	strb	r3, [r1, #0]
 80060e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060e8:	4691      	mov	r9, r2
 80060ea:	f023 0820 	bic.w	r8, r3, #32
 80060ee:	bfbc      	itt	lt
 80060f0:	4622      	movlt	r2, r4
 80060f2:	4614      	movlt	r4, r2
 80060f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060f8:	d005      	beq.n	8006106 <__cvt+0x42>
 80060fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060fe:	d100      	bne.n	8006102 <__cvt+0x3e>
 8006100:	3601      	adds	r6, #1
 8006102:	2102      	movs	r1, #2
 8006104:	e000      	b.n	8006108 <__cvt+0x44>
 8006106:	2103      	movs	r1, #3
 8006108:	ab03      	add	r3, sp, #12
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	ab02      	add	r3, sp, #8
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	ec45 4b10 	vmov	d0, r4, r5
 8006114:	4653      	mov	r3, sl
 8006116:	4632      	mov	r2, r6
 8006118:	f000 fcca 	bl	8006ab0 <_dtoa_r>
 800611c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006120:	4607      	mov	r7, r0
 8006122:	d102      	bne.n	800612a <__cvt+0x66>
 8006124:	f019 0f01 	tst.w	r9, #1
 8006128:	d022      	beq.n	8006170 <__cvt+0xac>
 800612a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800612e:	eb07 0906 	add.w	r9, r7, r6
 8006132:	d110      	bne.n	8006156 <__cvt+0x92>
 8006134:	783b      	ldrb	r3, [r7, #0]
 8006136:	2b30      	cmp	r3, #48	; 0x30
 8006138:	d10a      	bne.n	8006150 <__cvt+0x8c>
 800613a:	2200      	movs	r2, #0
 800613c:	2300      	movs	r3, #0
 800613e:	4620      	mov	r0, r4
 8006140:	4629      	mov	r1, r5
 8006142:	f7fa fcd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006146:	b918      	cbnz	r0, 8006150 <__cvt+0x8c>
 8006148:	f1c6 0601 	rsb	r6, r6, #1
 800614c:	f8ca 6000 	str.w	r6, [sl]
 8006150:	f8da 3000 	ldr.w	r3, [sl]
 8006154:	4499      	add	r9, r3
 8006156:	2200      	movs	r2, #0
 8006158:	2300      	movs	r3, #0
 800615a:	4620      	mov	r0, r4
 800615c:	4629      	mov	r1, r5
 800615e:	f7fa fcc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006162:	b108      	cbz	r0, 8006168 <__cvt+0xa4>
 8006164:	f8cd 900c 	str.w	r9, [sp, #12]
 8006168:	2230      	movs	r2, #48	; 0x30
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	454b      	cmp	r3, r9
 800616e:	d307      	bcc.n	8006180 <__cvt+0xbc>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006174:	1bdb      	subs	r3, r3, r7
 8006176:	4638      	mov	r0, r7
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	b004      	add	sp, #16
 800617c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	9103      	str	r1, [sp, #12]
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	e7f0      	b.n	800616a <__cvt+0xa6>

08006188 <__exponent>:
 8006188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800618a:	4603      	mov	r3, r0
 800618c:	2900      	cmp	r1, #0
 800618e:	bfb8      	it	lt
 8006190:	4249      	neglt	r1, r1
 8006192:	f803 2b02 	strb.w	r2, [r3], #2
 8006196:	bfb4      	ite	lt
 8006198:	222d      	movlt	r2, #45	; 0x2d
 800619a:	222b      	movge	r2, #43	; 0x2b
 800619c:	2909      	cmp	r1, #9
 800619e:	7042      	strb	r2, [r0, #1]
 80061a0:	dd2a      	ble.n	80061f8 <__exponent+0x70>
 80061a2:	f10d 0407 	add.w	r4, sp, #7
 80061a6:	46a4      	mov	ip, r4
 80061a8:	270a      	movs	r7, #10
 80061aa:	46a6      	mov	lr, r4
 80061ac:	460a      	mov	r2, r1
 80061ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80061b2:	fb07 1516 	mls	r5, r7, r6, r1
 80061b6:	3530      	adds	r5, #48	; 0x30
 80061b8:	2a63      	cmp	r2, #99	; 0x63
 80061ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80061be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061c2:	4631      	mov	r1, r6
 80061c4:	dcf1      	bgt.n	80061aa <__exponent+0x22>
 80061c6:	3130      	adds	r1, #48	; 0x30
 80061c8:	f1ae 0502 	sub.w	r5, lr, #2
 80061cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061d0:	1c44      	adds	r4, r0, #1
 80061d2:	4629      	mov	r1, r5
 80061d4:	4561      	cmp	r1, ip
 80061d6:	d30a      	bcc.n	80061ee <__exponent+0x66>
 80061d8:	f10d 0209 	add.w	r2, sp, #9
 80061dc:	eba2 020e 	sub.w	r2, r2, lr
 80061e0:	4565      	cmp	r5, ip
 80061e2:	bf88      	it	hi
 80061e4:	2200      	movhi	r2, #0
 80061e6:	4413      	add	r3, r2
 80061e8:	1a18      	subs	r0, r3, r0
 80061ea:	b003      	add	sp, #12
 80061ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061f6:	e7ed      	b.n	80061d4 <__exponent+0x4c>
 80061f8:	2330      	movs	r3, #48	; 0x30
 80061fa:	3130      	adds	r1, #48	; 0x30
 80061fc:	7083      	strb	r3, [r0, #2]
 80061fe:	70c1      	strb	r1, [r0, #3]
 8006200:	1d03      	adds	r3, r0, #4
 8006202:	e7f1      	b.n	80061e8 <__exponent+0x60>

08006204 <_printf_float>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	ed2d 8b02 	vpush	{d8}
 800620c:	b08d      	sub	sp, #52	; 0x34
 800620e:	460c      	mov	r4, r1
 8006210:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006214:	4616      	mov	r6, r2
 8006216:	461f      	mov	r7, r3
 8006218:	4605      	mov	r5, r0
 800621a:	f001 fa35 	bl	8007688 <_localeconv_r>
 800621e:	f8d0 a000 	ldr.w	sl, [r0]
 8006222:	4650      	mov	r0, sl
 8006224:	f7f9 ffde 	bl	80001e4 <strlen>
 8006228:	2300      	movs	r3, #0
 800622a:	930a      	str	r3, [sp, #40]	; 0x28
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	9305      	str	r3, [sp, #20]
 8006230:	f8d8 3000 	ldr.w	r3, [r8]
 8006234:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006238:	3307      	adds	r3, #7
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	f103 0208 	add.w	r2, r3, #8
 8006242:	f8c8 2000 	str.w	r2, [r8]
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800624e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006256:	9307      	str	r3, [sp, #28]
 8006258:	f8cd 8018 	str.w	r8, [sp, #24]
 800625c:	ee08 0a10 	vmov	s16, r0
 8006260:	4b9f      	ldr	r3, [pc, #636]	; (80064e0 <_printf_float+0x2dc>)
 8006262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	f7fa fc6f 	bl	8000b4c <__aeabi_dcmpun>
 800626e:	bb88      	cbnz	r0, 80062d4 <_printf_float+0xd0>
 8006270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006274:	4b9a      	ldr	r3, [pc, #616]	; (80064e0 <_printf_float+0x2dc>)
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	f7fa fc49 	bl	8000b10 <__aeabi_dcmple>
 800627e:	bb48      	cbnz	r0, 80062d4 <_printf_float+0xd0>
 8006280:	2200      	movs	r2, #0
 8006282:	2300      	movs	r3, #0
 8006284:	4640      	mov	r0, r8
 8006286:	4649      	mov	r1, r9
 8006288:	f7fa fc38 	bl	8000afc <__aeabi_dcmplt>
 800628c:	b110      	cbz	r0, 8006294 <_printf_float+0x90>
 800628e:	232d      	movs	r3, #45	; 0x2d
 8006290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006294:	4b93      	ldr	r3, [pc, #588]	; (80064e4 <_printf_float+0x2e0>)
 8006296:	4894      	ldr	r0, [pc, #592]	; (80064e8 <_printf_float+0x2e4>)
 8006298:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800629c:	bf94      	ite	ls
 800629e:	4698      	movls	r8, r3
 80062a0:	4680      	movhi	r8, r0
 80062a2:	2303      	movs	r3, #3
 80062a4:	6123      	str	r3, [r4, #16]
 80062a6:	9b05      	ldr	r3, [sp, #20]
 80062a8:	f023 0204 	bic.w	r2, r3, #4
 80062ac:	6022      	str	r2, [r4, #0]
 80062ae:	f04f 0900 	mov.w	r9, #0
 80062b2:	9700      	str	r7, [sp, #0]
 80062b4:	4633      	mov	r3, r6
 80062b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80062b8:	4621      	mov	r1, r4
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f9d8 	bl	8006670 <_printf_common>
 80062c0:	3001      	adds	r0, #1
 80062c2:	f040 8090 	bne.w	80063e6 <_printf_float+0x1e2>
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	b00d      	add	sp, #52	; 0x34
 80062cc:	ecbd 8b02 	vpop	{d8}
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	4640      	mov	r0, r8
 80062da:	4649      	mov	r1, r9
 80062dc:	f7fa fc36 	bl	8000b4c <__aeabi_dcmpun>
 80062e0:	b140      	cbz	r0, 80062f4 <_printf_float+0xf0>
 80062e2:	464b      	mov	r3, r9
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bfbc      	itt	lt
 80062e8:	232d      	movlt	r3, #45	; 0x2d
 80062ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062ee:	487f      	ldr	r0, [pc, #508]	; (80064ec <_printf_float+0x2e8>)
 80062f0:	4b7f      	ldr	r3, [pc, #508]	; (80064f0 <_printf_float+0x2ec>)
 80062f2:	e7d1      	b.n	8006298 <_printf_float+0x94>
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80062fa:	9206      	str	r2, [sp, #24]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	d13f      	bne.n	8006380 <_printf_float+0x17c>
 8006300:	2306      	movs	r3, #6
 8006302:	6063      	str	r3, [r4, #4]
 8006304:	9b05      	ldr	r3, [sp, #20]
 8006306:	6861      	ldr	r1, [r4, #4]
 8006308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800630c:	2300      	movs	r3, #0
 800630e:	9303      	str	r3, [sp, #12]
 8006310:	ab0a      	add	r3, sp, #40	; 0x28
 8006312:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006316:	ab09      	add	r3, sp, #36	; 0x24
 8006318:	ec49 8b10 	vmov	d0, r8, r9
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	6022      	str	r2, [r4, #0]
 8006320:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006324:	4628      	mov	r0, r5
 8006326:	f7ff fecd 	bl	80060c4 <__cvt>
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800632e:	2b47      	cmp	r3, #71	; 0x47
 8006330:	4680      	mov	r8, r0
 8006332:	d108      	bne.n	8006346 <_printf_float+0x142>
 8006334:	1cc8      	adds	r0, r1, #3
 8006336:	db02      	blt.n	800633e <_printf_float+0x13a>
 8006338:	6863      	ldr	r3, [r4, #4]
 800633a:	4299      	cmp	r1, r3
 800633c:	dd41      	ble.n	80063c2 <_printf_float+0x1be>
 800633e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006342:	fa5f fb8b 	uxtb.w	fp, fp
 8006346:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800634a:	d820      	bhi.n	800638e <_printf_float+0x18a>
 800634c:	3901      	subs	r1, #1
 800634e:	465a      	mov	r2, fp
 8006350:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006354:	9109      	str	r1, [sp, #36]	; 0x24
 8006356:	f7ff ff17 	bl	8006188 <__exponent>
 800635a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800635c:	1813      	adds	r3, r2, r0
 800635e:	2a01      	cmp	r2, #1
 8006360:	4681      	mov	r9, r0
 8006362:	6123      	str	r3, [r4, #16]
 8006364:	dc02      	bgt.n	800636c <_printf_float+0x168>
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	07d2      	lsls	r2, r2, #31
 800636a:	d501      	bpl.n	8006370 <_printf_float+0x16c>
 800636c:	3301      	adds	r3, #1
 800636e:	6123      	str	r3, [r4, #16]
 8006370:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006374:	2b00      	cmp	r3, #0
 8006376:	d09c      	beq.n	80062b2 <_printf_float+0xae>
 8006378:	232d      	movs	r3, #45	; 0x2d
 800637a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637e:	e798      	b.n	80062b2 <_printf_float+0xae>
 8006380:	9a06      	ldr	r2, [sp, #24]
 8006382:	2a47      	cmp	r2, #71	; 0x47
 8006384:	d1be      	bne.n	8006304 <_printf_float+0x100>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1bc      	bne.n	8006304 <_printf_float+0x100>
 800638a:	2301      	movs	r3, #1
 800638c:	e7b9      	b.n	8006302 <_printf_float+0xfe>
 800638e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006392:	d118      	bne.n	80063c6 <_printf_float+0x1c2>
 8006394:	2900      	cmp	r1, #0
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	dd0b      	ble.n	80063b2 <_printf_float+0x1ae>
 800639a:	6121      	str	r1, [r4, #16]
 800639c:	b913      	cbnz	r3, 80063a4 <_printf_float+0x1a0>
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	07d0      	lsls	r0, r2, #31
 80063a2:	d502      	bpl.n	80063aa <_printf_float+0x1a6>
 80063a4:	3301      	adds	r3, #1
 80063a6:	440b      	add	r3, r1
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80063ac:	f04f 0900 	mov.w	r9, #0
 80063b0:	e7de      	b.n	8006370 <_printf_float+0x16c>
 80063b2:	b913      	cbnz	r3, 80063ba <_printf_float+0x1b6>
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	07d2      	lsls	r2, r2, #31
 80063b8:	d501      	bpl.n	80063be <_printf_float+0x1ba>
 80063ba:	3302      	adds	r3, #2
 80063bc:	e7f4      	b.n	80063a8 <_printf_float+0x1a4>
 80063be:	2301      	movs	r3, #1
 80063c0:	e7f2      	b.n	80063a8 <_printf_float+0x1a4>
 80063c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80063c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c8:	4299      	cmp	r1, r3
 80063ca:	db05      	blt.n	80063d8 <_printf_float+0x1d4>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	6121      	str	r1, [r4, #16]
 80063d0:	07d8      	lsls	r0, r3, #31
 80063d2:	d5ea      	bpl.n	80063aa <_printf_float+0x1a6>
 80063d4:	1c4b      	adds	r3, r1, #1
 80063d6:	e7e7      	b.n	80063a8 <_printf_float+0x1a4>
 80063d8:	2900      	cmp	r1, #0
 80063da:	bfd4      	ite	le
 80063dc:	f1c1 0202 	rsble	r2, r1, #2
 80063e0:	2201      	movgt	r2, #1
 80063e2:	4413      	add	r3, r2
 80063e4:	e7e0      	b.n	80063a8 <_printf_float+0x1a4>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	055a      	lsls	r2, r3, #21
 80063ea:	d407      	bmi.n	80063fc <_printf_float+0x1f8>
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	4642      	mov	r2, r8
 80063f0:	4631      	mov	r1, r6
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b8      	blx	r7
 80063f6:	3001      	adds	r0, #1
 80063f8:	d12c      	bne.n	8006454 <_printf_float+0x250>
 80063fa:	e764      	b.n	80062c6 <_printf_float+0xc2>
 80063fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006400:	f240 80e0 	bls.w	80065c4 <_printf_float+0x3c0>
 8006404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006408:	2200      	movs	r2, #0
 800640a:	2300      	movs	r3, #0
 800640c:	f7fa fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006410:	2800      	cmp	r0, #0
 8006412:	d034      	beq.n	800647e <_printf_float+0x27a>
 8006414:	4a37      	ldr	r2, [pc, #220]	; (80064f4 <_printf_float+0x2f0>)
 8006416:	2301      	movs	r3, #1
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	f43f af51 	beq.w	80062c6 <_printf_float+0xc2>
 8006424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006428:	429a      	cmp	r2, r3
 800642a:	db02      	blt.n	8006432 <_printf_float+0x22e>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	07d8      	lsls	r0, r3, #31
 8006430:	d510      	bpl.n	8006454 <_printf_float+0x250>
 8006432:	ee18 3a10 	vmov	r3, s16
 8006436:	4652      	mov	r2, sl
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af41 	beq.w	80062c6 <_printf_float+0xc2>
 8006444:	f04f 0800 	mov.w	r8, #0
 8006448:	f104 091a 	add.w	r9, r4, #26
 800644c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800644e:	3b01      	subs	r3, #1
 8006450:	4543      	cmp	r3, r8
 8006452:	dc09      	bgt.n	8006468 <_printf_float+0x264>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	079b      	lsls	r3, r3, #30
 8006458:	f100 8105 	bmi.w	8006666 <_printf_float+0x462>
 800645c:	68e0      	ldr	r0, [r4, #12]
 800645e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006460:	4298      	cmp	r0, r3
 8006462:	bfb8      	it	lt
 8006464:	4618      	movlt	r0, r3
 8006466:	e730      	b.n	80062ca <_printf_float+0xc6>
 8006468:	2301      	movs	r3, #1
 800646a:	464a      	mov	r2, r9
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	f43f af27 	beq.w	80062c6 <_printf_float+0xc2>
 8006478:	f108 0801 	add.w	r8, r8, #1
 800647c:	e7e6      	b.n	800644c <_printf_float+0x248>
 800647e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	dc39      	bgt.n	80064f8 <_printf_float+0x2f4>
 8006484:	4a1b      	ldr	r2, [pc, #108]	; (80064f4 <_printf_float+0x2f0>)
 8006486:	2301      	movs	r3, #1
 8006488:	4631      	mov	r1, r6
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	f43f af19 	beq.w	80062c6 <_printf_float+0xc2>
 8006494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006498:	4313      	orrs	r3, r2
 800649a:	d102      	bne.n	80064a2 <_printf_float+0x29e>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	07d9      	lsls	r1, r3, #31
 80064a0:	d5d8      	bpl.n	8006454 <_printf_float+0x250>
 80064a2:	ee18 3a10 	vmov	r3, s16
 80064a6:	4652      	mov	r2, sl
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f af09 	beq.w	80062c6 <_printf_float+0xc2>
 80064b4:	f04f 0900 	mov.w	r9, #0
 80064b8:	f104 0a1a 	add.w	sl, r4, #26
 80064bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064be:	425b      	negs	r3, r3
 80064c0:	454b      	cmp	r3, r9
 80064c2:	dc01      	bgt.n	80064c8 <_printf_float+0x2c4>
 80064c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c6:	e792      	b.n	80063ee <_printf_float+0x1ea>
 80064c8:	2301      	movs	r3, #1
 80064ca:	4652      	mov	r2, sl
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b8      	blx	r7
 80064d2:	3001      	adds	r0, #1
 80064d4:	f43f aef7 	beq.w	80062c6 <_printf_float+0xc2>
 80064d8:	f109 0901 	add.w	r9, r9, #1
 80064dc:	e7ee      	b.n	80064bc <_printf_float+0x2b8>
 80064de:	bf00      	nop
 80064e0:	7fefffff 	.word	0x7fefffff
 80064e4:	08008b28 	.word	0x08008b28
 80064e8:	08008b2c 	.word	0x08008b2c
 80064ec:	08008b34 	.word	0x08008b34
 80064f0:	08008b30 	.word	0x08008b30
 80064f4:	08008b38 	.word	0x08008b38
 80064f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064fc:	429a      	cmp	r2, r3
 80064fe:	bfa8      	it	ge
 8006500:	461a      	movge	r2, r3
 8006502:	2a00      	cmp	r2, #0
 8006504:	4691      	mov	r9, r2
 8006506:	dc37      	bgt.n	8006578 <_printf_float+0x374>
 8006508:	f04f 0b00 	mov.w	fp, #0
 800650c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006510:	f104 021a 	add.w	r2, r4, #26
 8006514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006516:	9305      	str	r3, [sp, #20]
 8006518:	eba3 0309 	sub.w	r3, r3, r9
 800651c:	455b      	cmp	r3, fp
 800651e:	dc33      	bgt.n	8006588 <_printf_float+0x384>
 8006520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006524:	429a      	cmp	r2, r3
 8006526:	db3b      	blt.n	80065a0 <_printf_float+0x39c>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07da      	lsls	r2, r3, #31
 800652c:	d438      	bmi.n	80065a0 <_printf_float+0x39c>
 800652e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006530:	9b05      	ldr	r3, [sp, #20]
 8006532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	eba2 0901 	sub.w	r9, r2, r1
 800653a:	4599      	cmp	r9, r3
 800653c:	bfa8      	it	ge
 800653e:	4699      	movge	r9, r3
 8006540:	f1b9 0f00 	cmp.w	r9, #0
 8006544:	dc35      	bgt.n	80065b2 <_printf_float+0x3ae>
 8006546:	f04f 0800 	mov.w	r8, #0
 800654a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654e:	f104 0a1a 	add.w	sl, r4, #26
 8006552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	eba3 0309 	sub.w	r3, r3, r9
 800655c:	4543      	cmp	r3, r8
 800655e:	f77f af79 	ble.w	8006454 <_printf_float+0x250>
 8006562:	2301      	movs	r3, #1
 8006564:	4652      	mov	r2, sl
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f aeaa 	beq.w	80062c6 <_printf_float+0xc2>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	e7ec      	b.n	8006552 <_printf_float+0x34e>
 8006578:	4613      	mov	r3, r2
 800657a:	4631      	mov	r1, r6
 800657c:	4642      	mov	r2, r8
 800657e:	4628      	mov	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	d1c0      	bne.n	8006508 <_printf_float+0x304>
 8006586:	e69e      	b.n	80062c6 <_printf_float+0xc2>
 8006588:	2301      	movs	r3, #1
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	9205      	str	r2, [sp, #20]
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	f43f ae97 	beq.w	80062c6 <_printf_float+0xc2>
 8006598:	9a05      	ldr	r2, [sp, #20]
 800659a:	f10b 0b01 	add.w	fp, fp, #1
 800659e:	e7b9      	b.n	8006514 <_printf_float+0x310>
 80065a0:	ee18 3a10 	vmov	r3, s16
 80065a4:	4652      	mov	r2, sl
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	d1be      	bne.n	800652e <_printf_float+0x32a>
 80065b0:	e689      	b.n	80062c6 <_printf_float+0xc2>
 80065b2:	9a05      	ldr	r2, [sp, #20]
 80065b4:	464b      	mov	r3, r9
 80065b6:	4442      	add	r2, r8
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	d1c1      	bne.n	8006546 <_printf_float+0x342>
 80065c2:	e680      	b.n	80062c6 <_printf_float+0xc2>
 80065c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c6:	2a01      	cmp	r2, #1
 80065c8:	dc01      	bgt.n	80065ce <_printf_float+0x3ca>
 80065ca:	07db      	lsls	r3, r3, #31
 80065cc:	d538      	bpl.n	8006640 <_printf_float+0x43c>
 80065ce:	2301      	movs	r3, #1
 80065d0:	4642      	mov	r2, r8
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae74 	beq.w	80062c6 <_printf_float+0xc2>
 80065de:	ee18 3a10 	vmov	r3, s16
 80065e2:	4652      	mov	r2, sl
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f ae6b 	beq.w	80062c6 <_printf_float+0xc2>
 80065f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	f7fa fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 80065fc:	b9d8      	cbnz	r0, 8006636 <_printf_float+0x432>
 80065fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006600:	f108 0201 	add.w	r2, r8, #1
 8006604:	3b01      	subs	r3, #1
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	d10e      	bne.n	800662e <_printf_float+0x42a>
 8006610:	e659      	b.n	80062c6 <_printf_float+0xc2>
 8006612:	2301      	movs	r3, #1
 8006614:	4652      	mov	r2, sl
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	f43f ae52 	beq.w	80062c6 <_printf_float+0xc2>
 8006622:	f108 0801 	add.w	r8, r8, #1
 8006626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006628:	3b01      	subs	r3, #1
 800662a:	4543      	cmp	r3, r8
 800662c:	dcf1      	bgt.n	8006612 <_printf_float+0x40e>
 800662e:	464b      	mov	r3, r9
 8006630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006634:	e6dc      	b.n	80063f0 <_printf_float+0x1ec>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	f104 0a1a 	add.w	sl, r4, #26
 800663e:	e7f2      	b.n	8006626 <_printf_float+0x422>
 8006640:	2301      	movs	r3, #1
 8006642:	4642      	mov	r2, r8
 8006644:	e7df      	b.n	8006606 <_printf_float+0x402>
 8006646:	2301      	movs	r3, #1
 8006648:	464a      	mov	r2, r9
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f ae38 	beq.w	80062c6 <_printf_float+0xc2>
 8006656:	f108 0801 	add.w	r8, r8, #1
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	4543      	cmp	r3, r8
 8006662:	dcf0      	bgt.n	8006646 <_printf_float+0x442>
 8006664:	e6fa      	b.n	800645c <_printf_float+0x258>
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	f104 0919 	add.w	r9, r4, #25
 800666e:	e7f4      	b.n	800665a <_printf_float+0x456>

08006670 <_printf_common>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	4616      	mov	r6, r2
 8006676:	4699      	mov	r9, r3
 8006678:	688a      	ldr	r2, [r1, #8]
 800667a:	690b      	ldr	r3, [r1, #16]
 800667c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006680:	4293      	cmp	r3, r2
 8006682:	bfb8      	it	lt
 8006684:	4613      	movlt	r3, r2
 8006686:	6033      	str	r3, [r6, #0]
 8006688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800668c:	4607      	mov	r7, r0
 800668e:	460c      	mov	r4, r1
 8006690:	b10a      	cbz	r2, 8006696 <_printf_common+0x26>
 8006692:	3301      	adds	r3, #1
 8006694:	6033      	str	r3, [r6, #0]
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	0699      	lsls	r1, r3, #26
 800669a:	bf42      	ittt	mi
 800669c:	6833      	ldrmi	r3, [r6, #0]
 800669e:	3302      	addmi	r3, #2
 80066a0:	6033      	strmi	r3, [r6, #0]
 80066a2:	6825      	ldr	r5, [r4, #0]
 80066a4:	f015 0506 	ands.w	r5, r5, #6
 80066a8:	d106      	bne.n	80066b8 <_printf_common+0x48>
 80066aa:	f104 0a19 	add.w	sl, r4, #25
 80066ae:	68e3      	ldr	r3, [r4, #12]
 80066b0:	6832      	ldr	r2, [r6, #0]
 80066b2:	1a9b      	subs	r3, r3, r2
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	dc26      	bgt.n	8006706 <_printf_common+0x96>
 80066b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066bc:	1e13      	subs	r3, r2, #0
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	bf18      	it	ne
 80066c2:	2301      	movne	r3, #1
 80066c4:	0692      	lsls	r2, r2, #26
 80066c6:	d42b      	bmi.n	8006720 <_printf_common+0xb0>
 80066c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066cc:	4649      	mov	r1, r9
 80066ce:	4638      	mov	r0, r7
 80066d0:	47c0      	blx	r8
 80066d2:	3001      	adds	r0, #1
 80066d4:	d01e      	beq.n	8006714 <_printf_common+0xa4>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	68e5      	ldr	r5, [r4, #12]
 80066da:	6832      	ldr	r2, [r6, #0]
 80066dc:	f003 0306 	and.w	r3, r3, #6
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	bf08      	it	eq
 80066e4:	1aad      	subeq	r5, r5, r2
 80066e6:	68a3      	ldr	r3, [r4, #8]
 80066e8:	6922      	ldr	r2, [r4, #16]
 80066ea:	bf0c      	ite	eq
 80066ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f0:	2500      	movne	r5, #0
 80066f2:	4293      	cmp	r3, r2
 80066f4:	bfc4      	itt	gt
 80066f6:	1a9b      	subgt	r3, r3, r2
 80066f8:	18ed      	addgt	r5, r5, r3
 80066fa:	2600      	movs	r6, #0
 80066fc:	341a      	adds	r4, #26
 80066fe:	42b5      	cmp	r5, r6
 8006700:	d11a      	bne.n	8006738 <_printf_common+0xc8>
 8006702:	2000      	movs	r0, #0
 8006704:	e008      	b.n	8006718 <_printf_common+0xa8>
 8006706:	2301      	movs	r3, #1
 8006708:	4652      	mov	r2, sl
 800670a:	4649      	mov	r1, r9
 800670c:	4638      	mov	r0, r7
 800670e:	47c0      	blx	r8
 8006710:	3001      	adds	r0, #1
 8006712:	d103      	bne.n	800671c <_printf_common+0xac>
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671c:	3501      	adds	r5, #1
 800671e:	e7c6      	b.n	80066ae <_printf_common+0x3e>
 8006720:	18e1      	adds	r1, r4, r3
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	2030      	movs	r0, #48	; 0x30
 8006726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800672a:	4422      	add	r2, r4
 800672c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006734:	3302      	adds	r3, #2
 8006736:	e7c7      	b.n	80066c8 <_printf_common+0x58>
 8006738:	2301      	movs	r3, #1
 800673a:	4622      	mov	r2, r4
 800673c:	4649      	mov	r1, r9
 800673e:	4638      	mov	r0, r7
 8006740:	47c0      	blx	r8
 8006742:	3001      	adds	r0, #1
 8006744:	d0e6      	beq.n	8006714 <_printf_common+0xa4>
 8006746:	3601      	adds	r6, #1
 8006748:	e7d9      	b.n	80066fe <_printf_common+0x8e>
	...

0800674c <_printf_i>:
 800674c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	460c      	mov	r4, r1
 8006752:	4691      	mov	r9, r2
 8006754:	7e27      	ldrb	r7, [r4, #24]
 8006756:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006758:	2f78      	cmp	r7, #120	; 0x78
 800675a:	4680      	mov	r8, r0
 800675c:	469a      	mov	sl, r3
 800675e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006762:	d807      	bhi.n	8006774 <_printf_i+0x28>
 8006764:	2f62      	cmp	r7, #98	; 0x62
 8006766:	d80a      	bhi.n	800677e <_printf_i+0x32>
 8006768:	2f00      	cmp	r7, #0
 800676a:	f000 80d8 	beq.w	800691e <_printf_i+0x1d2>
 800676e:	2f58      	cmp	r7, #88	; 0x58
 8006770:	f000 80a3 	beq.w	80068ba <_printf_i+0x16e>
 8006774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800677c:	e03a      	b.n	80067f4 <_printf_i+0xa8>
 800677e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006782:	2b15      	cmp	r3, #21
 8006784:	d8f6      	bhi.n	8006774 <_printf_i+0x28>
 8006786:	a001      	add	r0, pc, #4	; (adr r0, 800678c <_printf_i+0x40>)
 8006788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800678c:	080067e5 	.word	0x080067e5
 8006790:	080067f9 	.word	0x080067f9
 8006794:	08006775 	.word	0x08006775
 8006798:	08006775 	.word	0x08006775
 800679c:	08006775 	.word	0x08006775
 80067a0:	08006775 	.word	0x08006775
 80067a4:	080067f9 	.word	0x080067f9
 80067a8:	08006775 	.word	0x08006775
 80067ac:	08006775 	.word	0x08006775
 80067b0:	08006775 	.word	0x08006775
 80067b4:	08006775 	.word	0x08006775
 80067b8:	08006905 	.word	0x08006905
 80067bc:	08006829 	.word	0x08006829
 80067c0:	080068e7 	.word	0x080068e7
 80067c4:	08006775 	.word	0x08006775
 80067c8:	08006775 	.word	0x08006775
 80067cc:	08006927 	.word	0x08006927
 80067d0:	08006775 	.word	0x08006775
 80067d4:	08006829 	.word	0x08006829
 80067d8:	08006775 	.word	0x08006775
 80067dc:	08006775 	.word	0x08006775
 80067e0:	080068ef 	.word	0x080068ef
 80067e4:	680b      	ldr	r3, [r1, #0]
 80067e6:	1d1a      	adds	r2, r3, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	600a      	str	r2, [r1, #0]
 80067ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0a3      	b.n	8006940 <_printf_i+0x1f4>
 80067f8:	6825      	ldr	r5, [r4, #0]
 80067fa:	6808      	ldr	r0, [r1, #0]
 80067fc:	062e      	lsls	r6, r5, #24
 80067fe:	f100 0304 	add.w	r3, r0, #4
 8006802:	d50a      	bpl.n	800681a <_printf_i+0xce>
 8006804:	6805      	ldr	r5, [r0, #0]
 8006806:	600b      	str	r3, [r1, #0]
 8006808:	2d00      	cmp	r5, #0
 800680a:	da03      	bge.n	8006814 <_printf_i+0xc8>
 800680c:	232d      	movs	r3, #45	; 0x2d
 800680e:	426d      	negs	r5, r5
 8006810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006814:	485e      	ldr	r0, [pc, #376]	; (8006990 <_printf_i+0x244>)
 8006816:	230a      	movs	r3, #10
 8006818:	e019      	b.n	800684e <_printf_i+0x102>
 800681a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800681e:	6805      	ldr	r5, [r0, #0]
 8006820:	600b      	str	r3, [r1, #0]
 8006822:	bf18      	it	ne
 8006824:	b22d      	sxthne	r5, r5
 8006826:	e7ef      	b.n	8006808 <_printf_i+0xbc>
 8006828:	680b      	ldr	r3, [r1, #0]
 800682a:	6825      	ldr	r5, [r4, #0]
 800682c:	1d18      	adds	r0, r3, #4
 800682e:	6008      	str	r0, [r1, #0]
 8006830:	0628      	lsls	r0, r5, #24
 8006832:	d501      	bpl.n	8006838 <_printf_i+0xec>
 8006834:	681d      	ldr	r5, [r3, #0]
 8006836:	e002      	b.n	800683e <_printf_i+0xf2>
 8006838:	0669      	lsls	r1, r5, #25
 800683a:	d5fb      	bpl.n	8006834 <_printf_i+0xe8>
 800683c:	881d      	ldrh	r5, [r3, #0]
 800683e:	4854      	ldr	r0, [pc, #336]	; (8006990 <_printf_i+0x244>)
 8006840:	2f6f      	cmp	r7, #111	; 0x6f
 8006842:	bf0c      	ite	eq
 8006844:	2308      	moveq	r3, #8
 8006846:	230a      	movne	r3, #10
 8006848:	2100      	movs	r1, #0
 800684a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800684e:	6866      	ldr	r6, [r4, #4]
 8006850:	60a6      	str	r6, [r4, #8]
 8006852:	2e00      	cmp	r6, #0
 8006854:	bfa2      	ittt	ge
 8006856:	6821      	ldrge	r1, [r4, #0]
 8006858:	f021 0104 	bicge.w	r1, r1, #4
 800685c:	6021      	strge	r1, [r4, #0]
 800685e:	b90d      	cbnz	r5, 8006864 <_printf_i+0x118>
 8006860:	2e00      	cmp	r6, #0
 8006862:	d04d      	beq.n	8006900 <_printf_i+0x1b4>
 8006864:	4616      	mov	r6, r2
 8006866:	fbb5 f1f3 	udiv	r1, r5, r3
 800686a:	fb03 5711 	mls	r7, r3, r1, r5
 800686e:	5dc7      	ldrb	r7, [r0, r7]
 8006870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006874:	462f      	mov	r7, r5
 8006876:	42bb      	cmp	r3, r7
 8006878:	460d      	mov	r5, r1
 800687a:	d9f4      	bls.n	8006866 <_printf_i+0x11a>
 800687c:	2b08      	cmp	r3, #8
 800687e:	d10b      	bne.n	8006898 <_printf_i+0x14c>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	07df      	lsls	r7, r3, #31
 8006884:	d508      	bpl.n	8006898 <_printf_i+0x14c>
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	6861      	ldr	r1, [r4, #4]
 800688a:	4299      	cmp	r1, r3
 800688c:	bfde      	ittt	le
 800688e:	2330      	movle	r3, #48	; 0x30
 8006890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006898:	1b92      	subs	r2, r2, r6
 800689a:	6122      	str	r2, [r4, #16]
 800689c:	f8cd a000 	str.w	sl, [sp]
 80068a0:	464b      	mov	r3, r9
 80068a2:	aa03      	add	r2, sp, #12
 80068a4:	4621      	mov	r1, r4
 80068a6:	4640      	mov	r0, r8
 80068a8:	f7ff fee2 	bl	8006670 <_printf_common>
 80068ac:	3001      	adds	r0, #1
 80068ae:	d14c      	bne.n	800694a <_printf_i+0x1fe>
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	b004      	add	sp, #16
 80068b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ba:	4835      	ldr	r0, [pc, #212]	; (8006990 <_printf_i+0x244>)
 80068bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	680e      	ldr	r6, [r1, #0]
 80068c4:	061f      	lsls	r7, r3, #24
 80068c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80068ca:	600e      	str	r6, [r1, #0]
 80068cc:	d514      	bpl.n	80068f8 <_printf_i+0x1ac>
 80068ce:	07d9      	lsls	r1, r3, #31
 80068d0:	bf44      	itt	mi
 80068d2:	f043 0320 	orrmi.w	r3, r3, #32
 80068d6:	6023      	strmi	r3, [r4, #0]
 80068d8:	b91d      	cbnz	r5, 80068e2 <_printf_i+0x196>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	f023 0320 	bic.w	r3, r3, #32
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	2310      	movs	r3, #16
 80068e4:	e7b0      	b.n	8006848 <_printf_i+0xfc>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	f043 0320 	orr.w	r3, r3, #32
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	2378      	movs	r3, #120	; 0x78
 80068f0:	4828      	ldr	r0, [pc, #160]	; (8006994 <_printf_i+0x248>)
 80068f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068f6:	e7e3      	b.n	80068c0 <_printf_i+0x174>
 80068f8:	065e      	lsls	r6, r3, #25
 80068fa:	bf48      	it	mi
 80068fc:	b2ad      	uxthmi	r5, r5
 80068fe:	e7e6      	b.n	80068ce <_printf_i+0x182>
 8006900:	4616      	mov	r6, r2
 8006902:	e7bb      	b.n	800687c <_printf_i+0x130>
 8006904:	680b      	ldr	r3, [r1, #0]
 8006906:	6826      	ldr	r6, [r4, #0]
 8006908:	6960      	ldr	r0, [r4, #20]
 800690a:	1d1d      	adds	r5, r3, #4
 800690c:	600d      	str	r5, [r1, #0]
 800690e:	0635      	lsls	r5, r6, #24
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	d501      	bpl.n	8006918 <_printf_i+0x1cc>
 8006914:	6018      	str	r0, [r3, #0]
 8006916:	e002      	b.n	800691e <_printf_i+0x1d2>
 8006918:	0671      	lsls	r1, r6, #25
 800691a:	d5fb      	bpl.n	8006914 <_printf_i+0x1c8>
 800691c:	8018      	strh	r0, [r3, #0]
 800691e:	2300      	movs	r3, #0
 8006920:	6123      	str	r3, [r4, #16]
 8006922:	4616      	mov	r6, r2
 8006924:	e7ba      	b.n	800689c <_printf_i+0x150>
 8006926:	680b      	ldr	r3, [r1, #0]
 8006928:	1d1a      	adds	r2, r3, #4
 800692a:	600a      	str	r2, [r1, #0]
 800692c:	681e      	ldr	r6, [r3, #0]
 800692e:	6862      	ldr	r2, [r4, #4]
 8006930:	2100      	movs	r1, #0
 8006932:	4630      	mov	r0, r6
 8006934:	f7f9 fc64 	bl	8000200 <memchr>
 8006938:	b108      	cbz	r0, 800693e <_printf_i+0x1f2>
 800693a:	1b80      	subs	r0, r0, r6
 800693c:	6060      	str	r0, [r4, #4]
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	6123      	str	r3, [r4, #16]
 8006942:	2300      	movs	r3, #0
 8006944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006948:	e7a8      	b.n	800689c <_printf_i+0x150>
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	4632      	mov	r2, r6
 800694e:	4649      	mov	r1, r9
 8006950:	4640      	mov	r0, r8
 8006952:	47d0      	blx	sl
 8006954:	3001      	adds	r0, #1
 8006956:	d0ab      	beq.n	80068b0 <_printf_i+0x164>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	079b      	lsls	r3, r3, #30
 800695c:	d413      	bmi.n	8006986 <_printf_i+0x23a>
 800695e:	68e0      	ldr	r0, [r4, #12]
 8006960:	9b03      	ldr	r3, [sp, #12]
 8006962:	4298      	cmp	r0, r3
 8006964:	bfb8      	it	lt
 8006966:	4618      	movlt	r0, r3
 8006968:	e7a4      	b.n	80068b4 <_printf_i+0x168>
 800696a:	2301      	movs	r3, #1
 800696c:	4632      	mov	r2, r6
 800696e:	4649      	mov	r1, r9
 8006970:	4640      	mov	r0, r8
 8006972:	47d0      	blx	sl
 8006974:	3001      	adds	r0, #1
 8006976:	d09b      	beq.n	80068b0 <_printf_i+0x164>
 8006978:	3501      	adds	r5, #1
 800697a:	68e3      	ldr	r3, [r4, #12]
 800697c:	9903      	ldr	r1, [sp, #12]
 800697e:	1a5b      	subs	r3, r3, r1
 8006980:	42ab      	cmp	r3, r5
 8006982:	dcf2      	bgt.n	800696a <_printf_i+0x21e>
 8006984:	e7eb      	b.n	800695e <_printf_i+0x212>
 8006986:	2500      	movs	r5, #0
 8006988:	f104 0619 	add.w	r6, r4, #25
 800698c:	e7f5      	b.n	800697a <_printf_i+0x22e>
 800698e:	bf00      	nop
 8006990:	08008b3a 	.word	0x08008b3a
 8006994:	08008b4b 	.word	0x08008b4b

08006998 <quorem>:
 8006998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	6903      	ldr	r3, [r0, #16]
 800699e:	690c      	ldr	r4, [r1, #16]
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	4607      	mov	r7, r0
 80069a4:	f2c0 8081 	blt.w	8006aaa <quorem+0x112>
 80069a8:	3c01      	subs	r4, #1
 80069aa:	f101 0814 	add.w	r8, r1, #20
 80069ae:	f100 0514 	add.w	r5, r0, #20
 80069b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069c0:	3301      	adds	r3, #1
 80069c2:	429a      	cmp	r2, r3
 80069c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80069d0:	d331      	bcc.n	8006a36 <quorem+0x9e>
 80069d2:	f04f 0e00 	mov.w	lr, #0
 80069d6:	4640      	mov	r0, r8
 80069d8:	46ac      	mov	ip, r5
 80069da:	46f2      	mov	sl, lr
 80069dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80069e0:	b293      	uxth	r3, r2
 80069e2:	fb06 e303 	mla	r3, r6, r3, lr
 80069e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ebaa 0303 	sub.w	r3, sl, r3
 80069f0:	0c12      	lsrs	r2, r2, #16
 80069f2:	f8dc a000 	ldr.w	sl, [ip]
 80069f6:	fb06 e202 	mla	r2, r6, r2, lr
 80069fa:	fa13 f38a 	uxtah	r3, r3, sl
 80069fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a02:	fa1f fa82 	uxth.w	sl, r2
 8006a06:	f8dc 2000 	ldr.w	r2, [ip]
 8006a0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006a0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a18:	4581      	cmp	r9, r0
 8006a1a:	f84c 3b04 	str.w	r3, [ip], #4
 8006a1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a22:	d2db      	bcs.n	80069dc <quorem+0x44>
 8006a24:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a28:	b92b      	cbnz	r3, 8006a36 <quorem+0x9e>
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	429d      	cmp	r5, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	d32e      	bcc.n	8006a92 <quorem+0xfa>
 8006a34:	613c      	str	r4, [r7, #16]
 8006a36:	4638      	mov	r0, r7
 8006a38:	f001 f8be 	bl	8007bb8 <__mcmp>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	db24      	blt.n	8006a8a <quorem+0xf2>
 8006a40:	3601      	adds	r6, #1
 8006a42:	4628      	mov	r0, r5
 8006a44:	f04f 0c00 	mov.w	ip, #0
 8006a48:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a4c:	f8d0 e000 	ldr.w	lr, [r0]
 8006a50:	b293      	uxth	r3, r2
 8006a52:	ebac 0303 	sub.w	r3, ip, r3
 8006a56:	0c12      	lsrs	r2, r2, #16
 8006a58:	fa13 f38e 	uxtah	r3, r3, lr
 8006a5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a6a:	45c1      	cmp	r9, r8
 8006a6c:	f840 3b04 	str.w	r3, [r0], #4
 8006a70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a74:	d2e8      	bcs.n	8006a48 <quorem+0xb0>
 8006a76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a7e:	b922      	cbnz	r2, 8006a8a <quorem+0xf2>
 8006a80:	3b04      	subs	r3, #4
 8006a82:	429d      	cmp	r5, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	d30a      	bcc.n	8006a9e <quorem+0x106>
 8006a88:	613c      	str	r4, [r7, #16]
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	b003      	add	sp, #12
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	3b04      	subs	r3, #4
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	d1cc      	bne.n	8006a34 <quorem+0x9c>
 8006a9a:	3c01      	subs	r4, #1
 8006a9c:	e7c7      	b.n	8006a2e <quorem+0x96>
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	3b04      	subs	r3, #4
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	d1f0      	bne.n	8006a88 <quorem+0xf0>
 8006aa6:	3c01      	subs	r4, #1
 8006aa8:	e7eb      	b.n	8006a82 <quorem+0xea>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e7ee      	b.n	8006a8c <quorem+0xf4>
	...

08006ab0 <_dtoa_r>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	ed2d 8b02 	vpush	{d8}
 8006ab8:	ec57 6b10 	vmov	r6, r7, d0
 8006abc:	b095      	sub	sp, #84	; 0x54
 8006abe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ac0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ac4:	9105      	str	r1, [sp, #20]
 8006ac6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006aca:	4604      	mov	r4, r0
 8006acc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ad0:	b975      	cbnz	r5, 8006af0 <_dtoa_r+0x40>
 8006ad2:	2010      	movs	r0, #16
 8006ad4:	f000 fddc 	bl	8007690 <malloc>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	6260      	str	r0, [r4, #36]	; 0x24
 8006adc:	b920      	cbnz	r0, 8006ae8 <_dtoa_r+0x38>
 8006ade:	4bb2      	ldr	r3, [pc, #712]	; (8006da8 <_dtoa_r+0x2f8>)
 8006ae0:	21ea      	movs	r1, #234	; 0xea
 8006ae2:	48b2      	ldr	r0, [pc, #712]	; (8006dac <_dtoa_r+0x2fc>)
 8006ae4:	f001 fa32 	bl	8007f4c <__assert_func>
 8006ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006aec:	6005      	str	r5, [r0, #0]
 8006aee:	60c5      	str	r5, [r0, #12]
 8006af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	b151      	cbz	r1, 8006b0c <_dtoa_r+0x5c>
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	604a      	str	r2, [r1, #4]
 8006afa:	2301      	movs	r3, #1
 8006afc:	4093      	lsls	r3, r2
 8006afe:	608b      	str	r3, [r1, #8]
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fe1b 	bl	800773c <_Bfree>
 8006b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	1e3b      	subs	r3, r7, #0
 8006b0e:	bfb9      	ittee	lt
 8006b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	9303      	strlt	r3, [sp, #12]
 8006b16:	2300      	movge	r3, #0
 8006b18:	f8c8 3000 	strge.w	r3, [r8]
 8006b1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006b20:	4ba3      	ldr	r3, [pc, #652]	; (8006db0 <_dtoa_r+0x300>)
 8006b22:	bfbc      	itt	lt
 8006b24:	2201      	movlt	r2, #1
 8006b26:	f8c8 2000 	strlt.w	r2, [r8]
 8006b2a:	ea33 0309 	bics.w	r3, r3, r9
 8006b2e:	d11b      	bne.n	8006b68 <_dtoa_r+0xb8>
 8006b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b32:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b3c:	4333      	orrs	r3, r6
 8006b3e:	f000 857a 	beq.w	8007636 <_dtoa_r+0xb86>
 8006b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b44:	b963      	cbnz	r3, 8006b60 <_dtoa_r+0xb0>
 8006b46:	4b9b      	ldr	r3, [pc, #620]	; (8006db4 <_dtoa_r+0x304>)
 8006b48:	e024      	b.n	8006b94 <_dtoa_r+0xe4>
 8006b4a:	4b9b      	ldr	r3, [pc, #620]	; (8006db8 <_dtoa_r+0x308>)
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	9800      	ldr	r0, [sp, #0]
 8006b56:	b015      	add	sp, #84	; 0x54
 8006b58:	ecbd 8b02 	vpop	{d8}
 8006b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	4b94      	ldr	r3, [pc, #592]	; (8006db4 <_dtoa_r+0x304>)
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	3303      	adds	r3, #3
 8006b66:	e7f3      	b.n	8006b50 <_dtoa_r+0xa0>
 8006b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	ec51 0b17 	vmov	r0, r1, d7
 8006b72:	2300      	movs	r3, #0
 8006b74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006b78:	f7f9 ffb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	b158      	cbz	r0, 8006b98 <_dtoa_r+0xe8>
 8006b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b82:	2301      	movs	r3, #1
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8551 	beq.w	8007630 <_dtoa_r+0xb80>
 8006b8e:	488b      	ldr	r0, [pc, #556]	; (8006dbc <_dtoa_r+0x30c>)
 8006b90:	6018      	str	r0, [r3, #0]
 8006b92:	1e43      	subs	r3, r0, #1
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	e7dd      	b.n	8006b54 <_dtoa_r+0xa4>
 8006b98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006b9c:	aa12      	add	r2, sp, #72	; 0x48
 8006b9e:	a913      	add	r1, sp, #76	; 0x4c
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f001 f8ad 	bl	8007d00 <__d2b>
 8006ba6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006baa:	4683      	mov	fp, r0
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	d07c      	beq.n	8006caa <_dtoa_r+0x1fa>
 8006bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006bbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bca:	4b7d      	ldr	r3, [pc, #500]	; (8006dc0 <_dtoa_r+0x310>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fb69 	bl	80002a8 <__aeabi_dsub>
 8006bd6:	a36e      	add	r3, pc, #440	; (adr r3, 8006d90 <_dtoa_r+0x2e0>)
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f7f9 fd1c 	bl	8000618 <__aeabi_dmul>
 8006be0:	a36d      	add	r3, pc, #436	; (adr r3, 8006d98 <_dtoa_r+0x2e8>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fb61 	bl	80002ac <__adddf3>
 8006bea:	4606      	mov	r6, r0
 8006bec:	4628      	mov	r0, r5
 8006bee:	460f      	mov	r7, r1
 8006bf0:	f7f9 fca8 	bl	8000544 <__aeabi_i2d>
 8006bf4:	a36a      	add	r3, pc, #424	; (adr r3, 8006da0 <_dtoa_r+0x2f0>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fd0d 	bl	8000618 <__aeabi_dmul>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4630      	mov	r0, r6
 8006c04:	4639      	mov	r1, r7
 8006c06:	f7f9 fb51 	bl	80002ac <__adddf3>
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	f7f9 ffb3 	bl	8000b78 <__aeabi_d2iz>
 8006c12:	2200      	movs	r2, #0
 8006c14:	4682      	mov	sl, r0
 8006c16:	2300      	movs	r3, #0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 ff6e 	bl	8000afc <__aeabi_dcmplt>
 8006c20:	b148      	cbz	r0, 8006c36 <_dtoa_r+0x186>
 8006c22:	4650      	mov	r0, sl
 8006c24:	f7f9 fc8e 	bl	8000544 <__aeabi_i2d>
 8006c28:	4632      	mov	r2, r6
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	f7f9 ff5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c30:	b908      	cbnz	r0, 8006c36 <_dtoa_r+0x186>
 8006c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c36:	f1ba 0f16 	cmp.w	sl, #22
 8006c3a:	d854      	bhi.n	8006ce6 <_dtoa_r+0x236>
 8006c3c:	4b61      	ldr	r3, [pc, #388]	; (8006dc4 <_dtoa_r+0x314>)
 8006c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c4a:	f7f9 ff57 	bl	8000afc <__aeabi_dcmplt>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d04b      	beq.n	8006cea <_dtoa_r+0x23a>
 8006c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c56:	2300      	movs	r3, #0
 8006c58:	930e      	str	r3, [sp, #56]	; 0x38
 8006c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c5c:	1b5d      	subs	r5, r3, r5
 8006c5e:	1e6b      	subs	r3, r5, #1
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	bf43      	ittte	mi
 8006c64:	2300      	movmi	r3, #0
 8006c66:	f1c5 0801 	rsbmi	r8, r5, #1
 8006c6a:	9304      	strmi	r3, [sp, #16]
 8006c6c:	f04f 0800 	movpl.w	r8, #0
 8006c70:	f1ba 0f00 	cmp.w	sl, #0
 8006c74:	db3b      	blt.n	8006cee <_dtoa_r+0x23e>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006c7c:	4453      	add	r3, sl
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	2300      	movs	r3, #0
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	2b09      	cmp	r3, #9
 8006c88:	d869      	bhi.n	8006d5e <_dtoa_r+0x2ae>
 8006c8a:	2b05      	cmp	r3, #5
 8006c8c:	bfc4      	itt	gt
 8006c8e:	3b04      	subgt	r3, #4
 8006c90:	9305      	strgt	r3, [sp, #20]
 8006c92:	9b05      	ldr	r3, [sp, #20]
 8006c94:	f1a3 0302 	sub.w	r3, r3, #2
 8006c98:	bfcc      	ite	gt
 8006c9a:	2500      	movgt	r5, #0
 8006c9c:	2501      	movle	r5, #1
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d869      	bhi.n	8006d76 <_dtoa_r+0x2c6>
 8006ca2:	e8df f003 	tbb	[pc, r3]
 8006ca6:	4e2c      	.short	0x4e2c
 8006ca8:	5a4c      	.short	0x5a4c
 8006caa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006cae:	441d      	add	r5, r3
 8006cb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	bfc1      	itttt	gt
 8006cb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8006cc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cc8:	bfda      	itte	le
 8006cca:	f1c3 0320 	rsble	r3, r3, #32
 8006cce:	fa06 f003 	lslle.w	r0, r6, r3
 8006cd2:	4318      	orrgt	r0, r3
 8006cd4:	f7f9 fc26 	bl	8000524 <__aeabi_ui2d>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4606      	mov	r6, r0
 8006cdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ce0:	3d01      	subs	r5, #1
 8006ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8006ce4:	e771      	b.n	8006bca <_dtoa_r+0x11a>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e7b6      	b.n	8006c58 <_dtoa_r+0x1a8>
 8006cea:	900e      	str	r0, [sp, #56]	; 0x38
 8006cec:	e7b5      	b.n	8006c5a <_dtoa_r+0x1aa>
 8006cee:	f1ca 0300 	rsb	r3, sl, #0
 8006cf2:	9306      	str	r3, [sp, #24]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	eba8 080a 	sub.w	r8, r8, sl
 8006cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8006cfc:	e7c2      	b.n	8006c84 <_dtoa_r+0x1d4>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	dc39      	bgt.n	8006d7c <_dtoa_r+0x2cc>
 8006d08:	f04f 0901 	mov.w	r9, #1
 8006d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d10:	464b      	mov	r3, r9
 8006d12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d18:	2200      	movs	r2, #0
 8006d1a:	6042      	str	r2, [r0, #4]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	f102 0614 	add.w	r6, r2, #20
 8006d22:	429e      	cmp	r6, r3
 8006d24:	6841      	ldr	r1, [r0, #4]
 8006d26:	d92f      	bls.n	8006d88 <_dtoa_r+0x2d8>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fcc7 	bl	80076bc <_Balloc>
 8006d2e:	9000      	str	r0, [sp, #0]
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d14b      	bne.n	8006dcc <_dtoa_r+0x31c>
 8006d34:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <_dtoa_r+0x318>)
 8006d36:	4602      	mov	r2, r0
 8006d38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d3c:	e6d1      	b.n	8006ae2 <_dtoa_r+0x32>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e7de      	b.n	8006d00 <_dtoa_r+0x250>
 8006d42:	2300      	movs	r3, #0
 8006d44:	9308      	str	r3, [sp, #32]
 8006d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d48:	eb0a 0903 	add.w	r9, sl, r3
 8006d4c:	f109 0301 	add.w	r3, r9, #1
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	bfb8      	it	lt
 8006d56:	2301      	movlt	r3, #1
 8006d58:	e7dd      	b.n	8006d16 <_dtoa_r+0x266>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e7f2      	b.n	8006d44 <_dtoa_r+0x294>
 8006d5e:	2501      	movs	r5, #1
 8006d60:	2300      	movs	r3, #0
 8006d62:	9305      	str	r3, [sp, #20]
 8006d64:	9508      	str	r5, [sp, #32]
 8006d66:	f04f 39ff 	mov.w	r9, #4294967295
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d70:	2312      	movs	r3, #18
 8006d72:	9209      	str	r2, [sp, #36]	; 0x24
 8006d74:	e7cf      	b.n	8006d16 <_dtoa_r+0x266>
 8006d76:	2301      	movs	r3, #1
 8006d78:	9308      	str	r3, [sp, #32]
 8006d7a:	e7f4      	b.n	8006d66 <_dtoa_r+0x2b6>
 8006d7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006d80:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d84:	464b      	mov	r3, r9
 8006d86:	e7c6      	b.n	8006d16 <_dtoa_r+0x266>
 8006d88:	3101      	adds	r1, #1
 8006d8a:	6041      	str	r1, [r0, #4]
 8006d8c:	0052      	lsls	r2, r2, #1
 8006d8e:	e7c6      	b.n	8006d1e <_dtoa_r+0x26e>
 8006d90:	636f4361 	.word	0x636f4361
 8006d94:	3fd287a7 	.word	0x3fd287a7
 8006d98:	8b60c8b3 	.word	0x8b60c8b3
 8006d9c:	3fc68a28 	.word	0x3fc68a28
 8006da0:	509f79fb 	.word	0x509f79fb
 8006da4:	3fd34413 	.word	0x3fd34413
 8006da8:	08008b69 	.word	0x08008b69
 8006dac:	08008b80 	.word	0x08008b80
 8006db0:	7ff00000 	.word	0x7ff00000
 8006db4:	08008b65 	.word	0x08008b65
 8006db8:	08008b5c 	.word	0x08008b5c
 8006dbc:	08008b39 	.word	0x08008b39
 8006dc0:	3ff80000 	.word	0x3ff80000
 8006dc4:	08008c78 	.word	0x08008c78
 8006dc8:	08008bdf 	.word	0x08008bdf
 8006dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dce:	9a00      	ldr	r2, [sp, #0]
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	9b01      	ldr	r3, [sp, #4]
 8006dd4:	2b0e      	cmp	r3, #14
 8006dd6:	f200 80ad 	bhi.w	8006f34 <_dtoa_r+0x484>
 8006dda:	2d00      	cmp	r5, #0
 8006ddc:	f000 80aa 	beq.w	8006f34 <_dtoa_r+0x484>
 8006de0:	f1ba 0f00 	cmp.w	sl, #0
 8006de4:	dd36      	ble.n	8006e54 <_dtoa_r+0x3a4>
 8006de6:	4ac3      	ldr	r2, [pc, #780]	; (80070f4 <_dtoa_r+0x644>)
 8006de8:	f00a 030f 	and.w	r3, sl, #15
 8006dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006df0:	ed93 7b00 	vldr	d7, [r3]
 8006df4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006df8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006dfc:	eeb0 8a47 	vmov.f32	s16, s14
 8006e00:	eef0 8a67 	vmov.f32	s17, s15
 8006e04:	d016      	beq.n	8006e34 <_dtoa_r+0x384>
 8006e06:	4bbc      	ldr	r3, [pc, #752]	; (80070f8 <_dtoa_r+0x648>)
 8006e08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e10:	f7f9 fd2c 	bl	800086c <__aeabi_ddiv>
 8006e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e18:	f007 070f 	and.w	r7, r7, #15
 8006e1c:	2503      	movs	r5, #3
 8006e1e:	4eb6      	ldr	r6, [pc, #728]	; (80070f8 <_dtoa_r+0x648>)
 8006e20:	b957      	cbnz	r7, 8006e38 <_dtoa_r+0x388>
 8006e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e26:	ec53 2b18 	vmov	r2, r3, d8
 8006e2a:	f7f9 fd1f 	bl	800086c <__aeabi_ddiv>
 8006e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e32:	e029      	b.n	8006e88 <_dtoa_r+0x3d8>
 8006e34:	2502      	movs	r5, #2
 8006e36:	e7f2      	b.n	8006e1e <_dtoa_r+0x36e>
 8006e38:	07f9      	lsls	r1, r7, #31
 8006e3a:	d508      	bpl.n	8006e4e <_dtoa_r+0x39e>
 8006e3c:	ec51 0b18 	vmov	r0, r1, d8
 8006e40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e44:	f7f9 fbe8 	bl	8000618 <__aeabi_dmul>
 8006e48:	ec41 0b18 	vmov	d8, r0, r1
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	107f      	asrs	r7, r7, #1
 8006e50:	3608      	adds	r6, #8
 8006e52:	e7e5      	b.n	8006e20 <_dtoa_r+0x370>
 8006e54:	f000 80a6 	beq.w	8006fa4 <_dtoa_r+0x4f4>
 8006e58:	f1ca 0600 	rsb	r6, sl, #0
 8006e5c:	4ba5      	ldr	r3, [pc, #660]	; (80070f4 <_dtoa_r+0x644>)
 8006e5e:	4fa6      	ldr	r7, [pc, #664]	; (80070f8 <_dtoa_r+0x648>)
 8006e60:	f006 020f 	and.w	r2, r6, #15
 8006e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e70:	f7f9 fbd2 	bl	8000618 <__aeabi_dmul>
 8006e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e78:	1136      	asrs	r6, r6, #4
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2502      	movs	r5, #2
 8006e7e:	2e00      	cmp	r6, #0
 8006e80:	f040 8085 	bne.w	8006f8e <_dtoa_r+0x4de>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1d2      	bne.n	8006e2e <_dtoa_r+0x37e>
 8006e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 808c 	beq.w	8006fa8 <_dtoa_r+0x4f8>
 8006e90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e94:	4b99      	ldr	r3, [pc, #612]	; (80070fc <_dtoa_r+0x64c>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 fe2e 	bl	8000afc <__aeabi_dcmplt>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f000 8081 	beq.w	8006fa8 <_dtoa_r+0x4f8>
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d07d      	beq.n	8006fa8 <_dtoa_r+0x4f8>
 8006eac:	f1b9 0f00 	cmp.w	r9, #0
 8006eb0:	dd3c      	ble.n	8006f2c <_dtoa_r+0x47c>
 8006eb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006eb6:	9307      	str	r3, [sp, #28]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4b91      	ldr	r3, [pc, #580]	; (8007100 <_dtoa_r+0x650>)
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 fbaa 	bl	8000618 <__aeabi_dmul>
 8006ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec8:	3501      	adds	r5, #1
 8006eca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006ece:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7f9 fb36 	bl	8000544 <__aeabi_i2d>
 8006ed8:	4632      	mov	r2, r6
 8006eda:	463b      	mov	r3, r7
 8006edc:	f7f9 fb9c 	bl	8000618 <__aeabi_dmul>
 8006ee0:	4b88      	ldr	r3, [pc, #544]	; (8007104 <_dtoa_r+0x654>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f7f9 f9e2 	bl	80002ac <__adddf3>
 8006ee8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef0:	9303      	str	r3, [sp, #12]
 8006ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d15c      	bne.n	8006fb2 <_dtoa_r+0x502>
 8006ef8:	4b83      	ldr	r3, [pc, #524]	; (8007108 <_dtoa_r+0x658>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	4630      	mov	r0, r6
 8006efe:	4639      	mov	r1, r7
 8006f00:	f7f9 f9d2 	bl	80002a8 <__aeabi_dsub>
 8006f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	f7f9 fe14 	bl	8000b38 <__aeabi_dcmpgt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f040 8296 	bne.w	8007442 <_dtoa_r+0x992>
 8006f16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f20:	4639      	mov	r1, r7
 8006f22:	f7f9 fdeb 	bl	8000afc <__aeabi_dcmplt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f040 8288 	bne.w	800743c <_dtoa_r+0x98c>
 8006f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f2c0 8158 	blt.w	80071ec <_dtoa_r+0x73c>
 8006f3c:	f1ba 0f0e 	cmp.w	sl, #14
 8006f40:	f300 8154 	bgt.w	80071ec <_dtoa_r+0x73c>
 8006f44:	4b6b      	ldr	r3, [pc, #428]	; (80070f4 <_dtoa_r+0x644>)
 8006f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f280 80e3 	bge.w	800711c <_dtoa_r+0x66c>
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f300 80df 	bgt.w	800711c <_dtoa_r+0x66c>
 8006f5e:	f040 826d 	bne.w	800743c <_dtoa_r+0x98c>
 8006f62:	4b69      	ldr	r3, [pc, #420]	; (8007108 <_dtoa_r+0x658>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f7f9 fb55 	bl	8000618 <__aeabi_dmul>
 8006f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f72:	f7f9 fdd7 	bl	8000b24 <__aeabi_dcmpge>
 8006f76:	9e01      	ldr	r6, [sp, #4]
 8006f78:	4637      	mov	r7, r6
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f040 8243 	bne.w	8007406 <_dtoa_r+0x956>
 8006f80:	9d00      	ldr	r5, [sp, #0]
 8006f82:	2331      	movs	r3, #49	; 0x31
 8006f84:	f805 3b01 	strb.w	r3, [r5], #1
 8006f88:	f10a 0a01 	add.w	sl, sl, #1
 8006f8c:	e23f      	b.n	800740e <_dtoa_r+0x95e>
 8006f8e:	07f2      	lsls	r2, r6, #31
 8006f90:	d505      	bpl.n	8006f9e <_dtoa_r+0x4ee>
 8006f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f96:	f7f9 fb3f 	bl	8000618 <__aeabi_dmul>
 8006f9a:	3501      	adds	r5, #1
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	1076      	asrs	r6, r6, #1
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	e76c      	b.n	8006e7e <_dtoa_r+0x3ce>
 8006fa4:	2502      	movs	r5, #2
 8006fa6:	e76f      	b.n	8006e88 <_dtoa_r+0x3d8>
 8006fa8:	9b01      	ldr	r3, [sp, #4]
 8006faa:	f8cd a01c 	str.w	sl, [sp, #28]
 8006fae:	930c      	str	r3, [sp, #48]	; 0x30
 8006fb0:	e78d      	b.n	8006ece <_dtoa_r+0x41e>
 8006fb2:	9900      	ldr	r1, [sp, #0]
 8006fb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fb8:	4b4e      	ldr	r3, [pc, #312]	; (80070f4 <_dtoa_r+0x644>)
 8006fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fbe:	4401      	add	r1, r0
 8006fc0:	9102      	str	r1, [sp, #8]
 8006fc2:	9908      	ldr	r1, [sp, #32]
 8006fc4:	eeb0 8a47 	vmov.f32	s16, s14
 8006fc8:	eef0 8a67 	vmov.f32	s17, s15
 8006fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d045      	beq.n	8007064 <_dtoa_r+0x5b4>
 8006fd8:	494c      	ldr	r1, [pc, #304]	; (800710c <_dtoa_r+0x65c>)
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f7f9 fc46 	bl	800086c <__aeabi_ddiv>
 8006fe0:	ec53 2b18 	vmov	r2, r3, d8
 8006fe4:	f7f9 f960 	bl	80002a8 <__aeabi_dsub>
 8006fe8:	9d00      	ldr	r5, [sp, #0]
 8006fea:	ec41 0b18 	vmov	d8, r0, r1
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7f9 fdc1 	bl	8000b78 <__aeabi_d2iz>
 8006ff6:	900c      	str	r0, [sp, #48]	; 0x30
 8006ff8:	f7f9 faa4 	bl	8000544 <__aeabi_i2d>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 f950 	bl	80002a8 <__aeabi_dsub>
 8007008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800700a:	3330      	adds	r3, #48	; 0x30
 800700c:	f805 3b01 	strb.w	r3, [r5], #1
 8007010:	ec53 2b18 	vmov	r2, r3, d8
 8007014:	4606      	mov	r6, r0
 8007016:	460f      	mov	r7, r1
 8007018:	f7f9 fd70 	bl	8000afc <__aeabi_dcmplt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d165      	bne.n	80070ec <_dtoa_r+0x63c>
 8007020:	4632      	mov	r2, r6
 8007022:	463b      	mov	r3, r7
 8007024:	4935      	ldr	r1, [pc, #212]	; (80070fc <_dtoa_r+0x64c>)
 8007026:	2000      	movs	r0, #0
 8007028:	f7f9 f93e 	bl	80002a8 <__aeabi_dsub>
 800702c:	ec53 2b18 	vmov	r2, r3, d8
 8007030:	f7f9 fd64 	bl	8000afc <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 80b9 	bne.w	80071ac <_dtoa_r+0x6fc>
 800703a:	9b02      	ldr	r3, [sp, #8]
 800703c:	429d      	cmp	r5, r3
 800703e:	f43f af75 	beq.w	8006f2c <_dtoa_r+0x47c>
 8007042:	4b2f      	ldr	r3, [pc, #188]	; (8007100 <_dtoa_r+0x650>)
 8007044:	ec51 0b18 	vmov	r0, r1, d8
 8007048:	2200      	movs	r2, #0
 800704a:	f7f9 fae5 	bl	8000618 <__aeabi_dmul>
 800704e:	4b2c      	ldr	r3, [pc, #176]	; (8007100 <_dtoa_r+0x650>)
 8007050:	ec41 0b18 	vmov	d8, r0, r1
 8007054:	2200      	movs	r2, #0
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	f7f9 fadd 	bl	8000618 <__aeabi_dmul>
 800705e:	4606      	mov	r6, r0
 8007060:	460f      	mov	r7, r1
 8007062:	e7c4      	b.n	8006fee <_dtoa_r+0x53e>
 8007064:	ec51 0b17 	vmov	r0, r1, d7
 8007068:	f7f9 fad6 	bl	8000618 <__aeabi_dmul>
 800706c:	9b02      	ldr	r3, [sp, #8]
 800706e:	9d00      	ldr	r5, [sp, #0]
 8007070:	930c      	str	r3, [sp, #48]	; 0x30
 8007072:	ec41 0b18 	vmov	d8, r0, r1
 8007076:	4639      	mov	r1, r7
 8007078:	4630      	mov	r0, r6
 800707a:	f7f9 fd7d 	bl	8000b78 <__aeabi_d2iz>
 800707e:	9011      	str	r0, [sp, #68]	; 0x44
 8007080:	f7f9 fa60 	bl	8000544 <__aeabi_i2d>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4630      	mov	r0, r6
 800708a:	4639      	mov	r1, r7
 800708c:	f7f9 f90c 	bl	80002a8 <__aeabi_dsub>
 8007090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007092:	3330      	adds	r3, #48	; 0x30
 8007094:	f805 3b01 	strb.w	r3, [r5], #1
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	429d      	cmp	r5, r3
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	d134      	bne.n	8007110 <_dtoa_r+0x660>
 80070a6:	4b19      	ldr	r3, [pc, #100]	; (800710c <_dtoa_r+0x65c>)
 80070a8:	ec51 0b18 	vmov	r0, r1, d8
 80070ac:	f7f9 f8fe 	bl	80002ac <__adddf3>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 fd3e 	bl	8000b38 <__aeabi_dcmpgt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d175      	bne.n	80071ac <_dtoa_r+0x6fc>
 80070c0:	ec53 2b18 	vmov	r2, r3, d8
 80070c4:	4911      	ldr	r1, [pc, #68]	; (800710c <_dtoa_r+0x65c>)
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7f9 f8ee 	bl	80002a8 <__aeabi_dsub>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 fd12 	bl	8000afc <__aeabi_dcmplt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f43f af27 	beq.w	8006f2c <_dtoa_r+0x47c>
 80070de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070e0:	1e6b      	subs	r3, r5, #1
 80070e2:	930c      	str	r3, [sp, #48]	; 0x30
 80070e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070e8:	2b30      	cmp	r3, #48	; 0x30
 80070ea:	d0f8      	beq.n	80070de <_dtoa_r+0x62e>
 80070ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80070f0:	e04a      	b.n	8007188 <_dtoa_r+0x6d8>
 80070f2:	bf00      	nop
 80070f4:	08008c78 	.word	0x08008c78
 80070f8:	08008c50 	.word	0x08008c50
 80070fc:	3ff00000 	.word	0x3ff00000
 8007100:	40240000 	.word	0x40240000
 8007104:	401c0000 	.word	0x401c0000
 8007108:	40140000 	.word	0x40140000
 800710c:	3fe00000 	.word	0x3fe00000
 8007110:	4baf      	ldr	r3, [pc, #700]	; (80073d0 <_dtoa_r+0x920>)
 8007112:	f7f9 fa81 	bl	8000618 <__aeabi_dmul>
 8007116:	4606      	mov	r6, r0
 8007118:	460f      	mov	r7, r1
 800711a:	e7ac      	b.n	8007076 <_dtoa_r+0x5c6>
 800711c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007120:	9d00      	ldr	r5, [sp, #0]
 8007122:	4642      	mov	r2, r8
 8007124:	464b      	mov	r3, r9
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 fb9f 	bl	800086c <__aeabi_ddiv>
 800712e:	f7f9 fd23 	bl	8000b78 <__aeabi_d2iz>
 8007132:	9002      	str	r0, [sp, #8]
 8007134:	f7f9 fa06 	bl	8000544 <__aeabi_i2d>
 8007138:	4642      	mov	r2, r8
 800713a:	464b      	mov	r3, r9
 800713c:	f7f9 fa6c 	bl	8000618 <__aeabi_dmul>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4630      	mov	r0, r6
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 f8ae 	bl	80002a8 <__aeabi_dsub>
 800714c:	9e02      	ldr	r6, [sp, #8]
 800714e:	9f01      	ldr	r7, [sp, #4]
 8007150:	3630      	adds	r6, #48	; 0x30
 8007152:	f805 6b01 	strb.w	r6, [r5], #1
 8007156:	9e00      	ldr	r6, [sp, #0]
 8007158:	1bae      	subs	r6, r5, r6
 800715a:	42b7      	cmp	r7, r6
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	d137      	bne.n	80071d2 <_dtoa_r+0x722>
 8007162:	f7f9 f8a3 	bl	80002ac <__adddf3>
 8007166:	4642      	mov	r2, r8
 8007168:	464b      	mov	r3, r9
 800716a:	4606      	mov	r6, r0
 800716c:	460f      	mov	r7, r1
 800716e:	f7f9 fce3 	bl	8000b38 <__aeabi_dcmpgt>
 8007172:	b9c8      	cbnz	r0, 80071a8 <_dtoa_r+0x6f8>
 8007174:	4642      	mov	r2, r8
 8007176:	464b      	mov	r3, r9
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007180:	b110      	cbz	r0, 8007188 <_dtoa_r+0x6d8>
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	07d9      	lsls	r1, r3, #31
 8007186:	d40f      	bmi.n	80071a8 <_dtoa_r+0x6f8>
 8007188:	4620      	mov	r0, r4
 800718a:	4659      	mov	r1, fp
 800718c:	f000 fad6 	bl	800773c <_Bfree>
 8007190:	2300      	movs	r3, #0
 8007192:	702b      	strb	r3, [r5, #0]
 8007194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007196:	f10a 0001 	add.w	r0, sl, #1
 800719a:	6018      	str	r0, [r3, #0]
 800719c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f43f acd8 	beq.w	8006b54 <_dtoa_r+0xa4>
 80071a4:	601d      	str	r5, [r3, #0]
 80071a6:	e4d5      	b.n	8006b54 <_dtoa_r+0xa4>
 80071a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80071ac:	462b      	mov	r3, r5
 80071ae:	461d      	mov	r5, r3
 80071b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071b4:	2a39      	cmp	r2, #57	; 0x39
 80071b6:	d108      	bne.n	80071ca <_dtoa_r+0x71a>
 80071b8:	9a00      	ldr	r2, [sp, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d1f7      	bne.n	80071ae <_dtoa_r+0x6fe>
 80071be:	9a07      	ldr	r2, [sp, #28]
 80071c0:	9900      	ldr	r1, [sp, #0]
 80071c2:	3201      	adds	r2, #1
 80071c4:	9207      	str	r2, [sp, #28]
 80071c6:	2230      	movs	r2, #48	; 0x30
 80071c8:	700a      	strb	r2, [r1, #0]
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	3201      	adds	r2, #1
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	e78c      	b.n	80070ec <_dtoa_r+0x63c>
 80071d2:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <_dtoa_r+0x920>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	f7f9 fa1f 	bl	8000618 <__aeabi_dmul>
 80071da:	2200      	movs	r2, #0
 80071dc:	2300      	movs	r3, #0
 80071de:	4606      	mov	r6, r0
 80071e0:	460f      	mov	r7, r1
 80071e2:	f7f9 fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d09b      	beq.n	8007122 <_dtoa_r+0x672>
 80071ea:	e7cd      	b.n	8007188 <_dtoa_r+0x6d8>
 80071ec:	9a08      	ldr	r2, [sp, #32]
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	f000 80c4 	beq.w	800737c <_dtoa_r+0x8cc>
 80071f4:	9a05      	ldr	r2, [sp, #20]
 80071f6:	2a01      	cmp	r2, #1
 80071f8:	f300 80a8 	bgt.w	800734c <_dtoa_r+0x89c>
 80071fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071fe:	2a00      	cmp	r2, #0
 8007200:	f000 80a0 	beq.w	8007344 <_dtoa_r+0x894>
 8007204:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007208:	9e06      	ldr	r6, [sp, #24]
 800720a:	4645      	mov	r5, r8
 800720c:	9a04      	ldr	r2, [sp, #16]
 800720e:	2101      	movs	r1, #1
 8007210:	441a      	add	r2, r3
 8007212:	4620      	mov	r0, r4
 8007214:	4498      	add	r8, r3
 8007216:	9204      	str	r2, [sp, #16]
 8007218:	f000 fb4c 	bl	80078b4 <__i2b>
 800721c:	4607      	mov	r7, r0
 800721e:	2d00      	cmp	r5, #0
 8007220:	dd0b      	ble.n	800723a <_dtoa_r+0x78a>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dd08      	ble.n	800723a <_dtoa_r+0x78a>
 8007228:	42ab      	cmp	r3, r5
 800722a:	9a04      	ldr	r2, [sp, #16]
 800722c:	bfa8      	it	ge
 800722e:	462b      	movge	r3, r5
 8007230:	eba8 0803 	sub.w	r8, r8, r3
 8007234:	1aed      	subs	r5, r5, r3
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9b06      	ldr	r3, [sp, #24]
 800723c:	b1fb      	cbz	r3, 800727e <_dtoa_r+0x7ce>
 800723e:	9b08      	ldr	r3, [sp, #32]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 809f 	beq.w	8007384 <_dtoa_r+0x8d4>
 8007246:	2e00      	cmp	r6, #0
 8007248:	dd11      	ble.n	800726e <_dtoa_r+0x7be>
 800724a:	4639      	mov	r1, r7
 800724c:	4632      	mov	r2, r6
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fbec 	bl	8007a2c <__pow5mult>
 8007254:	465a      	mov	r2, fp
 8007256:	4601      	mov	r1, r0
 8007258:	4607      	mov	r7, r0
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fb40 	bl	80078e0 <__multiply>
 8007260:	4659      	mov	r1, fp
 8007262:	9007      	str	r0, [sp, #28]
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fa69 	bl	800773c <_Bfree>
 800726a:	9b07      	ldr	r3, [sp, #28]
 800726c:	469b      	mov	fp, r3
 800726e:	9b06      	ldr	r3, [sp, #24]
 8007270:	1b9a      	subs	r2, r3, r6
 8007272:	d004      	beq.n	800727e <_dtoa_r+0x7ce>
 8007274:	4659      	mov	r1, fp
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fbd8 	bl	8007a2c <__pow5mult>
 800727c:	4683      	mov	fp, r0
 800727e:	2101      	movs	r1, #1
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fb17 	bl	80078b4 <__i2b>
 8007286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007288:	2b00      	cmp	r3, #0
 800728a:	4606      	mov	r6, r0
 800728c:	dd7c      	ble.n	8007388 <_dtoa_r+0x8d8>
 800728e:	461a      	mov	r2, r3
 8007290:	4601      	mov	r1, r0
 8007292:	4620      	mov	r0, r4
 8007294:	f000 fbca 	bl	8007a2c <__pow5mult>
 8007298:	9b05      	ldr	r3, [sp, #20]
 800729a:	2b01      	cmp	r3, #1
 800729c:	4606      	mov	r6, r0
 800729e:	dd76      	ble.n	800738e <_dtoa_r+0x8de>
 80072a0:	2300      	movs	r3, #0
 80072a2:	9306      	str	r3, [sp, #24]
 80072a4:	6933      	ldr	r3, [r6, #16]
 80072a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072aa:	6918      	ldr	r0, [r3, #16]
 80072ac:	f000 fab2 	bl	8007814 <__hi0bits>
 80072b0:	f1c0 0020 	rsb	r0, r0, #32
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	4418      	add	r0, r3
 80072b8:	f010 001f 	ands.w	r0, r0, #31
 80072bc:	f000 8086 	beq.w	80073cc <_dtoa_r+0x91c>
 80072c0:	f1c0 0320 	rsb	r3, r0, #32
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	dd7f      	ble.n	80073c8 <_dtoa_r+0x918>
 80072c8:	f1c0 001c 	rsb	r0, r0, #28
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	4403      	add	r3, r0
 80072d0:	4480      	add	r8, r0
 80072d2:	4405      	add	r5, r0
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	f1b8 0f00 	cmp.w	r8, #0
 80072da:	dd05      	ble.n	80072e8 <_dtoa_r+0x838>
 80072dc:	4659      	mov	r1, fp
 80072de:	4642      	mov	r2, r8
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fbfd 	bl	8007ae0 <__lshift>
 80072e6:	4683      	mov	fp, r0
 80072e8:	9b04      	ldr	r3, [sp, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dd05      	ble.n	80072fa <_dtoa_r+0x84a>
 80072ee:	4631      	mov	r1, r6
 80072f0:	461a      	mov	r2, r3
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fbf4 	bl	8007ae0 <__lshift>
 80072f8:	4606      	mov	r6, r0
 80072fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d069      	beq.n	80073d4 <_dtoa_r+0x924>
 8007300:	4631      	mov	r1, r6
 8007302:	4658      	mov	r0, fp
 8007304:	f000 fc58 	bl	8007bb8 <__mcmp>
 8007308:	2800      	cmp	r0, #0
 800730a:	da63      	bge.n	80073d4 <_dtoa_r+0x924>
 800730c:	2300      	movs	r3, #0
 800730e:	4659      	mov	r1, fp
 8007310:	220a      	movs	r2, #10
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fa34 	bl	8007780 <__multadd>
 8007318:	9b08      	ldr	r3, [sp, #32]
 800731a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800731e:	4683      	mov	fp, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 818f 	beq.w	8007644 <_dtoa_r+0xb94>
 8007326:	4639      	mov	r1, r7
 8007328:	2300      	movs	r3, #0
 800732a:	220a      	movs	r2, #10
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fa27 	bl	8007780 <__multadd>
 8007332:	f1b9 0f00 	cmp.w	r9, #0
 8007336:	4607      	mov	r7, r0
 8007338:	f300 808e 	bgt.w	8007458 <_dtoa_r+0x9a8>
 800733c:	9b05      	ldr	r3, [sp, #20]
 800733e:	2b02      	cmp	r3, #2
 8007340:	dc50      	bgt.n	80073e4 <_dtoa_r+0x934>
 8007342:	e089      	b.n	8007458 <_dtoa_r+0x9a8>
 8007344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800734a:	e75d      	b.n	8007208 <_dtoa_r+0x758>
 800734c:	9b01      	ldr	r3, [sp, #4]
 800734e:	1e5e      	subs	r6, r3, #1
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	42b3      	cmp	r3, r6
 8007354:	bfbf      	itttt	lt
 8007356:	9b06      	ldrlt	r3, [sp, #24]
 8007358:	9606      	strlt	r6, [sp, #24]
 800735a:	1af2      	sublt	r2, r6, r3
 800735c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800735e:	bfb6      	itet	lt
 8007360:	189b      	addlt	r3, r3, r2
 8007362:	1b9e      	subge	r6, r3, r6
 8007364:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	bfb8      	it	lt
 800736a:	2600      	movlt	r6, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfb5      	itete	lt
 8007370:	eba8 0503 	sublt.w	r5, r8, r3
 8007374:	9b01      	ldrge	r3, [sp, #4]
 8007376:	2300      	movlt	r3, #0
 8007378:	4645      	movge	r5, r8
 800737a:	e747      	b.n	800720c <_dtoa_r+0x75c>
 800737c:	9e06      	ldr	r6, [sp, #24]
 800737e:	9f08      	ldr	r7, [sp, #32]
 8007380:	4645      	mov	r5, r8
 8007382:	e74c      	b.n	800721e <_dtoa_r+0x76e>
 8007384:	9a06      	ldr	r2, [sp, #24]
 8007386:	e775      	b.n	8007274 <_dtoa_r+0x7c4>
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	2b01      	cmp	r3, #1
 800738c:	dc18      	bgt.n	80073c0 <_dtoa_r+0x910>
 800738e:	9b02      	ldr	r3, [sp, #8]
 8007390:	b9b3      	cbnz	r3, 80073c0 <_dtoa_r+0x910>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007398:	b9a3      	cbnz	r3, 80073c4 <_dtoa_r+0x914>
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073a0:	0d1b      	lsrs	r3, r3, #20
 80073a2:	051b      	lsls	r3, r3, #20
 80073a4:	b12b      	cbz	r3, 80073b2 <_dtoa_r+0x902>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	3301      	adds	r3, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	f108 0801 	add.w	r8, r8, #1
 80073b0:	2301      	movs	r3, #1
 80073b2:	9306      	str	r3, [sp, #24]
 80073b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f47f af74 	bne.w	80072a4 <_dtoa_r+0x7f4>
 80073bc:	2001      	movs	r0, #1
 80073be:	e779      	b.n	80072b4 <_dtoa_r+0x804>
 80073c0:	2300      	movs	r3, #0
 80073c2:	e7f6      	b.n	80073b2 <_dtoa_r+0x902>
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	e7f4      	b.n	80073b2 <_dtoa_r+0x902>
 80073c8:	d085      	beq.n	80072d6 <_dtoa_r+0x826>
 80073ca:	4618      	mov	r0, r3
 80073cc:	301c      	adds	r0, #28
 80073ce:	e77d      	b.n	80072cc <_dtoa_r+0x81c>
 80073d0:	40240000 	.word	0x40240000
 80073d4:	9b01      	ldr	r3, [sp, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dc38      	bgt.n	800744c <_dtoa_r+0x99c>
 80073da:	9b05      	ldr	r3, [sp, #20]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	dd35      	ble.n	800744c <_dtoa_r+0x99c>
 80073e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80073e4:	f1b9 0f00 	cmp.w	r9, #0
 80073e8:	d10d      	bne.n	8007406 <_dtoa_r+0x956>
 80073ea:	4631      	mov	r1, r6
 80073ec:	464b      	mov	r3, r9
 80073ee:	2205      	movs	r2, #5
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f9c5 	bl	8007780 <__multadd>
 80073f6:	4601      	mov	r1, r0
 80073f8:	4606      	mov	r6, r0
 80073fa:	4658      	mov	r0, fp
 80073fc:	f000 fbdc 	bl	8007bb8 <__mcmp>
 8007400:	2800      	cmp	r0, #0
 8007402:	f73f adbd 	bgt.w	8006f80 <_dtoa_r+0x4d0>
 8007406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007408:	9d00      	ldr	r5, [sp, #0]
 800740a:	ea6f 0a03 	mvn.w	sl, r3
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	4631      	mov	r1, r6
 8007414:	4620      	mov	r0, r4
 8007416:	f000 f991 	bl	800773c <_Bfree>
 800741a:	2f00      	cmp	r7, #0
 800741c:	f43f aeb4 	beq.w	8007188 <_dtoa_r+0x6d8>
 8007420:	f1b8 0f00 	cmp.w	r8, #0
 8007424:	d005      	beq.n	8007432 <_dtoa_r+0x982>
 8007426:	45b8      	cmp	r8, r7
 8007428:	d003      	beq.n	8007432 <_dtoa_r+0x982>
 800742a:	4641      	mov	r1, r8
 800742c:	4620      	mov	r0, r4
 800742e:	f000 f985 	bl	800773c <_Bfree>
 8007432:	4639      	mov	r1, r7
 8007434:	4620      	mov	r0, r4
 8007436:	f000 f981 	bl	800773c <_Bfree>
 800743a:	e6a5      	b.n	8007188 <_dtoa_r+0x6d8>
 800743c:	2600      	movs	r6, #0
 800743e:	4637      	mov	r7, r6
 8007440:	e7e1      	b.n	8007406 <_dtoa_r+0x956>
 8007442:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007444:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007448:	4637      	mov	r7, r6
 800744a:	e599      	b.n	8006f80 <_dtoa_r+0x4d0>
 800744c:	9b08      	ldr	r3, [sp, #32]
 800744e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 80fd 	beq.w	8007652 <_dtoa_r+0xba2>
 8007458:	2d00      	cmp	r5, #0
 800745a:	dd05      	ble.n	8007468 <_dtoa_r+0x9b8>
 800745c:	4639      	mov	r1, r7
 800745e:	462a      	mov	r2, r5
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fb3d 	bl	8007ae0 <__lshift>
 8007466:	4607      	mov	r7, r0
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d05c      	beq.n	8007528 <_dtoa_r+0xa78>
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4620      	mov	r0, r4
 8007472:	f000 f923 	bl	80076bc <_Balloc>
 8007476:	4605      	mov	r5, r0
 8007478:	b928      	cbnz	r0, 8007486 <_dtoa_r+0x9d6>
 800747a:	4b80      	ldr	r3, [pc, #512]	; (800767c <_dtoa_r+0xbcc>)
 800747c:	4602      	mov	r2, r0
 800747e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007482:	f7ff bb2e 	b.w	8006ae2 <_dtoa_r+0x32>
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	3202      	adds	r2, #2
 800748a:	0092      	lsls	r2, r2, #2
 800748c:	f107 010c 	add.w	r1, r7, #12
 8007490:	300c      	adds	r0, #12
 8007492:	f000 f905 	bl	80076a0 <memcpy>
 8007496:	2201      	movs	r2, #1
 8007498:	4629      	mov	r1, r5
 800749a:	4620      	mov	r0, r4
 800749c:	f000 fb20 	bl	8007ae0 <__lshift>
 80074a0:	9b00      	ldr	r3, [sp, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	9b00      	ldr	r3, [sp, #0]
 80074a8:	444b      	add	r3, r9
 80074aa:	9307      	str	r3, [sp, #28]
 80074ac:	9b02      	ldr	r3, [sp, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	46b8      	mov	r8, r7
 80074b4:	9306      	str	r3, [sp, #24]
 80074b6:	4607      	mov	r7, r0
 80074b8:	9b01      	ldr	r3, [sp, #4]
 80074ba:	4631      	mov	r1, r6
 80074bc:	3b01      	subs	r3, #1
 80074be:	4658      	mov	r0, fp
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	f7ff fa69 	bl	8006998 <quorem>
 80074c6:	4603      	mov	r3, r0
 80074c8:	3330      	adds	r3, #48	; 0x30
 80074ca:	9004      	str	r0, [sp, #16]
 80074cc:	4641      	mov	r1, r8
 80074ce:	4658      	mov	r0, fp
 80074d0:	9308      	str	r3, [sp, #32]
 80074d2:	f000 fb71 	bl	8007bb8 <__mcmp>
 80074d6:	463a      	mov	r2, r7
 80074d8:	4681      	mov	r9, r0
 80074da:	4631      	mov	r1, r6
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 fb87 	bl	8007bf0 <__mdiff>
 80074e2:	68c2      	ldr	r2, [r0, #12]
 80074e4:	9b08      	ldr	r3, [sp, #32]
 80074e6:	4605      	mov	r5, r0
 80074e8:	bb02      	cbnz	r2, 800752c <_dtoa_r+0xa7c>
 80074ea:	4601      	mov	r1, r0
 80074ec:	4658      	mov	r0, fp
 80074ee:	f000 fb63 	bl	8007bb8 <__mcmp>
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	4602      	mov	r2, r0
 80074f6:	4629      	mov	r1, r5
 80074f8:	4620      	mov	r0, r4
 80074fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80074fe:	f000 f91d 	bl	800773c <_Bfree>
 8007502:	9b05      	ldr	r3, [sp, #20]
 8007504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007506:	9d01      	ldr	r5, [sp, #4]
 8007508:	ea43 0102 	orr.w	r1, r3, r2
 800750c:	9b06      	ldr	r3, [sp, #24]
 800750e:	430b      	orrs	r3, r1
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	d10d      	bne.n	8007530 <_dtoa_r+0xa80>
 8007514:	2b39      	cmp	r3, #57	; 0x39
 8007516:	d029      	beq.n	800756c <_dtoa_r+0xabc>
 8007518:	f1b9 0f00 	cmp.w	r9, #0
 800751c:	dd01      	ble.n	8007522 <_dtoa_r+0xa72>
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	3331      	adds	r3, #49	; 0x31
 8007522:	9a02      	ldr	r2, [sp, #8]
 8007524:	7013      	strb	r3, [r2, #0]
 8007526:	e774      	b.n	8007412 <_dtoa_r+0x962>
 8007528:	4638      	mov	r0, r7
 800752a:	e7b9      	b.n	80074a0 <_dtoa_r+0x9f0>
 800752c:	2201      	movs	r2, #1
 800752e:	e7e2      	b.n	80074f6 <_dtoa_r+0xa46>
 8007530:	f1b9 0f00 	cmp.w	r9, #0
 8007534:	db06      	blt.n	8007544 <_dtoa_r+0xa94>
 8007536:	9905      	ldr	r1, [sp, #20]
 8007538:	ea41 0909 	orr.w	r9, r1, r9
 800753c:	9906      	ldr	r1, [sp, #24]
 800753e:	ea59 0101 	orrs.w	r1, r9, r1
 8007542:	d120      	bne.n	8007586 <_dtoa_r+0xad6>
 8007544:	2a00      	cmp	r2, #0
 8007546:	ddec      	ble.n	8007522 <_dtoa_r+0xa72>
 8007548:	4659      	mov	r1, fp
 800754a:	2201      	movs	r2, #1
 800754c:	4620      	mov	r0, r4
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	f000 fac6 	bl	8007ae0 <__lshift>
 8007554:	4631      	mov	r1, r6
 8007556:	4683      	mov	fp, r0
 8007558:	f000 fb2e 	bl	8007bb8 <__mcmp>
 800755c:	2800      	cmp	r0, #0
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	dc02      	bgt.n	8007568 <_dtoa_r+0xab8>
 8007562:	d1de      	bne.n	8007522 <_dtoa_r+0xa72>
 8007564:	07da      	lsls	r2, r3, #31
 8007566:	d5dc      	bpl.n	8007522 <_dtoa_r+0xa72>
 8007568:	2b39      	cmp	r3, #57	; 0x39
 800756a:	d1d8      	bne.n	800751e <_dtoa_r+0xa6e>
 800756c:	9a02      	ldr	r2, [sp, #8]
 800756e:	2339      	movs	r3, #57	; 0x39
 8007570:	7013      	strb	r3, [r2, #0]
 8007572:	462b      	mov	r3, r5
 8007574:	461d      	mov	r5, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800757c:	2a39      	cmp	r2, #57	; 0x39
 800757e:	d050      	beq.n	8007622 <_dtoa_r+0xb72>
 8007580:	3201      	adds	r2, #1
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e745      	b.n	8007412 <_dtoa_r+0x962>
 8007586:	2a00      	cmp	r2, #0
 8007588:	dd03      	ble.n	8007592 <_dtoa_r+0xae2>
 800758a:	2b39      	cmp	r3, #57	; 0x39
 800758c:	d0ee      	beq.n	800756c <_dtoa_r+0xabc>
 800758e:	3301      	adds	r3, #1
 8007590:	e7c7      	b.n	8007522 <_dtoa_r+0xa72>
 8007592:	9a01      	ldr	r2, [sp, #4]
 8007594:	9907      	ldr	r1, [sp, #28]
 8007596:	f802 3c01 	strb.w	r3, [r2, #-1]
 800759a:	428a      	cmp	r2, r1
 800759c:	d02a      	beq.n	80075f4 <_dtoa_r+0xb44>
 800759e:	4659      	mov	r1, fp
 80075a0:	2300      	movs	r3, #0
 80075a2:	220a      	movs	r2, #10
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 f8eb 	bl	8007780 <__multadd>
 80075aa:	45b8      	cmp	r8, r7
 80075ac:	4683      	mov	fp, r0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	f04f 020a 	mov.w	r2, #10
 80075b6:	4641      	mov	r1, r8
 80075b8:	4620      	mov	r0, r4
 80075ba:	d107      	bne.n	80075cc <_dtoa_r+0xb1c>
 80075bc:	f000 f8e0 	bl	8007780 <__multadd>
 80075c0:	4680      	mov	r8, r0
 80075c2:	4607      	mov	r7, r0
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	3301      	adds	r3, #1
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	e775      	b.n	80074b8 <_dtoa_r+0xa08>
 80075cc:	f000 f8d8 	bl	8007780 <__multadd>
 80075d0:	4639      	mov	r1, r7
 80075d2:	4680      	mov	r8, r0
 80075d4:	2300      	movs	r3, #0
 80075d6:	220a      	movs	r2, #10
 80075d8:	4620      	mov	r0, r4
 80075da:	f000 f8d1 	bl	8007780 <__multadd>
 80075de:	4607      	mov	r7, r0
 80075e0:	e7f0      	b.n	80075c4 <_dtoa_r+0xb14>
 80075e2:	f1b9 0f00 	cmp.w	r9, #0
 80075e6:	9a00      	ldr	r2, [sp, #0]
 80075e8:	bfcc      	ite	gt
 80075ea:	464d      	movgt	r5, r9
 80075ec:	2501      	movle	r5, #1
 80075ee:	4415      	add	r5, r2
 80075f0:	f04f 0800 	mov.w	r8, #0
 80075f4:	4659      	mov	r1, fp
 80075f6:	2201      	movs	r2, #1
 80075f8:	4620      	mov	r0, r4
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	f000 fa70 	bl	8007ae0 <__lshift>
 8007600:	4631      	mov	r1, r6
 8007602:	4683      	mov	fp, r0
 8007604:	f000 fad8 	bl	8007bb8 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	dcb2      	bgt.n	8007572 <_dtoa_r+0xac2>
 800760c:	d102      	bne.n	8007614 <_dtoa_r+0xb64>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	07db      	lsls	r3, r3, #31
 8007612:	d4ae      	bmi.n	8007572 <_dtoa_r+0xac2>
 8007614:	462b      	mov	r3, r5
 8007616:	461d      	mov	r5, r3
 8007618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800761c:	2a30      	cmp	r2, #48	; 0x30
 800761e:	d0fa      	beq.n	8007616 <_dtoa_r+0xb66>
 8007620:	e6f7      	b.n	8007412 <_dtoa_r+0x962>
 8007622:	9a00      	ldr	r2, [sp, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d1a5      	bne.n	8007574 <_dtoa_r+0xac4>
 8007628:	f10a 0a01 	add.w	sl, sl, #1
 800762c:	2331      	movs	r3, #49	; 0x31
 800762e:	e779      	b.n	8007524 <_dtoa_r+0xa74>
 8007630:	4b13      	ldr	r3, [pc, #76]	; (8007680 <_dtoa_r+0xbd0>)
 8007632:	f7ff baaf 	b.w	8006b94 <_dtoa_r+0xe4>
 8007636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007638:	2b00      	cmp	r3, #0
 800763a:	f47f aa86 	bne.w	8006b4a <_dtoa_r+0x9a>
 800763e:	4b11      	ldr	r3, [pc, #68]	; (8007684 <_dtoa_r+0xbd4>)
 8007640:	f7ff baa8 	b.w	8006b94 <_dtoa_r+0xe4>
 8007644:	f1b9 0f00 	cmp.w	r9, #0
 8007648:	dc03      	bgt.n	8007652 <_dtoa_r+0xba2>
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	2b02      	cmp	r3, #2
 800764e:	f73f aec9 	bgt.w	80073e4 <_dtoa_r+0x934>
 8007652:	9d00      	ldr	r5, [sp, #0]
 8007654:	4631      	mov	r1, r6
 8007656:	4658      	mov	r0, fp
 8007658:	f7ff f99e 	bl	8006998 <quorem>
 800765c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007660:	f805 3b01 	strb.w	r3, [r5], #1
 8007664:	9a00      	ldr	r2, [sp, #0]
 8007666:	1aaa      	subs	r2, r5, r2
 8007668:	4591      	cmp	r9, r2
 800766a:	ddba      	ble.n	80075e2 <_dtoa_r+0xb32>
 800766c:	4659      	mov	r1, fp
 800766e:	2300      	movs	r3, #0
 8007670:	220a      	movs	r2, #10
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f884 	bl	8007780 <__multadd>
 8007678:	4683      	mov	fp, r0
 800767a:	e7eb      	b.n	8007654 <_dtoa_r+0xba4>
 800767c:	08008bdf 	.word	0x08008bdf
 8007680:	08008b38 	.word	0x08008b38
 8007684:	08008b5c 	.word	0x08008b5c

08007688 <_localeconv_r>:
 8007688:	4800      	ldr	r0, [pc, #0]	; (800768c <_localeconv_r+0x4>)
 800768a:	4770      	bx	lr
 800768c:	20000160 	.word	0x20000160

08007690 <malloc>:
 8007690:	4b02      	ldr	r3, [pc, #8]	; (800769c <malloc+0xc>)
 8007692:	4601      	mov	r1, r0
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	f000 bbef 	b.w	8007e78 <_malloc_r>
 800769a:	bf00      	nop
 800769c:	2000000c 	.word	0x2000000c

080076a0 <memcpy>:
 80076a0:	440a      	add	r2, r1
 80076a2:	4291      	cmp	r1, r2
 80076a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a8:	d100      	bne.n	80076ac <memcpy+0xc>
 80076aa:	4770      	bx	lr
 80076ac:	b510      	push	{r4, lr}
 80076ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b6:	4291      	cmp	r1, r2
 80076b8:	d1f9      	bne.n	80076ae <memcpy+0xe>
 80076ba:	bd10      	pop	{r4, pc}

080076bc <_Balloc>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076c0:	4604      	mov	r4, r0
 80076c2:	460d      	mov	r5, r1
 80076c4:	b976      	cbnz	r6, 80076e4 <_Balloc+0x28>
 80076c6:	2010      	movs	r0, #16
 80076c8:	f7ff ffe2 	bl	8007690 <malloc>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6260      	str	r0, [r4, #36]	; 0x24
 80076d0:	b920      	cbnz	r0, 80076dc <_Balloc+0x20>
 80076d2:	4b18      	ldr	r3, [pc, #96]	; (8007734 <_Balloc+0x78>)
 80076d4:	4818      	ldr	r0, [pc, #96]	; (8007738 <_Balloc+0x7c>)
 80076d6:	2166      	movs	r1, #102	; 0x66
 80076d8:	f000 fc38 	bl	8007f4c <__assert_func>
 80076dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e0:	6006      	str	r6, [r0, #0]
 80076e2:	60c6      	str	r6, [r0, #12]
 80076e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076e6:	68f3      	ldr	r3, [r6, #12]
 80076e8:	b183      	cbz	r3, 800770c <_Balloc+0x50>
 80076ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076f2:	b9b8      	cbnz	r0, 8007724 <_Balloc+0x68>
 80076f4:	2101      	movs	r1, #1
 80076f6:	fa01 f605 	lsl.w	r6, r1, r5
 80076fa:	1d72      	adds	r2, r6, #5
 80076fc:	0092      	lsls	r2, r2, #2
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 fb5a 	bl	8007db8 <_calloc_r>
 8007704:	b160      	cbz	r0, 8007720 <_Balloc+0x64>
 8007706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800770a:	e00e      	b.n	800772a <_Balloc+0x6e>
 800770c:	2221      	movs	r2, #33	; 0x21
 800770e:	2104      	movs	r1, #4
 8007710:	4620      	mov	r0, r4
 8007712:	f000 fb51 	bl	8007db8 <_calloc_r>
 8007716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007718:	60f0      	str	r0, [r6, #12]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e4      	bne.n	80076ea <_Balloc+0x2e>
 8007720:	2000      	movs	r0, #0
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	6802      	ldr	r2, [r0, #0]
 8007726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800772a:	2300      	movs	r3, #0
 800772c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007730:	e7f7      	b.n	8007722 <_Balloc+0x66>
 8007732:	bf00      	nop
 8007734:	08008b69 	.word	0x08008b69
 8007738:	08008bf0 	.word	0x08008bf0

0800773c <_Bfree>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007740:	4605      	mov	r5, r0
 8007742:	460c      	mov	r4, r1
 8007744:	b976      	cbnz	r6, 8007764 <_Bfree+0x28>
 8007746:	2010      	movs	r0, #16
 8007748:	f7ff ffa2 	bl	8007690 <malloc>
 800774c:	4602      	mov	r2, r0
 800774e:	6268      	str	r0, [r5, #36]	; 0x24
 8007750:	b920      	cbnz	r0, 800775c <_Bfree+0x20>
 8007752:	4b09      	ldr	r3, [pc, #36]	; (8007778 <_Bfree+0x3c>)
 8007754:	4809      	ldr	r0, [pc, #36]	; (800777c <_Bfree+0x40>)
 8007756:	218a      	movs	r1, #138	; 0x8a
 8007758:	f000 fbf8 	bl	8007f4c <__assert_func>
 800775c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007760:	6006      	str	r6, [r0, #0]
 8007762:	60c6      	str	r6, [r0, #12]
 8007764:	b13c      	cbz	r4, 8007776 <_Bfree+0x3a>
 8007766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007768:	6862      	ldr	r2, [r4, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007770:	6021      	str	r1, [r4, #0]
 8007772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	08008b69 	.word	0x08008b69
 800777c:	08008bf0 	.word	0x08008bf0

08007780 <__multadd>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	690e      	ldr	r6, [r1, #16]
 8007786:	4607      	mov	r7, r0
 8007788:	4698      	mov	r8, r3
 800778a:	460c      	mov	r4, r1
 800778c:	f101 0014 	add.w	r0, r1, #20
 8007790:	2300      	movs	r3, #0
 8007792:	6805      	ldr	r5, [r0, #0]
 8007794:	b2a9      	uxth	r1, r5
 8007796:	fb02 8101 	mla	r1, r2, r1, r8
 800779a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800779e:	0c2d      	lsrs	r5, r5, #16
 80077a0:	fb02 c505 	mla	r5, r2, r5, ip
 80077a4:	b289      	uxth	r1, r1
 80077a6:	3301      	adds	r3, #1
 80077a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80077ac:	429e      	cmp	r6, r3
 80077ae:	f840 1b04 	str.w	r1, [r0], #4
 80077b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80077b6:	dcec      	bgt.n	8007792 <__multadd+0x12>
 80077b8:	f1b8 0f00 	cmp.w	r8, #0
 80077bc:	d022      	beq.n	8007804 <__multadd+0x84>
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	42b3      	cmp	r3, r6
 80077c2:	dc19      	bgt.n	80077f8 <__multadd+0x78>
 80077c4:	6861      	ldr	r1, [r4, #4]
 80077c6:	4638      	mov	r0, r7
 80077c8:	3101      	adds	r1, #1
 80077ca:	f7ff ff77 	bl	80076bc <_Balloc>
 80077ce:	4605      	mov	r5, r0
 80077d0:	b928      	cbnz	r0, 80077de <__multadd+0x5e>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b0d      	ldr	r3, [pc, #52]	; (800780c <__multadd+0x8c>)
 80077d6:	480e      	ldr	r0, [pc, #56]	; (8007810 <__multadd+0x90>)
 80077d8:	21b5      	movs	r1, #181	; 0xb5
 80077da:	f000 fbb7 	bl	8007f4c <__assert_func>
 80077de:	6922      	ldr	r2, [r4, #16]
 80077e0:	3202      	adds	r2, #2
 80077e2:	f104 010c 	add.w	r1, r4, #12
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	300c      	adds	r0, #12
 80077ea:	f7ff ff59 	bl	80076a0 <memcpy>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffa3 	bl	800773c <_Bfree>
 80077f6:	462c      	mov	r4, r5
 80077f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80077fc:	3601      	adds	r6, #1
 80077fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8007802:	6126      	str	r6, [r4, #16]
 8007804:	4620      	mov	r0, r4
 8007806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800780a:	bf00      	nop
 800780c:	08008bdf 	.word	0x08008bdf
 8007810:	08008bf0 	.word	0x08008bf0

08007814 <__hi0bits>:
 8007814:	0c03      	lsrs	r3, r0, #16
 8007816:	041b      	lsls	r3, r3, #16
 8007818:	b9d3      	cbnz	r3, 8007850 <__hi0bits+0x3c>
 800781a:	0400      	lsls	r0, r0, #16
 800781c:	2310      	movs	r3, #16
 800781e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007822:	bf04      	itt	eq
 8007824:	0200      	lsleq	r0, r0, #8
 8007826:	3308      	addeq	r3, #8
 8007828:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800782c:	bf04      	itt	eq
 800782e:	0100      	lsleq	r0, r0, #4
 8007830:	3304      	addeq	r3, #4
 8007832:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007836:	bf04      	itt	eq
 8007838:	0080      	lsleq	r0, r0, #2
 800783a:	3302      	addeq	r3, #2
 800783c:	2800      	cmp	r0, #0
 800783e:	db05      	blt.n	800784c <__hi0bits+0x38>
 8007840:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007844:	f103 0301 	add.w	r3, r3, #1
 8007848:	bf08      	it	eq
 800784a:	2320      	moveq	r3, #32
 800784c:	4618      	mov	r0, r3
 800784e:	4770      	bx	lr
 8007850:	2300      	movs	r3, #0
 8007852:	e7e4      	b.n	800781e <__hi0bits+0xa>

08007854 <__lo0bits>:
 8007854:	6803      	ldr	r3, [r0, #0]
 8007856:	f013 0207 	ands.w	r2, r3, #7
 800785a:	4601      	mov	r1, r0
 800785c:	d00b      	beq.n	8007876 <__lo0bits+0x22>
 800785e:	07da      	lsls	r2, r3, #31
 8007860:	d424      	bmi.n	80078ac <__lo0bits+0x58>
 8007862:	0798      	lsls	r0, r3, #30
 8007864:	bf49      	itett	mi
 8007866:	085b      	lsrmi	r3, r3, #1
 8007868:	089b      	lsrpl	r3, r3, #2
 800786a:	2001      	movmi	r0, #1
 800786c:	600b      	strmi	r3, [r1, #0]
 800786e:	bf5c      	itt	pl
 8007870:	600b      	strpl	r3, [r1, #0]
 8007872:	2002      	movpl	r0, #2
 8007874:	4770      	bx	lr
 8007876:	b298      	uxth	r0, r3
 8007878:	b9b0      	cbnz	r0, 80078a8 <__lo0bits+0x54>
 800787a:	0c1b      	lsrs	r3, r3, #16
 800787c:	2010      	movs	r0, #16
 800787e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007882:	bf04      	itt	eq
 8007884:	0a1b      	lsreq	r3, r3, #8
 8007886:	3008      	addeq	r0, #8
 8007888:	071a      	lsls	r2, r3, #28
 800788a:	bf04      	itt	eq
 800788c:	091b      	lsreq	r3, r3, #4
 800788e:	3004      	addeq	r0, #4
 8007890:	079a      	lsls	r2, r3, #30
 8007892:	bf04      	itt	eq
 8007894:	089b      	lsreq	r3, r3, #2
 8007896:	3002      	addeq	r0, #2
 8007898:	07da      	lsls	r2, r3, #31
 800789a:	d403      	bmi.n	80078a4 <__lo0bits+0x50>
 800789c:	085b      	lsrs	r3, r3, #1
 800789e:	f100 0001 	add.w	r0, r0, #1
 80078a2:	d005      	beq.n	80078b0 <__lo0bits+0x5c>
 80078a4:	600b      	str	r3, [r1, #0]
 80078a6:	4770      	bx	lr
 80078a8:	4610      	mov	r0, r2
 80078aa:	e7e8      	b.n	800787e <__lo0bits+0x2a>
 80078ac:	2000      	movs	r0, #0
 80078ae:	4770      	bx	lr
 80078b0:	2020      	movs	r0, #32
 80078b2:	4770      	bx	lr

080078b4 <__i2b>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	460c      	mov	r4, r1
 80078b8:	2101      	movs	r1, #1
 80078ba:	f7ff feff 	bl	80076bc <_Balloc>
 80078be:	4602      	mov	r2, r0
 80078c0:	b928      	cbnz	r0, 80078ce <__i2b+0x1a>
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <__i2b+0x24>)
 80078c4:	4805      	ldr	r0, [pc, #20]	; (80078dc <__i2b+0x28>)
 80078c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80078ca:	f000 fb3f 	bl	8007f4c <__assert_func>
 80078ce:	2301      	movs	r3, #1
 80078d0:	6144      	str	r4, [r0, #20]
 80078d2:	6103      	str	r3, [r0, #16]
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	bf00      	nop
 80078d8:	08008bdf 	.word	0x08008bdf
 80078dc:	08008bf0 	.word	0x08008bf0

080078e0 <__multiply>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	4614      	mov	r4, r2
 80078e6:	690a      	ldr	r2, [r1, #16]
 80078e8:	6923      	ldr	r3, [r4, #16]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	bfb8      	it	lt
 80078ee:	460b      	movlt	r3, r1
 80078f0:	460d      	mov	r5, r1
 80078f2:	bfbc      	itt	lt
 80078f4:	4625      	movlt	r5, r4
 80078f6:	461c      	movlt	r4, r3
 80078f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80078fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007900:	68ab      	ldr	r3, [r5, #8]
 8007902:	6869      	ldr	r1, [r5, #4]
 8007904:	eb0a 0709 	add.w	r7, sl, r9
 8007908:	42bb      	cmp	r3, r7
 800790a:	b085      	sub	sp, #20
 800790c:	bfb8      	it	lt
 800790e:	3101      	addlt	r1, #1
 8007910:	f7ff fed4 	bl	80076bc <_Balloc>
 8007914:	b930      	cbnz	r0, 8007924 <__multiply+0x44>
 8007916:	4602      	mov	r2, r0
 8007918:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <__multiply+0x144>)
 800791a:	4843      	ldr	r0, [pc, #268]	; (8007a28 <__multiply+0x148>)
 800791c:	f240 115d 	movw	r1, #349	; 0x15d
 8007920:	f000 fb14 	bl	8007f4c <__assert_func>
 8007924:	f100 0614 	add.w	r6, r0, #20
 8007928:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800792c:	4633      	mov	r3, r6
 800792e:	2200      	movs	r2, #0
 8007930:	4543      	cmp	r3, r8
 8007932:	d31e      	bcc.n	8007972 <__multiply+0x92>
 8007934:	f105 0c14 	add.w	ip, r5, #20
 8007938:	f104 0314 	add.w	r3, r4, #20
 800793c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007940:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007944:	9202      	str	r2, [sp, #8]
 8007946:	ebac 0205 	sub.w	r2, ip, r5
 800794a:	3a15      	subs	r2, #21
 800794c:	f022 0203 	bic.w	r2, r2, #3
 8007950:	3204      	adds	r2, #4
 8007952:	f105 0115 	add.w	r1, r5, #21
 8007956:	458c      	cmp	ip, r1
 8007958:	bf38      	it	cc
 800795a:	2204      	movcc	r2, #4
 800795c:	9201      	str	r2, [sp, #4]
 800795e:	9a02      	ldr	r2, [sp, #8]
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	429a      	cmp	r2, r3
 8007964:	d808      	bhi.n	8007978 <__multiply+0x98>
 8007966:	2f00      	cmp	r7, #0
 8007968:	dc55      	bgt.n	8007a16 <__multiply+0x136>
 800796a:	6107      	str	r7, [r0, #16]
 800796c:	b005      	add	sp, #20
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007972:	f843 2b04 	str.w	r2, [r3], #4
 8007976:	e7db      	b.n	8007930 <__multiply+0x50>
 8007978:	f8b3 a000 	ldrh.w	sl, [r3]
 800797c:	f1ba 0f00 	cmp.w	sl, #0
 8007980:	d020      	beq.n	80079c4 <__multiply+0xe4>
 8007982:	f105 0e14 	add.w	lr, r5, #20
 8007986:	46b1      	mov	r9, r6
 8007988:	2200      	movs	r2, #0
 800798a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800798e:	f8d9 b000 	ldr.w	fp, [r9]
 8007992:	b2a1      	uxth	r1, r4
 8007994:	fa1f fb8b 	uxth.w	fp, fp
 8007998:	fb0a b101 	mla	r1, sl, r1, fp
 800799c:	4411      	add	r1, r2
 800799e:	f8d9 2000 	ldr.w	r2, [r9]
 80079a2:	0c24      	lsrs	r4, r4, #16
 80079a4:	0c12      	lsrs	r2, r2, #16
 80079a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80079aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80079ae:	b289      	uxth	r1, r1
 80079b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80079b4:	45f4      	cmp	ip, lr
 80079b6:	f849 1b04 	str.w	r1, [r9], #4
 80079ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80079be:	d8e4      	bhi.n	800798a <__multiply+0xaa>
 80079c0:	9901      	ldr	r1, [sp, #4]
 80079c2:	5072      	str	r2, [r6, r1]
 80079c4:	9a03      	ldr	r2, [sp, #12]
 80079c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079ca:	3304      	adds	r3, #4
 80079cc:	f1b9 0f00 	cmp.w	r9, #0
 80079d0:	d01f      	beq.n	8007a12 <__multiply+0x132>
 80079d2:	6834      	ldr	r4, [r6, #0]
 80079d4:	f105 0114 	add.w	r1, r5, #20
 80079d8:	46b6      	mov	lr, r6
 80079da:	f04f 0a00 	mov.w	sl, #0
 80079de:	880a      	ldrh	r2, [r1, #0]
 80079e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80079e4:	fb09 b202 	mla	r2, r9, r2, fp
 80079e8:	4492      	add	sl, r2
 80079ea:	b2a4      	uxth	r4, r4
 80079ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80079f0:	f84e 4b04 	str.w	r4, [lr], #4
 80079f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80079f8:	f8be 2000 	ldrh.w	r2, [lr]
 80079fc:	0c24      	lsrs	r4, r4, #16
 80079fe:	fb09 2404 	mla	r4, r9, r4, r2
 8007a02:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007a06:	458c      	cmp	ip, r1
 8007a08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a0c:	d8e7      	bhi.n	80079de <__multiply+0xfe>
 8007a0e:	9a01      	ldr	r2, [sp, #4]
 8007a10:	50b4      	str	r4, [r6, r2]
 8007a12:	3604      	adds	r6, #4
 8007a14:	e7a3      	b.n	800795e <__multiply+0x7e>
 8007a16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1a5      	bne.n	800796a <__multiply+0x8a>
 8007a1e:	3f01      	subs	r7, #1
 8007a20:	e7a1      	b.n	8007966 <__multiply+0x86>
 8007a22:	bf00      	nop
 8007a24:	08008bdf 	.word	0x08008bdf
 8007a28:	08008bf0 	.word	0x08008bf0

08007a2c <__pow5mult>:
 8007a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	4615      	mov	r5, r2
 8007a32:	f012 0203 	ands.w	r2, r2, #3
 8007a36:	4606      	mov	r6, r0
 8007a38:	460f      	mov	r7, r1
 8007a3a:	d007      	beq.n	8007a4c <__pow5mult+0x20>
 8007a3c:	4c25      	ldr	r4, [pc, #148]	; (8007ad4 <__pow5mult+0xa8>)
 8007a3e:	3a01      	subs	r2, #1
 8007a40:	2300      	movs	r3, #0
 8007a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a46:	f7ff fe9b 	bl	8007780 <__multadd>
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	10ad      	asrs	r5, r5, #2
 8007a4e:	d03d      	beq.n	8007acc <__pow5mult+0xa0>
 8007a50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a52:	b97c      	cbnz	r4, 8007a74 <__pow5mult+0x48>
 8007a54:	2010      	movs	r0, #16
 8007a56:	f7ff fe1b 	bl	8007690 <malloc>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6270      	str	r0, [r6, #36]	; 0x24
 8007a5e:	b928      	cbnz	r0, 8007a6c <__pow5mult+0x40>
 8007a60:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <__pow5mult+0xac>)
 8007a62:	481e      	ldr	r0, [pc, #120]	; (8007adc <__pow5mult+0xb0>)
 8007a64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007a68:	f000 fa70 	bl	8007f4c <__assert_func>
 8007a6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a70:	6004      	str	r4, [r0, #0]
 8007a72:	60c4      	str	r4, [r0, #12]
 8007a74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a7c:	b94c      	cbnz	r4, 8007a92 <__pow5mult+0x66>
 8007a7e:	f240 2171 	movw	r1, #625	; 0x271
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ff16 	bl	80078b4 <__i2b>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a8e:	4604      	mov	r4, r0
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	f04f 0900 	mov.w	r9, #0
 8007a96:	07eb      	lsls	r3, r5, #31
 8007a98:	d50a      	bpl.n	8007ab0 <__pow5mult+0x84>
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff ff1e 	bl	80078e0 <__multiply>
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff fe47 	bl	800773c <_Bfree>
 8007aae:	4647      	mov	r7, r8
 8007ab0:	106d      	asrs	r5, r5, #1
 8007ab2:	d00b      	beq.n	8007acc <__pow5mult+0xa0>
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	b938      	cbnz	r0, 8007ac8 <__pow5mult+0x9c>
 8007ab8:	4622      	mov	r2, r4
 8007aba:	4621      	mov	r1, r4
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ff0f 	bl	80078e0 <__multiply>
 8007ac2:	6020      	str	r0, [r4, #0]
 8007ac4:	f8c0 9000 	str.w	r9, [r0]
 8007ac8:	4604      	mov	r4, r0
 8007aca:	e7e4      	b.n	8007a96 <__pow5mult+0x6a>
 8007acc:	4638      	mov	r0, r7
 8007ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08008d40 	.word	0x08008d40
 8007ad8:	08008b69 	.word	0x08008b69
 8007adc:	08008bf0 	.word	0x08008bf0

08007ae0 <__lshift>:
 8007ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	6849      	ldr	r1, [r1, #4]
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	4607      	mov	r7, r0
 8007af2:	4691      	mov	r9, r2
 8007af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007af8:	f108 0601 	add.w	r6, r8, #1
 8007afc:	42b3      	cmp	r3, r6
 8007afe:	db0b      	blt.n	8007b18 <__lshift+0x38>
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff fddb 	bl	80076bc <_Balloc>
 8007b06:	4605      	mov	r5, r0
 8007b08:	b948      	cbnz	r0, 8007b1e <__lshift+0x3e>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <__lshift+0xd0>)
 8007b0e:	4829      	ldr	r0, [pc, #164]	; (8007bb4 <__lshift+0xd4>)
 8007b10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b14:	f000 fa1a 	bl	8007f4c <__assert_func>
 8007b18:	3101      	adds	r1, #1
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	e7ee      	b.n	8007afc <__lshift+0x1c>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f100 0114 	add.w	r1, r0, #20
 8007b24:	f100 0210 	add.w	r2, r0, #16
 8007b28:	4618      	mov	r0, r3
 8007b2a:	4553      	cmp	r3, sl
 8007b2c:	db33      	blt.n	8007b96 <__lshift+0xb6>
 8007b2e:	6920      	ldr	r0, [r4, #16]
 8007b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b34:	f104 0314 	add.w	r3, r4, #20
 8007b38:	f019 091f 	ands.w	r9, r9, #31
 8007b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b44:	d02b      	beq.n	8007b9e <__lshift+0xbe>
 8007b46:	f1c9 0e20 	rsb	lr, r9, #32
 8007b4a:	468a      	mov	sl, r1
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	fa00 f009 	lsl.w	r0, r0, r9
 8007b54:	4302      	orrs	r2, r0
 8007b56:	f84a 2b04 	str.w	r2, [sl], #4
 8007b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b5e:	459c      	cmp	ip, r3
 8007b60:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b64:	d8f3      	bhi.n	8007b4e <__lshift+0x6e>
 8007b66:	ebac 0304 	sub.w	r3, ip, r4
 8007b6a:	3b15      	subs	r3, #21
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
 8007b70:	3304      	adds	r3, #4
 8007b72:	f104 0015 	add.w	r0, r4, #21
 8007b76:	4584      	cmp	ip, r0
 8007b78:	bf38      	it	cc
 8007b7a:	2304      	movcc	r3, #4
 8007b7c:	50ca      	str	r2, [r1, r3]
 8007b7e:	b10a      	cbz	r2, 8007b84 <__lshift+0xa4>
 8007b80:	f108 0602 	add.w	r6, r8, #2
 8007b84:	3e01      	subs	r6, #1
 8007b86:	4638      	mov	r0, r7
 8007b88:	612e      	str	r6, [r5, #16]
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	f7ff fdd6 	bl	800773c <_Bfree>
 8007b90:	4628      	mov	r0, r5
 8007b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b96:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	e7c5      	b.n	8007b2a <__lshift+0x4a>
 8007b9e:	3904      	subs	r1, #4
 8007ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ba8:	459c      	cmp	ip, r3
 8007baa:	d8f9      	bhi.n	8007ba0 <__lshift+0xc0>
 8007bac:	e7ea      	b.n	8007b84 <__lshift+0xa4>
 8007bae:	bf00      	nop
 8007bb0:	08008bdf 	.word	0x08008bdf
 8007bb4:	08008bf0 	.word	0x08008bf0

08007bb8 <__mcmp>:
 8007bb8:	b530      	push	{r4, r5, lr}
 8007bba:	6902      	ldr	r2, [r0, #16]
 8007bbc:	690c      	ldr	r4, [r1, #16]
 8007bbe:	1b12      	subs	r2, r2, r4
 8007bc0:	d10e      	bne.n	8007be0 <__mcmp+0x28>
 8007bc2:	f100 0314 	add.w	r3, r0, #20
 8007bc6:	3114      	adds	r1, #20
 8007bc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007bd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bd8:	42a5      	cmp	r5, r4
 8007bda:	d003      	beq.n	8007be4 <__mcmp+0x2c>
 8007bdc:	d305      	bcc.n	8007bea <__mcmp+0x32>
 8007bde:	2201      	movs	r2, #1
 8007be0:	4610      	mov	r0, r2
 8007be2:	bd30      	pop	{r4, r5, pc}
 8007be4:	4283      	cmp	r3, r0
 8007be6:	d3f3      	bcc.n	8007bd0 <__mcmp+0x18>
 8007be8:	e7fa      	b.n	8007be0 <__mcmp+0x28>
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	e7f7      	b.n	8007be0 <__mcmp+0x28>

08007bf0 <__mdiff>:
 8007bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	4617      	mov	r7, r2
 8007bfe:	f7ff ffdb 	bl	8007bb8 <__mcmp>
 8007c02:	1e05      	subs	r5, r0, #0
 8007c04:	d110      	bne.n	8007c28 <__mdiff+0x38>
 8007c06:	4629      	mov	r1, r5
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7ff fd57 	bl	80076bc <_Balloc>
 8007c0e:	b930      	cbnz	r0, 8007c1e <__mdiff+0x2e>
 8007c10:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <__mdiff+0x108>)
 8007c12:	4602      	mov	r2, r0
 8007c14:	f240 2132 	movw	r1, #562	; 0x232
 8007c18:	4838      	ldr	r0, [pc, #224]	; (8007cfc <__mdiff+0x10c>)
 8007c1a:	f000 f997 	bl	8007f4c <__assert_func>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	bfa4      	itt	ge
 8007c2a:	463b      	movge	r3, r7
 8007c2c:	4627      	movge	r7, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	bfa6      	itte	ge
 8007c34:	461c      	movge	r4, r3
 8007c36:	2500      	movge	r5, #0
 8007c38:	2501      	movlt	r5, #1
 8007c3a:	f7ff fd3f 	bl	80076bc <_Balloc>
 8007c3e:	b920      	cbnz	r0, 8007c4a <__mdiff+0x5a>
 8007c40:	4b2d      	ldr	r3, [pc, #180]	; (8007cf8 <__mdiff+0x108>)
 8007c42:	4602      	mov	r2, r0
 8007c44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007c48:	e7e6      	b.n	8007c18 <__mdiff+0x28>
 8007c4a:	693e      	ldr	r6, [r7, #16]
 8007c4c:	60c5      	str	r5, [r0, #12]
 8007c4e:	6925      	ldr	r5, [r4, #16]
 8007c50:	f107 0114 	add.w	r1, r7, #20
 8007c54:	f104 0914 	add.w	r9, r4, #20
 8007c58:	f100 0e14 	add.w	lr, r0, #20
 8007c5c:	f107 0210 	add.w	r2, r7, #16
 8007c60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007c64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007c68:	46f2      	mov	sl, lr
 8007c6a:	2700      	movs	r7, #0
 8007c6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c74:	fa1f f883 	uxth.w	r8, r3
 8007c78:	fa17 f78b 	uxtah	r7, r7, fp
 8007c7c:	0c1b      	lsrs	r3, r3, #16
 8007c7e:	eba7 0808 	sub.w	r8, r7, r8
 8007c82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c8a:	fa1f f888 	uxth.w	r8, r8
 8007c8e:	141f      	asrs	r7, r3, #16
 8007c90:	454d      	cmp	r5, r9
 8007c92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c96:	f84a 3b04 	str.w	r3, [sl], #4
 8007c9a:	d8e7      	bhi.n	8007c6c <__mdiff+0x7c>
 8007c9c:	1b2b      	subs	r3, r5, r4
 8007c9e:	3b15      	subs	r3, #21
 8007ca0:	f023 0303 	bic.w	r3, r3, #3
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	3415      	adds	r4, #21
 8007ca8:	42a5      	cmp	r5, r4
 8007caa:	bf38      	it	cc
 8007cac:	2304      	movcc	r3, #4
 8007cae:	4419      	add	r1, r3
 8007cb0:	4473      	add	r3, lr
 8007cb2:	469e      	mov	lr, r3
 8007cb4:	460d      	mov	r5, r1
 8007cb6:	4565      	cmp	r5, ip
 8007cb8:	d30e      	bcc.n	8007cd8 <__mdiff+0xe8>
 8007cba:	f10c 0203 	add.w	r2, ip, #3
 8007cbe:	1a52      	subs	r2, r2, r1
 8007cc0:	f022 0203 	bic.w	r2, r2, #3
 8007cc4:	3903      	subs	r1, #3
 8007cc6:	458c      	cmp	ip, r1
 8007cc8:	bf38      	it	cc
 8007cca:	2200      	movcc	r2, #0
 8007ccc:	441a      	add	r2, r3
 8007cce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007cd2:	b17b      	cbz	r3, 8007cf4 <__mdiff+0x104>
 8007cd4:	6106      	str	r6, [r0, #16]
 8007cd6:	e7a5      	b.n	8007c24 <__mdiff+0x34>
 8007cd8:	f855 8b04 	ldr.w	r8, [r5], #4
 8007cdc:	fa17 f488 	uxtah	r4, r7, r8
 8007ce0:	1422      	asrs	r2, r4, #16
 8007ce2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007ce6:	b2a4      	uxth	r4, r4
 8007ce8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007cec:	f84e 4b04 	str.w	r4, [lr], #4
 8007cf0:	1417      	asrs	r7, r2, #16
 8007cf2:	e7e0      	b.n	8007cb6 <__mdiff+0xc6>
 8007cf4:	3e01      	subs	r6, #1
 8007cf6:	e7ea      	b.n	8007cce <__mdiff+0xde>
 8007cf8:	08008bdf 	.word	0x08008bdf
 8007cfc:	08008bf0 	.word	0x08008bf0

08007d00 <__d2b>:
 8007d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d04:	4689      	mov	r9, r1
 8007d06:	2101      	movs	r1, #1
 8007d08:	ec57 6b10 	vmov	r6, r7, d0
 8007d0c:	4690      	mov	r8, r2
 8007d0e:	f7ff fcd5 	bl	80076bc <_Balloc>
 8007d12:	4604      	mov	r4, r0
 8007d14:	b930      	cbnz	r0, 8007d24 <__d2b+0x24>
 8007d16:	4602      	mov	r2, r0
 8007d18:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <__d2b+0xb0>)
 8007d1a:	4826      	ldr	r0, [pc, #152]	; (8007db4 <__d2b+0xb4>)
 8007d1c:	f240 310a 	movw	r1, #778	; 0x30a
 8007d20:	f000 f914 	bl	8007f4c <__assert_func>
 8007d24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d2c:	bb35      	cbnz	r5, 8007d7c <__d2b+0x7c>
 8007d2e:	2e00      	cmp	r6, #0
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	d028      	beq.n	8007d86 <__d2b+0x86>
 8007d34:	4668      	mov	r0, sp
 8007d36:	9600      	str	r6, [sp, #0]
 8007d38:	f7ff fd8c 	bl	8007854 <__lo0bits>
 8007d3c:	9900      	ldr	r1, [sp, #0]
 8007d3e:	b300      	cbz	r0, 8007d82 <__d2b+0x82>
 8007d40:	9a01      	ldr	r2, [sp, #4]
 8007d42:	f1c0 0320 	rsb	r3, r0, #32
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	40c2      	lsrs	r2, r0
 8007d4e:	6163      	str	r3, [r4, #20]
 8007d50:	9201      	str	r2, [sp, #4]
 8007d52:	9b01      	ldr	r3, [sp, #4]
 8007d54:	61a3      	str	r3, [r4, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bf14      	ite	ne
 8007d5a:	2202      	movne	r2, #2
 8007d5c:	2201      	moveq	r2, #1
 8007d5e:	6122      	str	r2, [r4, #16]
 8007d60:	b1d5      	cbz	r5, 8007d98 <__d2b+0x98>
 8007d62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d66:	4405      	add	r5, r0
 8007d68:	f8c9 5000 	str.w	r5, [r9]
 8007d6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d70:	f8c8 0000 	str.w	r0, [r8]
 8007d74:	4620      	mov	r0, r4
 8007d76:	b003      	add	sp, #12
 8007d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d80:	e7d5      	b.n	8007d2e <__d2b+0x2e>
 8007d82:	6161      	str	r1, [r4, #20]
 8007d84:	e7e5      	b.n	8007d52 <__d2b+0x52>
 8007d86:	a801      	add	r0, sp, #4
 8007d88:	f7ff fd64 	bl	8007854 <__lo0bits>
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	6163      	str	r3, [r4, #20]
 8007d90:	2201      	movs	r2, #1
 8007d92:	6122      	str	r2, [r4, #16]
 8007d94:	3020      	adds	r0, #32
 8007d96:	e7e3      	b.n	8007d60 <__d2b+0x60>
 8007d98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007da0:	f8c9 0000 	str.w	r0, [r9]
 8007da4:	6918      	ldr	r0, [r3, #16]
 8007da6:	f7ff fd35 	bl	8007814 <__hi0bits>
 8007daa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dae:	e7df      	b.n	8007d70 <__d2b+0x70>
 8007db0:	08008bdf 	.word	0x08008bdf
 8007db4:	08008bf0 	.word	0x08008bf0

08007db8 <_calloc_r>:
 8007db8:	b513      	push	{r0, r1, r4, lr}
 8007dba:	434a      	muls	r2, r1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	9201      	str	r2, [sp, #4]
 8007dc0:	f000 f85a 	bl	8007e78 <_malloc_r>
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	b118      	cbz	r0, 8007dd0 <_calloc_r+0x18>
 8007dc8:	9a01      	ldr	r2, [sp, #4]
 8007dca:	2100      	movs	r1, #0
 8007dcc:	f7fe f972 	bl	80060b4 <memset>
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	b002      	add	sp, #8
 8007dd4:	bd10      	pop	{r4, pc}
	...

08007dd8 <_free_r>:
 8007dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dda:	2900      	cmp	r1, #0
 8007ddc:	d048      	beq.n	8007e70 <_free_r+0x98>
 8007dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de2:	9001      	str	r0, [sp, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dea:	bfb8      	it	lt
 8007dec:	18e4      	addlt	r4, r4, r3
 8007dee:	f000 f8ef 	bl	8007fd0 <__malloc_lock>
 8007df2:	4a20      	ldr	r2, [pc, #128]	; (8007e74 <_free_r+0x9c>)
 8007df4:	9801      	ldr	r0, [sp, #4]
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	4615      	mov	r5, r2
 8007dfa:	b933      	cbnz	r3, 8007e0a <_free_r+0x32>
 8007dfc:	6063      	str	r3, [r4, #4]
 8007dfe:	6014      	str	r4, [r2, #0]
 8007e00:	b003      	add	sp, #12
 8007e02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e06:	f000 b8e9 	b.w	8007fdc <__malloc_unlock>
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	d90b      	bls.n	8007e26 <_free_r+0x4e>
 8007e0e:	6821      	ldr	r1, [r4, #0]
 8007e10:	1862      	adds	r2, r4, r1
 8007e12:	4293      	cmp	r3, r2
 8007e14:	bf04      	itt	eq
 8007e16:	681a      	ldreq	r2, [r3, #0]
 8007e18:	685b      	ldreq	r3, [r3, #4]
 8007e1a:	6063      	str	r3, [r4, #4]
 8007e1c:	bf04      	itt	eq
 8007e1e:	1852      	addeq	r2, r2, r1
 8007e20:	6022      	streq	r2, [r4, #0]
 8007e22:	602c      	str	r4, [r5, #0]
 8007e24:	e7ec      	b.n	8007e00 <_free_r+0x28>
 8007e26:	461a      	mov	r2, r3
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	b10b      	cbz	r3, 8007e30 <_free_r+0x58>
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	d9fa      	bls.n	8007e26 <_free_r+0x4e>
 8007e30:	6811      	ldr	r1, [r2, #0]
 8007e32:	1855      	adds	r5, r2, r1
 8007e34:	42a5      	cmp	r5, r4
 8007e36:	d10b      	bne.n	8007e50 <_free_r+0x78>
 8007e38:	6824      	ldr	r4, [r4, #0]
 8007e3a:	4421      	add	r1, r4
 8007e3c:	1854      	adds	r4, r2, r1
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	d1dd      	bne.n	8007e00 <_free_r+0x28>
 8007e44:	681c      	ldr	r4, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	6053      	str	r3, [r2, #4]
 8007e4a:	4421      	add	r1, r4
 8007e4c:	6011      	str	r1, [r2, #0]
 8007e4e:	e7d7      	b.n	8007e00 <_free_r+0x28>
 8007e50:	d902      	bls.n	8007e58 <_free_r+0x80>
 8007e52:	230c      	movs	r3, #12
 8007e54:	6003      	str	r3, [r0, #0]
 8007e56:	e7d3      	b.n	8007e00 <_free_r+0x28>
 8007e58:	6825      	ldr	r5, [r4, #0]
 8007e5a:	1961      	adds	r1, r4, r5
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	bf04      	itt	eq
 8007e60:	6819      	ldreq	r1, [r3, #0]
 8007e62:	685b      	ldreq	r3, [r3, #4]
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	bf04      	itt	eq
 8007e68:	1949      	addeq	r1, r1, r5
 8007e6a:	6021      	streq	r1, [r4, #0]
 8007e6c:	6054      	str	r4, [r2, #4]
 8007e6e:	e7c7      	b.n	8007e00 <_free_r+0x28>
 8007e70:	b003      	add	sp, #12
 8007e72:	bd30      	pop	{r4, r5, pc}
 8007e74:	20000200 	.word	0x20000200

08007e78 <_malloc_r>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	1ccd      	adds	r5, r1, #3
 8007e7c:	f025 0503 	bic.w	r5, r5, #3
 8007e80:	3508      	adds	r5, #8
 8007e82:	2d0c      	cmp	r5, #12
 8007e84:	bf38      	it	cc
 8007e86:	250c      	movcc	r5, #12
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	db01      	blt.n	8007e92 <_malloc_r+0x1a>
 8007e8e:	42a9      	cmp	r1, r5
 8007e90:	d903      	bls.n	8007e9a <_malloc_r+0x22>
 8007e92:	230c      	movs	r3, #12
 8007e94:	6033      	str	r3, [r6, #0]
 8007e96:	2000      	movs	r0, #0
 8007e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9a:	f000 f899 	bl	8007fd0 <__malloc_lock>
 8007e9e:	4921      	ldr	r1, [pc, #132]	; (8007f24 <_malloc_r+0xac>)
 8007ea0:	680a      	ldr	r2, [r1, #0]
 8007ea2:	4614      	mov	r4, r2
 8007ea4:	b99c      	cbnz	r4, 8007ece <_malloc_r+0x56>
 8007ea6:	4f20      	ldr	r7, [pc, #128]	; (8007f28 <_malloc_r+0xb0>)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	b923      	cbnz	r3, 8007eb6 <_malloc_r+0x3e>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f83c 	bl	8007f2c <_sbrk_r>
 8007eb4:	6038      	str	r0, [r7, #0]
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f000 f837 	bl	8007f2c <_sbrk_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d123      	bne.n	8007f0a <_malloc_r+0x92>
 8007ec2:	230c      	movs	r3, #12
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 f888 	bl	8007fdc <__malloc_unlock>
 8007ecc:	e7e3      	b.n	8007e96 <_malloc_r+0x1e>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	1b5b      	subs	r3, r3, r5
 8007ed2:	d417      	bmi.n	8007f04 <_malloc_r+0x8c>
 8007ed4:	2b0b      	cmp	r3, #11
 8007ed6:	d903      	bls.n	8007ee0 <_malloc_r+0x68>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	441c      	add	r4, r3
 8007edc:	6025      	str	r5, [r4, #0]
 8007ede:	e004      	b.n	8007eea <_malloc_r+0x72>
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	42a2      	cmp	r2, r4
 8007ee4:	bf0c      	ite	eq
 8007ee6:	600b      	streq	r3, [r1, #0]
 8007ee8:	6053      	strne	r3, [r2, #4]
 8007eea:	4630      	mov	r0, r6
 8007eec:	f000 f876 	bl	8007fdc <__malloc_unlock>
 8007ef0:	f104 000b 	add.w	r0, r4, #11
 8007ef4:	1d23      	adds	r3, r4, #4
 8007ef6:	f020 0007 	bic.w	r0, r0, #7
 8007efa:	1ac2      	subs	r2, r0, r3
 8007efc:	d0cc      	beq.n	8007e98 <_malloc_r+0x20>
 8007efe:	1a1b      	subs	r3, r3, r0
 8007f00:	50a3      	str	r3, [r4, r2]
 8007f02:	e7c9      	b.n	8007e98 <_malloc_r+0x20>
 8007f04:	4622      	mov	r2, r4
 8007f06:	6864      	ldr	r4, [r4, #4]
 8007f08:	e7cc      	b.n	8007ea4 <_malloc_r+0x2c>
 8007f0a:	1cc4      	adds	r4, r0, #3
 8007f0c:	f024 0403 	bic.w	r4, r4, #3
 8007f10:	42a0      	cmp	r0, r4
 8007f12:	d0e3      	beq.n	8007edc <_malloc_r+0x64>
 8007f14:	1a21      	subs	r1, r4, r0
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f808 	bl	8007f2c <_sbrk_r>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d1dd      	bne.n	8007edc <_malloc_r+0x64>
 8007f20:	e7cf      	b.n	8007ec2 <_malloc_r+0x4a>
 8007f22:	bf00      	nop
 8007f24:	20000200 	.word	0x20000200
 8007f28:	20000204 	.word	0x20000204

08007f2c <_sbrk_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d06      	ldr	r5, [pc, #24]	; (8007f48 <_sbrk_r+0x1c>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	602b      	str	r3, [r5, #0]
 8007f38:	f7fa fa7e 	bl	8002438 <_sbrk>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_sbrk_r+0x1a>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_sbrk_r+0x1a>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	200003b4 	.word	0x200003b4

08007f4c <__assert_func>:
 8007f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f4e:	4614      	mov	r4, r2
 8007f50:	461a      	mov	r2, r3
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <__assert_func+0x2c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4605      	mov	r5, r0
 8007f58:	68d8      	ldr	r0, [r3, #12]
 8007f5a:	b14c      	cbz	r4, 8007f70 <__assert_func+0x24>
 8007f5c:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <__assert_func+0x30>)
 8007f5e:	9100      	str	r1, [sp, #0]
 8007f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f64:	4906      	ldr	r1, [pc, #24]	; (8007f80 <__assert_func+0x34>)
 8007f66:	462b      	mov	r3, r5
 8007f68:	f000 f80e 	bl	8007f88 <fiprintf>
 8007f6c:	f000 fa64 	bl	8008438 <abort>
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <__assert_func+0x38>)
 8007f72:	461c      	mov	r4, r3
 8007f74:	e7f3      	b.n	8007f5e <__assert_func+0x12>
 8007f76:	bf00      	nop
 8007f78:	2000000c 	.word	0x2000000c
 8007f7c:	08008d4c 	.word	0x08008d4c
 8007f80:	08008d59 	.word	0x08008d59
 8007f84:	08008d87 	.word	0x08008d87

08007f88 <fiprintf>:
 8007f88:	b40e      	push	{r1, r2, r3}
 8007f8a:	b503      	push	{r0, r1, lr}
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	ab03      	add	r3, sp, #12
 8007f90:	4805      	ldr	r0, [pc, #20]	; (8007fa8 <fiprintf+0x20>)
 8007f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f96:	6800      	ldr	r0, [r0, #0]
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	f000 f84f 	bl	800803c <_vfiprintf_r>
 8007f9e:	b002      	add	sp, #8
 8007fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa4:	b003      	add	sp, #12
 8007fa6:	4770      	bx	lr
 8007fa8:	2000000c 	.word	0x2000000c

08007fac <__ascii_mbtowc>:
 8007fac:	b082      	sub	sp, #8
 8007fae:	b901      	cbnz	r1, 8007fb2 <__ascii_mbtowc+0x6>
 8007fb0:	a901      	add	r1, sp, #4
 8007fb2:	b142      	cbz	r2, 8007fc6 <__ascii_mbtowc+0x1a>
 8007fb4:	b14b      	cbz	r3, 8007fca <__ascii_mbtowc+0x1e>
 8007fb6:	7813      	ldrb	r3, [r2, #0]
 8007fb8:	600b      	str	r3, [r1, #0]
 8007fba:	7812      	ldrb	r2, [r2, #0]
 8007fbc:	1e10      	subs	r0, r2, #0
 8007fbe:	bf18      	it	ne
 8007fc0:	2001      	movne	r0, #1
 8007fc2:	b002      	add	sp, #8
 8007fc4:	4770      	bx	lr
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	e7fb      	b.n	8007fc2 <__ascii_mbtowc+0x16>
 8007fca:	f06f 0001 	mvn.w	r0, #1
 8007fce:	e7f8      	b.n	8007fc2 <__ascii_mbtowc+0x16>

08007fd0 <__malloc_lock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__malloc_lock+0x8>)
 8007fd2:	f000 bbf1 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	200003bc 	.word	0x200003bc

08007fdc <__malloc_unlock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__malloc_unlock+0x8>)
 8007fde:	f000 bbec 	b.w	80087ba <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	200003bc 	.word	0x200003bc

08007fe8 <__sfputc_r>:
 8007fe8:	6893      	ldr	r3, [r2, #8]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	b410      	push	{r4}
 8007ff0:	6093      	str	r3, [r2, #8]
 8007ff2:	da08      	bge.n	8008006 <__sfputc_r+0x1e>
 8007ff4:	6994      	ldr	r4, [r2, #24]
 8007ff6:	42a3      	cmp	r3, r4
 8007ff8:	db01      	blt.n	8007ffe <__sfputc_r+0x16>
 8007ffa:	290a      	cmp	r1, #10
 8007ffc:	d103      	bne.n	8008006 <__sfputc_r+0x1e>
 8007ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008002:	f000 b94b 	b.w	800829c <__swbuf_r>
 8008006:	6813      	ldr	r3, [r2, #0]
 8008008:	1c58      	adds	r0, r3, #1
 800800a:	6010      	str	r0, [r2, #0]
 800800c:	7019      	strb	r1, [r3, #0]
 800800e:	4608      	mov	r0, r1
 8008010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008014:	4770      	bx	lr

08008016 <__sfputs_r>:
 8008016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008018:	4606      	mov	r6, r0
 800801a:	460f      	mov	r7, r1
 800801c:	4614      	mov	r4, r2
 800801e:	18d5      	adds	r5, r2, r3
 8008020:	42ac      	cmp	r4, r5
 8008022:	d101      	bne.n	8008028 <__sfputs_r+0x12>
 8008024:	2000      	movs	r0, #0
 8008026:	e007      	b.n	8008038 <__sfputs_r+0x22>
 8008028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802c:	463a      	mov	r2, r7
 800802e:	4630      	mov	r0, r6
 8008030:	f7ff ffda 	bl	8007fe8 <__sfputc_r>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d1f3      	bne.n	8008020 <__sfputs_r+0xa>
 8008038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800803c <_vfiprintf_r>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	460d      	mov	r5, r1
 8008042:	b09d      	sub	sp, #116	; 0x74
 8008044:	4614      	mov	r4, r2
 8008046:	4698      	mov	r8, r3
 8008048:	4606      	mov	r6, r0
 800804a:	b118      	cbz	r0, 8008054 <_vfiprintf_r+0x18>
 800804c:	6983      	ldr	r3, [r0, #24]
 800804e:	b90b      	cbnz	r3, 8008054 <_vfiprintf_r+0x18>
 8008050:	f000 fb14 	bl	800867c <__sinit>
 8008054:	4b89      	ldr	r3, [pc, #548]	; (800827c <_vfiprintf_r+0x240>)
 8008056:	429d      	cmp	r5, r3
 8008058:	d11b      	bne.n	8008092 <_vfiprintf_r+0x56>
 800805a:	6875      	ldr	r5, [r6, #4]
 800805c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800805e:	07d9      	lsls	r1, r3, #31
 8008060:	d405      	bmi.n	800806e <_vfiprintf_r+0x32>
 8008062:	89ab      	ldrh	r3, [r5, #12]
 8008064:	059a      	lsls	r2, r3, #22
 8008066:	d402      	bmi.n	800806e <_vfiprintf_r+0x32>
 8008068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800806a:	f000 fba5 	bl	80087b8 <__retarget_lock_acquire_recursive>
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	071b      	lsls	r3, r3, #28
 8008072:	d501      	bpl.n	8008078 <_vfiprintf_r+0x3c>
 8008074:	692b      	ldr	r3, [r5, #16]
 8008076:	b9eb      	cbnz	r3, 80080b4 <_vfiprintf_r+0x78>
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f000 f96e 	bl	800835c <__swsetup_r>
 8008080:	b1c0      	cbz	r0, 80080b4 <_vfiprintf_r+0x78>
 8008082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008084:	07dc      	lsls	r4, r3, #31
 8008086:	d50e      	bpl.n	80080a6 <_vfiprintf_r+0x6a>
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	b01d      	add	sp, #116	; 0x74
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	4b7b      	ldr	r3, [pc, #492]	; (8008280 <_vfiprintf_r+0x244>)
 8008094:	429d      	cmp	r5, r3
 8008096:	d101      	bne.n	800809c <_vfiprintf_r+0x60>
 8008098:	68b5      	ldr	r5, [r6, #8]
 800809a:	e7df      	b.n	800805c <_vfiprintf_r+0x20>
 800809c:	4b79      	ldr	r3, [pc, #484]	; (8008284 <_vfiprintf_r+0x248>)
 800809e:	429d      	cmp	r5, r3
 80080a0:	bf08      	it	eq
 80080a2:	68f5      	ldreq	r5, [r6, #12]
 80080a4:	e7da      	b.n	800805c <_vfiprintf_r+0x20>
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	0598      	lsls	r0, r3, #22
 80080aa:	d4ed      	bmi.n	8008088 <_vfiprintf_r+0x4c>
 80080ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ae:	f000 fb84 	bl	80087ba <__retarget_lock_release_recursive>
 80080b2:	e7e9      	b.n	8008088 <_vfiprintf_r+0x4c>
 80080b4:	2300      	movs	r3, #0
 80080b6:	9309      	str	r3, [sp, #36]	; 0x24
 80080b8:	2320      	movs	r3, #32
 80080ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080be:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c2:	2330      	movs	r3, #48	; 0x30
 80080c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008288 <_vfiprintf_r+0x24c>
 80080c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080cc:	f04f 0901 	mov.w	r9, #1
 80080d0:	4623      	mov	r3, r4
 80080d2:	469a      	mov	sl, r3
 80080d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d8:	b10a      	cbz	r2, 80080de <_vfiprintf_r+0xa2>
 80080da:	2a25      	cmp	r2, #37	; 0x25
 80080dc:	d1f9      	bne.n	80080d2 <_vfiprintf_r+0x96>
 80080de:	ebba 0b04 	subs.w	fp, sl, r4
 80080e2:	d00b      	beq.n	80080fc <_vfiprintf_r+0xc0>
 80080e4:	465b      	mov	r3, fp
 80080e6:	4622      	mov	r2, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff ff93 	bl	8008016 <__sfputs_r>
 80080f0:	3001      	adds	r0, #1
 80080f2:	f000 80aa 	beq.w	800824a <_vfiprintf_r+0x20e>
 80080f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f8:	445a      	add	r2, fp
 80080fa:	9209      	str	r2, [sp, #36]	; 0x24
 80080fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 80a2 	beq.w	800824a <_vfiprintf_r+0x20e>
 8008106:	2300      	movs	r3, #0
 8008108:	f04f 32ff 	mov.w	r2, #4294967295
 800810c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008110:	f10a 0a01 	add.w	sl, sl, #1
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800811c:	931a      	str	r3, [sp, #104]	; 0x68
 800811e:	4654      	mov	r4, sl
 8008120:	2205      	movs	r2, #5
 8008122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008126:	4858      	ldr	r0, [pc, #352]	; (8008288 <_vfiprintf_r+0x24c>)
 8008128:	f7f8 f86a 	bl	8000200 <memchr>
 800812c:	9a04      	ldr	r2, [sp, #16]
 800812e:	b9d8      	cbnz	r0, 8008168 <_vfiprintf_r+0x12c>
 8008130:	06d1      	lsls	r1, r2, #27
 8008132:	bf44      	itt	mi
 8008134:	2320      	movmi	r3, #32
 8008136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813a:	0713      	lsls	r3, r2, #28
 800813c:	bf44      	itt	mi
 800813e:	232b      	movmi	r3, #43	; 0x2b
 8008140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008144:	f89a 3000 	ldrb.w	r3, [sl]
 8008148:	2b2a      	cmp	r3, #42	; 0x2a
 800814a:	d015      	beq.n	8008178 <_vfiprintf_r+0x13c>
 800814c:	9a07      	ldr	r2, [sp, #28]
 800814e:	4654      	mov	r4, sl
 8008150:	2000      	movs	r0, #0
 8008152:	f04f 0c0a 	mov.w	ip, #10
 8008156:	4621      	mov	r1, r4
 8008158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815c:	3b30      	subs	r3, #48	; 0x30
 800815e:	2b09      	cmp	r3, #9
 8008160:	d94e      	bls.n	8008200 <_vfiprintf_r+0x1c4>
 8008162:	b1b0      	cbz	r0, 8008192 <_vfiprintf_r+0x156>
 8008164:	9207      	str	r2, [sp, #28]
 8008166:	e014      	b.n	8008192 <_vfiprintf_r+0x156>
 8008168:	eba0 0308 	sub.w	r3, r0, r8
 800816c:	fa09 f303 	lsl.w	r3, r9, r3
 8008170:	4313      	orrs	r3, r2
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	46a2      	mov	sl, r4
 8008176:	e7d2      	b.n	800811e <_vfiprintf_r+0xe2>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	1d19      	adds	r1, r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	9103      	str	r1, [sp, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	bfbb      	ittet	lt
 8008184:	425b      	neglt	r3, r3
 8008186:	f042 0202 	orrlt.w	r2, r2, #2
 800818a:	9307      	strge	r3, [sp, #28]
 800818c:	9307      	strlt	r3, [sp, #28]
 800818e:	bfb8      	it	lt
 8008190:	9204      	strlt	r2, [sp, #16]
 8008192:	7823      	ldrb	r3, [r4, #0]
 8008194:	2b2e      	cmp	r3, #46	; 0x2e
 8008196:	d10c      	bne.n	80081b2 <_vfiprintf_r+0x176>
 8008198:	7863      	ldrb	r3, [r4, #1]
 800819a:	2b2a      	cmp	r3, #42	; 0x2a
 800819c:	d135      	bne.n	800820a <_vfiprintf_r+0x1ce>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	1d1a      	adds	r2, r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	9203      	str	r2, [sp, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfb8      	it	lt
 80081aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80081ae:	3402      	adds	r4, #2
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008298 <_vfiprintf_r+0x25c>
 80081b6:	7821      	ldrb	r1, [r4, #0]
 80081b8:	2203      	movs	r2, #3
 80081ba:	4650      	mov	r0, sl
 80081bc:	f7f8 f820 	bl	8000200 <memchr>
 80081c0:	b140      	cbz	r0, 80081d4 <_vfiprintf_r+0x198>
 80081c2:	2340      	movs	r3, #64	; 0x40
 80081c4:	eba0 000a 	sub.w	r0, r0, sl
 80081c8:	fa03 f000 	lsl.w	r0, r3, r0
 80081cc:	9b04      	ldr	r3, [sp, #16]
 80081ce:	4303      	orrs	r3, r0
 80081d0:	3401      	adds	r4, #1
 80081d2:	9304      	str	r3, [sp, #16]
 80081d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d8:	482c      	ldr	r0, [pc, #176]	; (800828c <_vfiprintf_r+0x250>)
 80081da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081de:	2206      	movs	r2, #6
 80081e0:	f7f8 f80e 	bl	8000200 <memchr>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d03f      	beq.n	8008268 <_vfiprintf_r+0x22c>
 80081e8:	4b29      	ldr	r3, [pc, #164]	; (8008290 <_vfiprintf_r+0x254>)
 80081ea:	bb1b      	cbnz	r3, 8008234 <_vfiprintf_r+0x1f8>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	3307      	adds	r3, #7
 80081f0:	f023 0307 	bic.w	r3, r3, #7
 80081f4:	3308      	adds	r3, #8
 80081f6:	9303      	str	r3, [sp, #12]
 80081f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fa:	443b      	add	r3, r7
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
 80081fe:	e767      	b.n	80080d0 <_vfiprintf_r+0x94>
 8008200:	fb0c 3202 	mla	r2, ip, r2, r3
 8008204:	460c      	mov	r4, r1
 8008206:	2001      	movs	r0, #1
 8008208:	e7a5      	b.n	8008156 <_vfiprintf_r+0x11a>
 800820a:	2300      	movs	r3, #0
 800820c:	3401      	adds	r4, #1
 800820e:	9305      	str	r3, [sp, #20]
 8008210:	4619      	mov	r1, r3
 8008212:	f04f 0c0a 	mov.w	ip, #10
 8008216:	4620      	mov	r0, r4
 8008218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821c:	3a30      	subs	r2, #48	; 0x30
 800821e:	2a09      	cmp	r2, #9
 8008220:	d903      	bls.n	800822a <_vfiprintf_r+0x1ee>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0c5      	beq.n	80081b2 <_vfiprintf_r+0x176>
 8008226:	9105      	str	r1, [sp, #20]
 8008228:	e7c3      	b.n	80081b2 <_vfiprintf_r+0x176>
 800822a:	fb0c 2101 	mla	r1, ip, r1, r2
 800822e:	4604      	mov	r4, r0
 8008230:	2301      	movs	r3, #1
 8008232:	e7f0      	b.n	8008216 <_vfiprintf_r+0x1da>
 8008234:	ab03      	add	r3, sp, #12
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	462a      	mov	r2, r5
 800823a:	4b16      	ldr	r3, [pc, #88]	; (8008294 <_vfiprintf_r+0x258>)
 800823c:	a904      	add	r1, sp, #16
 800823e:	4630      	mov	r0, r6
 8008240:	f7fd ffe0 	bl	8006204 <_printf_float>
 8008244:	4607      	mov	r7, r0
 8008246:	1c78      	adds	r0, r7, #1
 8008248:	d1d6      	bne.n	80081f8 <_vfiprintf_r+0x1bc>
 800824a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800824c:	07d9      	lsls	r1, r3, #31
 800824e:	d405      	bmi.n	800825c <_vfiprintf_r+0x220>
 8008250:	89ab      	ldrh	r3, [r5, #12]
 8008252:	059a      	lsls	r2, r3, #22
 8008254:	d402      	bmi.n	800825c <_vfiprintf_r+0x220>
 8008256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008258:	f000 faaf 	bl	80087ba <__retarget_lock_release_recursive>
 800825c:	89ab      	ldrh	r3, [r5, #12]
 800825e:	065b      	lsls	r3, r3, #25
 8008260:	f53f af12 	bmi.w	8008088 <_vfiprintf_r+0x4c>
 8008264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008266:	e711      	b.n	800808c <_vfiprintf_r+0x50>
 8008268:	ab03      	add	r3, sp, #12
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	462a      	mov	r2, r5
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <_vfiprintf_r+0x258>)
 8008270:	a904      	add	r1, sp, #16
 8008272:	4630      	mov	r0, r6
 8008274:	f7fe fa6a 	bl	800674c <_printf_i>
 8008278:	e7e4      	b.n	8008244 <_vfiprintf_r+0x208>
 800827a:	bf00      	nop
 800827c:	08008ec4 	.word	0x08008ec4
 8008280:	08008ee4 	.word	0x08008ee4
 8008284:	08008ea4 	.word	0x08008ea4
 8008288:	08008d92 	.word	0x08008d92
 800828c:	08008d9c 	.word	0x08008d9c
 8008290:	08006205 	.word	0x08006205
 8008294:	08008017 	.word	0x08008017
 8008298:	08008d98 	.word	0x08008d98

0800829c <__swbuf_r>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	460e      	mov	r6, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	4605      	mov	r5, r0
 80082a4:	b118      	cbz	r0, 80082ae <__swbuf_r+0x12>
 80082a6:	6983      	ldr	r3, [r0, #24]
 80082a8:	b90b      	cbnz	r3, 80082ae <__swbuf_r+0x12>
 80082aa:	f000 f9e7 	bl	800867c <__sinit>
 80082ae:	4b21      	ldr	r3, [pc, #132]	; (8008334 <__swbuf_r+0x98>)
 80082b0:	429c      	cmp	r4, r3
 80082b2:	d12b      	bne.n	800830c <__swbuf_r+0x70>
 80082b4:	686c      	ldr	r4, [r5, #4]
 80082b6:	69a3      	ldr	r3, [r4, #24]
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	071a      	lsls	r2, r3, #28
 80082be:	d52f      	bpl.n	8008320 <__swbuf_r+0x84>
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	b36b      	cbz	r3, 8008320 <__swbuf_r+0x84>
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	6820      	ldr	r0, [r4, #0]
 80082c8:	1ac0      	subs	r0, r0, r3
 80082ca:	6963      	ldr	r3, [r4, #20]
 80082cc:	b2f6      	uxtb	r6, r6
 80082ce:	4283      	cmp	r3, r0
 80082d0:	4637      	mov	r7, r6
 80082d2:	dc04      	bgt.n	80082de <__swbuf_r+0x42>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4628      	mov	r0, r5
 80082d8:	f000 f93c 	bl	8008554 <_fflush_r>
 80082dc:	bb30      	cbnz	r0, 800832c <__swbuf_r+0x90>
 80082de:	68a3      	ldr	r3, [r4, #8]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	60a3      	str	r3, [r4, #8]
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	6022      	str	r2, [r4, #0]
 80082ea:	701e      	strb	r6, [r3, #0]
 80082ec:	6963      	ldr	r3, [r4, #20]
 80082ee:	3001      	adds	r0, #1
 80082f0:	4283      	cmp	r3, r0
 80082f2:	d004      	beq.n	80082fe <__swbuf_r+0x62>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	07db      	lsls	r3, r3, #31
 80082f8:	d506      	bpl.n	8008308 <__swbuf_r+0x6c>
 80082fa:	2e0a      	cmp	r6, #10
 80082fc:	d104      	bne.n	8008308 <__swbuf_r+0x6c>
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f927 	bl	8008554 <_fflush_r>
 8008306:	b988      	cbnz	r0, 800832c <__swbuf_r+0x90>
 8008308:	4638      	mov	r0, r7
 800830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <__swbuf_r+0x9c>)
 800830e:	429c      	cmp	r4, r3
 8008310:	d101      	bne.n	8008316 <__swbuf_r+0x7a>
 8008312:	68ac      	ldr	r4, [r5, #8]
 8008314:	e7cf      	b.n	80082b6 <__swbuf_r+0x1a>
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <__swbuf_r+0xa0>)
 8008318:	429c      	cmp	r4, r3
 800831a:	bf08      	it	eq
 800831c:	68ec      	ldreq	r4, [r5, #12]
 800831e:	e7ca      	b.n	80082b6 <__swbuf_r+0x1a>
 8008320:	4621      	mov	r1, r4
 8008322:	4628      	mov	r0, r5
 8008324:	f000 f81a 	bl	800835c <__swsetup_r>
 8008328:	2800      	cmp	r0, #0
 800832a:	d0cb      	beq.n	80082c4 <__swbuf_r+0x28>
 800832c:	f04f 37ff 	mov.w	r7, #4294967295
 8008330:	e7ea      	b.n	8008308 <__swbuf_r+0x6c>
 8008332:	bf00      	nop
 8008334:	08008ec4 	.word	0x08008ec4
 8008338:	08008ee4 	.word	0x08008ee4
 800833c:	08008ea4 	.word	0x08008ea4

08008340 <__ascii_wctomb>:
 8008340:	b149      	cbz	r1, 8008356 <__ascii_wctomb+0x16>
 8008342:	2aff      	cmp	r2, #255	; 0xff
 8008344:	bf85      	ittet	hi
 8008346:	238a      	movhi	r3, #138	; 0x8a
 8008348:	6003      	strhi	r3, [r0, #0]
 800834a:	700a      	strbls	r2, [r1, #0]
 800834c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008350:	bf98      	it	ls
 8008352:	2001      	movls	r0, #1
 8008354:	4770      	bx	lr
 8008356:	4608      	mov	r0, r1
 8008358:	4770      	bx	lr
	...

0800835c <__swsetup_r>:
 800835c:	4b32      	ldr	r3, [pc, #200]	; (8008428 <__swsetup_r+0xcc>)
 800835e:	b570      	push	{r4, r5, r6, lr}
 8008360:	681d      	ldr	r5, [r3, #0]
 8008362:	4606      	mov	r6, r0
 8008364:	460c      	mov	r4, r1
 8008366:	b125      	cbz	r5, 8008372 <__swsetup_r+0x16>
 8008368:	69ab      	ldr	r3, [r5, #24]
 800836a:	b913      	cbnz	r3, 8008372 <__swsetup_r+0x16>
 800836c:	4628      	mov	r0, r5
 800836e:	f000 f985 	bl	800867c <__sinit>
 8008372:	4b2e      	ldr	r3, [pc, #184]	; (800842c <__swsetup_r+0xd0>)
 8008374:	429c      	cmp	r4, r3
 8008376:	d10f      	bne.n	8008398 <__swsetup_r+0x3c>
 8008378:	686c      	ldr	r4, [r5, #4]
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008380:	0719      	lsls	r1, r3, #28
 8008382:	d42c      	bmi.n	80083de <__swsetup_r+0x82>
 8008384:	06dd      	lsls	r5, r3, #27
 8008386:	d411      	bmi.n	80083ac <__swsetup_r+0x50>
 8008388:	2309      	movs	r3, #9
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	f04f 30ff 	mov.w	r0, #4294967295
 8008396:	e03e      	b.n	8008416 <__swsetup_r+0xba>
 8008398:	4b25      	ldr	r3, [pc, #148]	; (8008430 <__swsetup_r+0xd4>)
 800839a:	429c      	cmp	r4, r3
 800839c:	d101      	bne.n	80083a2 <__swsetup_r+0x46>
 800839e:	68ac      	ldr	r4, [r5, #8]
 80083a0:	e7eb      	b.n	800837a <__swsetup_r+0x1e>
 80083a2:	4b24      	ldr	r3, [pc, #144]	; (8008434 <__swsetup_r+0xd8>)
 80083a4:	429c      	cmp	r4, r3
 80083a6:	bf08      	it	eq
 80083a8:	68ec      	ldreq	r4, [r5, #12]
 80083aa:	e7e6      	b.n	800837a <__swsetup_r+0x1e>
 80083ac:	0758      	lsls	r0, r3, #29
 80083ae:	d512      	bpl.n	80083d6 <__swsetup_r+0x7a>
 80083b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b2:	b141      	cbz	r1, 80083c6 <__swsetup_r+0x6a>
 80083b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083b8:	4299      	cmp	r1, r3
 80083ba:	d002      	beq.n	80083c2 <__swsetup_r+0x66>
 80083bc:	4630      	mov	r0, r6
 80083be:	f7ff fd0b 	bl	8007dd8 <_free_r>
 80083c2:	2300      	movs	r3, #0
 80083c4:	6363      	str	r3, [r4, #52]	; 0x34
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	2300      	movs	r3, #0
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f043 0308 	orr.w	r3, r3, #8
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	b94b      	cbnz	r3, 80083f6 <__swsetup_r+0x9a>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ec:	d003      	beq.n	80083f6 <__swsetup_r+0x9a>
 80083ee:	4621      	mov	r1, r4
 80083f0:	4630      	mov	r0, r6
 80083f2:	f000 fa07 	bl	8008804 <__smakebuf_r>
 80083f6:	89a0      	ldrh	r0, [r4, #12]
 80083f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083fc:	f010 0301 	ands.w	r3, r0, #1
 8008400:	d00a      	beq.n	8008418 <__swsetup_r+0xbc>
 8008402:	2300      	movs	r3, #0
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	6963      	ldr	r3, [r4, #20]
 8008408:	425b      	negs	r3, r3
 800840a:	61a3      	str	r3, [r4, #24]
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	b943      	cbnz	r3, 8008422 <__swsetup_r+0xc6>
 8008410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008414:	d1ba      	bne.n	800838c <__swsetup_r+0x30>
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	0781      	lsls	r1, r0, #30
 800841a:	bf58      	it	pl
 800841c:	6963      	ldrpl	r3, [r4, #20]
 800841e:	60a3      	str	r3, [r4, #8]
 8008420:	e7f4      	b.n	800840c <__swsetup_r+0xb0>
 8008422:	2000      	movs	r0, #0
 8008424:	e7f7      	b.n	8008416 <__swsetup_r+0xba>
 8008426:	bf00      	nop
 8008428:	2000000c 	.word	0x2000000c
 800842c:	08008ec4 	.word	0x08008ec4
 8008430:	08008ee4 	.word	0x08008ee4
 8008434:	08008ea4 	.word	0x08008ea4

08008438 <abort>:
 8008438:	b508      	push	{r3, lr}
 800843a:	2006      	movs	r0, #6
 800843c:	f000 fa4a 	bl	80088d4 <raise>
 8008440:	2001      	movs	r0, #1
 8008442:	f7f9 ff82 	bl	800234a <_exit>
	...

08008448 <__sflush_r>:
 8008448:	898a      	ldrh	r2, [r1, #12]
 800844a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844e:	4605      	mov	r5, r0
 8008450:	0710      	lsls	r0, r2, #28
 8008452:	460c      	mov	r4, r1
 8008454:	d458      	bmi.n	8008508 <__sflush_r+0xc0>
 8008456:	684b      	ldr	r3, [r1, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	dc05      	bgt.n	8008468 <__sflush_r+0x20>
 800845c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	dc02      	bgt.n	8008468 <__sflush_r+0x20>
 8008462:	2000      	movs	r0, #0
 8008464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800846a:	2e00      	cmp	r6, #0
 800846c:	d0f9      	beq.n	8008462 <__sflush_r+0x1a>
 800846e:	2300      	movs	r3, #0
 8008470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008474:	682f      	ldr	r7, [r5, #0]
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	d032      	beq.n	80084e0 <__sflush_r+0x98>
 800847a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	075a      	lsls	r2, r3, #29
 8008480:	d505      	bpl.n	800848e <__sflush_r+0x46>
 8008482:	6863      	ldr	r3, [r4, #4]
 8008484:	1ac0      	subs	r0, r0, r3
 8008486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008488:	b10b      	cbz	r3, 800848e <__sflush_r+0x46>
 800848a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800848c:	1ac0      	subs	r0, r0, r3
 800848e:	2300      	movs	r3, #0
 8008490:	4602      	mov	r2, r0
 8008492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008494:	6a21      	ldr	r1, [r4, #32]
 8008496:	4628      	mov	r0, r5
 8008498:	47b0      	blx	r6
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	d106      	bne.n	80084ae <__sflush_r+0x66>
 80084a0:	6829      	ldr	r1, [r5, #0]
 80084a2:	291d      	cmp	r1, #29
 80084a4:	d82c      	bhi.n	8008500 <__sflush_r+0xb8>
 80084a6:	4a2a      	ldr	r2, [pc, #168]	; (8008550 <__sflush_r+0x108>)
 80084a8:	40ca      	lsrs	r2, r1
 80084aa:	07d6      	lsls	r6, r2, #31
 80084ac:	d528      	bpl.n	8008500 <__sflush_r+0xb8>
 80084ae:	2200      	movs	r2, #0
 80084b0:	6062      	str	r2, [r4, #4]
 80084b2:	04d9      	lsls	r1, r3, #19
 80084b4:	6922      	ldr	r2, [r4, #16]
 80084b6:	6022      	str	r2, [r4, #0]
 80084b8:	d504      	bpl.n	80084c4 <__sflush_r+0x7c>
 80084ba:	1c42      	adds	r2, r0, #1
 80084bc:	d101      	bne.n	80084c2 <__sflush_r+0x7a>
 80084be:	682b      	ldr	r3, [r5, #0]
 80084c0:	b903      	cbnz	r3, 80084c4 <__sflush_r+0x7c>
 80084c2:	6560      	str	r0, [r4, #84]	; 0x54
 80084c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084c6:	602f      	str	r7, [r5, #0]
 80084c8:	2900      	cmp	r1, #0
 80084ca:	d0ca      	beq.n	8008462 <__sflush_r+0x1a>
 80084cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084d0:	4299      	cmp	r1, r3
 80084d2:	d002      	beq.n	80084da <__sflush_r+0x92>
 80084d4:	4628      	mov	r0, r5
 80084d6:	f7ff fc7f 	bl	8007dd8 <_free_r>
 80084da:	2000      	movs	r0, #0
 80084dc:	6360      	str	r0, [r4, #52]	; 0x34
 80084de:	e7c1      	b.n	8008464 <__sflush_r+0x1c>
 80084e0:	6a21      	ldr	r1, [r4, #32]
 80084e2:	2301      	movs	r3, #1
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b0      	blx	r6
 80084e8:	1c41      	adds	r1, r0, #1
 80084ea:	d1c7      	bne.n	800847c <__sflush_r+0x34>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0c4      	beq.n	800847c <__sflush_r+0x34>
 80084f2:	2b1d      	cmp	r3, #29
 80084f4:	d001      	beq.n	80084fa <__sflush_r+0xb2>
 80084f6:	2b16      	cmp	r3, #22
 80084f8:	d101      	bne.n	80084fe <__sflush_r+0xb6>
 80084fa:	602f      	str	r7, [r5, #0]
 80084fc:	e7b1      	b.n	8008462 <__sflush_r+0x1a>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	e7ad      	b.n	8008464 <__sflush_r+0x1c>
 8008508:	690f      	ldr	r7, [r1, #16]
 800850a:	2f00      	cmp	r7, #0
 800850c:	d0a9      	beq.n	8008462 <__sflush_r+0x1a>
 800850e:	0793      	lsls	r3, r2, #30
 8008510:	680e      	ldr	r6, [r1, #0]
 8008512:	bf08      	it	eq
 8008514:	694b      	ldreq	r3, [r1, #20]
 8008516:	600f      	str	r7, [r1, #0]
 8008518:	bf18      	it	ne
 800851a:	2300      	movne	r3, #0
 800851c:	eba6 0807 	sub.w	r8, r6, r7
 8008520:	608b      	str	r3, [r1, #8]
 8008522:	f1b8 0f00 	cmp.w	r8, #0
 8008526:	dd9c      	ble.n	8008462 <__sflush_r+0x1a>
 8008528:	6a21      	ldr	r1, [r4, #32]
 800852a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800852c:	4643      	mov	r3, r8
 800852e:	463a      	mov	r2, r7
 8008530:	4628      	mov	r0, r5
 8008532:	47b0      	blx	r6
 8008534:	2800      	cmp	r0, #0
 8008536:	dc06      	bgt.n	8008546 <__sflush_r+0xfe>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800853e:	81a3      	strh	r3, [r4, #12]
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	e78e      	b.n	8008464 <__sflush_r+0x1c>
 8008546:	4407      	add	r7, r0
 8008548:	eba8 0800 	sub.w	r8, r8, r0
 800854c:	e7e9      	b.n	8008522 <__sflush_r+0xda>
 800854e:	bf00      	nop
 8008550:	20400001 	.word	0x20400001

08008554 <_fflush_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	690b      	ldr	r3, [r1, #16]
 8008558:	4605      	mov	r5, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b913      	cbnz	r3, 8008564 <_fflush_r+0x10>
 800855e:	2500      	movs	r5, #0
 8008560:	4628      	mov	r0, r5
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	b118      	cbz	r0, 800856e <_fflush_r+0x1a>
 8008566:	6983      	ldr	r3, [r0, #24]
 8008568:	b90b      	cbnz	r3, 800856e <_fflush_r+0x1a>
 800856a:	f000 f887 	bl	800867c <__sinit>
 800856e:	4b14      	ldr	r3, [pc, #80]	; (80085c0 <_fflush_r+0x6c>)
 8008570:	429c      	cmp	r4, r3
 8008572:	d11b      	bne.n	80085ac <_fflush_r+0x58>
 8008574:	686c      	ldr	r4, [r5, #4]
 8008576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0ef      	beq.n	800855e <_fflush_r+0xa>
 800857e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008580:	07d0      	lsls	r0, r2, #31
 8008582:	d404      	bmi.n	800858e <_fflush_r+0x3a>
 8008584:	0599      	lsls	r1, r3, #22
 8008586:	d402      	bmi.n	800858e <_fflush_r+0x3a>
 8008588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858a:	f000 f915 	bl	80087b8 <__retarget_lock_acquire_recursive>
 800858e:	4628      	mov	r0, r5
 8008590:	4621      	mov	r1, r4
 8008592:	f7ff ff59 	bl	8008448 <__sflush_r>
 8008596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008598:	07da      	lsls	r2, r3, #31
 800859a:	4605      	mov	r5, r0
 800859c:	d4e0      	bmi.n	8008560 <_fflush_r+0xc>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	059b      	lsls	r3, r3, #22
 80085a2:	d4dd      	bmi.n	8008560 <_fflush_r+0xc>
 80085a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085a6:	f000 f908 	bl	80087ba <__retarget_lock_release_recursive>
 80085aa:	e7d9      	b.n	8008560 <_fflush_r+0xc>
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <_fflush_r+0x70>)
 80085ae:	429c      	cmp	r4, r3
 80085b0:	d101      	bne.n	80085b6 <_fflush_r+0x62>
 80085b2:	68ac      	ldr	r4, [r5, #8]
 80085b4:	e7df      	b.n	8008576 <_fflush_r+0x22>
 80085b6:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <_fflush_r+0x74>)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	bf08      	it	eq
 80085bc:	68ec      	ldreq	r4, [r5, #12]
 80085be:	e7da      	b.n	8008576 <_fflush_r+0x22>
 80085c0:	08008ec4 	.word	0x08008ec4
 80085c4:	08008ee4 	.word	0x08008ee4
 80085c8:	08008ea4 	.word	0x08008ea4

080085cc <std>:
 80085cc:	2300      	movs	r3, #0
 80085ce:	b510      	push	{r4, lr}
 80085d0:	4604      	mov	r4, r0
 80085d2:	e9c0 3300 	strd	r3, r3, [r0]
 80085d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085da:	6083      	str	r3, [r0, #8]
 80085dc:	8181      	strh	r1, [r0, #12]
 80085de:	6643      	str	r3, [r0, #100]	; 0x64
 80085e0:	81c2      	strh	r2, [r0, #14]
 80085e2:	6183      	str	r3, [r0, #24]
 80085e4:	4619      	mov	r1, r3
 80085e6:	2208      	movs	r2, #8
 80085e8:	305c      	adds	r0, #92	; 0x5c
 80085ea:	f7fd fd63 	bl	80060b4 <memset>
 80085ee:	4b05      	ldr	r3, [pc, #20]	; (8008604 <std+0x38>)
 80085f0:	6263      	str	r3, [r4, #36]	; 0x24
 80085f2:	4b05      	ldr	r3, [pc, #20]	; (8008608 <std+0x3c>)
 80085f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085f6:	4b05      	ldr	r3, [pc, #20]	; (800860c <std+0x40>)
 80085f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <std+0x44>)
 80085fc:	6224      	str	r4, [r4, #32]
 80085fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008600:	bd10      	pop	{r4, pc}
 8008602:	bf00      	nop
 8008604:	0800890d 	.word	0x0800890d
 8008608:	0800892f 	.word	0x0800892f
 800860c:	08008967 	.word	0x08008967
 8008610:	0800898b 	.word	0x0800898b

08008614 <_cleanup_r>:
 8008614:	4901      	ldr	r1, [pc, #4]	; (800861c <_cleanup_r+0x8>)
 8008616:	f000 b8af 	b.w	8008778 <_fwalk_reent>
 800861a:	bf00      	nop
 800861c:	08008555 	.word	0x08008555

08008620 <__sfmoreglue>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	1e4a      	subs	r2, r1, #1
 8008624:	2568      	movs	r5, #104	; 0x68
 8008626:	4355      	muls	r5, r2
 8008628:	460e      	mov	r6, r1
 800862a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800862e:	f7ff fc23 	bl	8007e78 <_malloc_r>
 8008632:	4604      	mov	r4, r0
 8008634:	b140      	cbz	r0, 8008648 <__sfmoreglue+0x28>
 8008636:	2100      	movs	r1, #0
 8008638:	e9c0 1600 	strd	r1, r6, [r0]
 800863c:	300c      	adds	r0, #12
 800863e:	60a0      	str	r0, [r4, #8]
 8008640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008644:	f7fd fd36 	bl	80060b4 <memset>
 8008648:	4620      	mov	r0, r4
 800864a:	bd70      	pop	{r4, r5, r6, pc}

0800864c <__sfp_lock_acquire>:
 800864c:	4801      	ldr	r0, [pc, #4]	; (8008654 <__sfp_lock_acquire+0x8>)
 800864e:	f000 b8b3 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 8008652:	bf00      	nop
 8008654:	200003c0 	.word	0x200003c0

08008658 <__sfp_lock_release>:
 8008658:	4801      	ldr	r0, [pc, #4]	; (8008660 <__sfp_lock_release+0x8>)
 800865a:	f000 b8ae 	b.w	80087ba <__retarget_lock_release_recursive>
 800865e:	bf00      	nop
 8008660:	200003c0 	.word	0x200003c0

08008664 <__sinit_lock_acquire>:
 8008664:	4801      	ldr	r0, [pc, #4]	; (800866c <__sinit_lock_acquire+0x8>)
 8008666:	f000 b8a7 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 800866a:	bf00      	nop
 800866c:	200003bb 	.word	0x200003bb

08008670 <__sinit_lock_release>:
 8008670:	4801      	ldr	r0, [pc, #4]	; (8008678 <__sinit_lock_release+0x8>)
 8008672:	f000 b8a2 	b.w	80087ba <__retarget_lock_release_recursive>
 8008676:	bf00      	nop
 8008678:	200003bb 	.word	0x200003bb

0800867c <__sinit>:
 800867c:	b510      	push	{r4, lr}
 800867e:	4604      	mov	r4, r0
 8008680:	f7ff fff0 	bl	8008664 <__sinit_lock_acquire>
 8008684:	69a3      	ldr	r3, [r4, #24]
 8008686:	b11b      	cbz	r3, 8008690 <__sinit+0x14>
 8008688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868c:	f7ff bff0 	b.w	8008670 <__sinit_lock_release>
 8008690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008694:	6523      	str	r3, [r4, #80]	; 0x50
 8008696:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <__sinit+0x68>)
 8008698:	4a13      	ldr	r2, [pc, #76]	; (80086e8 <__sinit+0x6c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	62a2      	str	r2, [r4, #40]	; 0x28
 800869e:	42a3      	cmp	r3, r4
 80086a0:	bf04      	itt	eq
 80086a2:	2301      	moveq	r3, #1
 80086a4:	61a3      	streq	r3, [r4, #24]
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 f820 	bl	80086ec <__sfp>
 80086ac:	6060      	str	r0, [r4, #4]
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 f81c 	bl	80086ec <__sfp>
 80086b4:	60a0      	str	r0, [r4, #8]
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 f818 	bl	80086ec <__sfp>
 80086bc:	2200      	movs	r2, #0
 80086be:	60e0      	str	r0, [r4, #12]
 80086c0:	2104      	movs	r1, #4
 80086c2:	6860      	ldr	r0, [r4, #4]
 80086c4:	f7ff ff82 	bl	80085cc <std>
 80086c8:	68a0      	ldr	r0, [r4, #8]
 80086ca:	2201      	movs	r2, #1
 80086cc:	2109      	movs	r1, #9
 80086ce:	f7ff ff7d 	bl	80085cc <std>
 80086d2:	68e0      	ldr	r0, [r4, #12]
 80086d4:	2202      	movs	r2, #2
 80086d6:	2112      	movs	r1, #18
 80086d8:	f7ff ff78 	bl	80085cc <std>
 80086dc:	2301      	movs	r3, #1
 80086de:	61a3      	str	r3, [r4, #24]
 80086e0:	e7d2      	b.n	8008688 <__sinit+0xc>
 80086e2:	bf00      	nop
 80086e4:	08008b24 	.word	0x08008b24
 80086e8:	08008615 	.word	0x08008615

080086ec <__sfp>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	4607      	mov	r7, r0
 80086f0:	f7ff ffac 	bl	800864c <__sfp_lock_acquire>
 80086f4:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <__sfp+0x84>)
 80086f6:	681e      	ldr	r6, [r3, #0]
 80086f8:	69b3      	ldr	r3, [r6, #24]
 80086fa:	b913      	cbnz	r3, 8008702 <__sfp+0x16>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff ffbd 	bl	800867c <__sinit>
 8008702:	3648      	adds	r6, #72	; 0x48
 8008704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008708:	3b01      	subs	r3, #1
 800870a:	d503      	bpl.n	8008714 <__sfp+0x28>
 800870c:	6833      	ldr	r3, [r6, #0]
 800870e:	b30b      	cbz	r3, 8008754 <__sfp+0x68>
 8008710:	6836      	ldr	r6, [r6, #0]
 8008712:	e7f7      	b.n	8008704 <__sfp+0x18>
 8008714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008718:	b9d5      	cbnz	r5, 8008750 <__sfp+0x64>
 800871a:	4b16      	ldr	r3, [pc, #88]	; (8008774 <__sfp+0x88>)
 800871c:	60e3      	str	r3, [r4, #12]
 800871e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008722:	6665      	str	r5, [r4, #100]	; 0x64
 8008724:	f000 f847 	bl	80087b6 <__retarget_lock_init_recursive>
 8008728:	f7ff ff96 	bl	8008658 <__sfp_lock_release>
 800872c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008730:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008734:	6025      	str	r5, [r4, #0]
 8008736:	61a5      	str	r5, [r4, #24]
 8008738:	2208      	movs	r2, #8
 800873a:	4629      	mov	r1, r5
 800873c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008740:	f7fd fcb8 	bl	80060b4 <memset>
 8008744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800874c:	4620      	mov	r0, r4
 800874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008750:	3468      	adds	r4, #104	; 0x68
 8008752:	e7d9      	b.n	8008708 <__sfp+0x1c>
 8008754:	2104      	movs	r1, #4
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ff62 	bl	8008620 <__sfmoreglue>
 800875c:	4604      	mov	r4, r0
 800875e:	6030      	str	r0, [r6, #0]
 8008760:	2800      	cmp	r0, #0
 8008762:	d1d5      	bne.n	8008710 <__sfp+0x24>
 8008764:	f7ff ff78 	bl	8008658 <__sfp_lock_release>
 8008768:	230c      	movs	r3, #12
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	e7ee      	b.n	800874c <__sfp+0x60>
 800876e:	bf00      	nop
 8008770:	08008b24 	.word	0x08008b24
 8008774:	ffff0001 	.word	0xffff0001

08008778 <_fwalk_reent>:
 8008778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800877c:	4606      	mov	r6, r0
 800877e:	4688      	mov	r8, r1
 8008780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008784:	2700      	movs	r7, #0
 8008786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800878a:	f1b9 0901 	subs.w	r9, r9, #1
 800878e:	d505      	bpl.n	800879c <_fwalk_reent+0x24>
 8008790:	6824      	ldr	r4, [r4, #0]
 8008792:	2c00      	cmp	r4, #0
 8008794:	d1f7      	bne.n	8008786 <_fwalk_reent+0xe>
 8008796:	4638      	mov	r0, r7
 8008798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879c:	89ab      	ldrh	r3, [r5, #12]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d907      	bls.n	80087b2 <_fwalk_reent+0x3a>
 80087a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087a6:	3301      	adds	r3, #1
 80087a8:	d003      	beq.n	80087b2 <_fwalk_reent+0x3a>
 80087aa:	4629      	mov	r1, r5
 80087ac:	4630      	mov	r0, r6
 80087ae:	47c0      	blx	r8
 80087b0:	4307      	orrs	r7, r0
 80087b2:	3568      	adds	r5, #104	; 0x68
 80087b4:	e7e9      	b.n	800878a <_fwalk_reent+0x12>

080087b6 <__retarget_lock_init_recursive>:
 80087b6:	4770      	bx	lr

080087b8 <__retarget_lock_acquire_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_release_recursive>:
 80087ba:	4770      	bx	lr

080087bc <__swhatbuf_r>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	460e      	mov	r6, r1
 80087c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c4:	2900      	cmp	r1, #0
 80087c6:	b096      	sub	sp, #88	; 0x58
 80087c8:	4614      	mov	r4, r2
 80087ca:	461d      	mov	r5, r3
 80087cc:	da07      	bge.n	80087de <__swhatbuf_r+0x22>
 80087ce:	2300      	movs	r3, #0
 80087d0:	602b      	str	r3, [r5, #0]
 80087d2:	89b3      	ldrh	r3, [r6, #12]
 80087d4:	061a      	lsls	r2, r3, #24
 80087d6:	d410      	bmi.n	80087fa <__swhatbuf_r+0x3e>
 80087d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087dc:	e00e      	b.n	80087fc <__swhatbuf_r+0x40>
 80087de:	466a      	mov	r2, sp
 80087e0:	f000 f8fa 	bl	80089d8 <_fstat_r>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	dbf2      	blt.n	80087ce <__swhatbuf_r+0x12>
 80087e8:	9a01      	ldr	r2, [sp, #4]
 80087ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087f2:	425a      	negs	r2, r3
 80087f4:	415a      	adcs	r2, r3
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	e7ee      	b.n	80087d8 <__swhatbuf_r+0x1c>
 80087fa:	2340      	movs	r3, #64	; 0x40
 80087fc:	2000      	movs	r0, #0
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	b016      	add	sp, #88	; 0x58
 8008802:	bd70      	pop	{r4, r5, r6, pc}

08008804 <__smakebuf_r>:
 8008804:	898b      	ldrh	r3, [r1, #12]
 8008806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008808:	079d      	lsls	r5, r3, #30
 800880a:	4606      	mov	r6, r0
 800880c:	460c      	mov	r4, r1
 800880e:	d507      	bpl.n	8008820 <__smakebuf_r+0x1c>
 8008810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	2301      	movs	r3, #1
 800881a:	6163      	str	r3, [r4, #20]
 800881c:	b002      	add	sp, #8
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	ab01      	add	r3, sp, #4
 8008822:	466a      	mov	r2, sp
 8008824:	f7ff ffca 	bl	80087bc <__swhatbuf_r>
 8008828:	9900      	ldr	r1, [sp, #0]
 800882a:	4605      	mov	r5, r0
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff fb23 	bl	8007e78 <_malloc_r>
 8008832:	b948      	cbnz	r0, 8008848 <__smakebuf_r+0x44>
 8008834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008838:	059a      	lsls	r2, r3, #22
 800883a:	d4ef      	bmi.n	800881c <__smakebuf_r+0x18>
 800883c:	f023 0303 	bic.w	r3, r3, #3
 8008840:	f043 0302 	orr.w	r3, r3, #2
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	e7e3      	b.n	8008810 <__smakebuf_r+0xc>
 8008848:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <__smakebuf_r+0x7c>)
 800884a:	62b3      	str	r3, [r6, #40]	; 0x28
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	6020      	str	r0, [r4, #0]
 8008850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	9b00      	ldr	r3, [sp, #0]
 8008858:	6163      	str	r3, [r4, #20]
 800885a:	9b01      	ldr	r3, [sp, #4]
 800885c:	6120      	str	r0, [r4, #16]
 800885e:	b15b      	cbz	r3, 8008878 <__smakebuf_r+0x74>
 8008860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008864:	4630      	mov	r0, r6
 8008866:	f000 f8c9 	bl	80089fc <_isatty_r>
 800886a:	b128      	cbz	r0, 8008878 <__smakebuf_r+0x74>
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	89a0      	ldrh	r0, [r4, #12]
 800887a:	4305      	orrs	r5, r0
 800887c:	81a5      	strh	r5, [r4, #12]
 800887e:	e7cd      	b.n	800881c <__smakebuf_r+0x18>
 8008880:	08008615 	.word	0x08008615

08008884 <_raise_r>:
 8008884:	291f      	cmp	r1, #31
 8008886:	b538      	push	{r3, r4, r5, lr}
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
 800888c:	d904      	bls.n	8008898 <_raise_r+0x14>
 800888e:	2316      	movs	r3, #22
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800889a:	b112      	cbz	r2, 80088a2 <_raise_r+0x1e>
 800889c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088a0:	b94b      	cbnz	r3, 80088b6 <_raise_r+0x32>
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 f830 	bl	8008908 <_getpid_r>
 80088a8:	462a      	mov	r2, r5
 80088aa:	4601      	mov	r1, r0
 80088ac:	4620      	mov	r0, r4
 80088ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b2:	f000 b817 	b.w	80088e4 <_kill_r>
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d00a      	beq.n	80088d0 <_raise_r+0x4c>
 80088ba:	1c59      	adds	r1, r3, #1
 80088bc:	d103      	bne.n	80088c6 <_raise_r+0x42>
 80088be:	2316      	movs	r3, #22
 80088c0:	6003      	str	r3, [r0, #0]
 80088c2:	2001      	movs	r0, #1
 80088c4:	e7e7      	b.n	8008896 <_raise_r+0x12>
 80088c6:	2400      	movs	r4, #0
 80088c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088cc:	4628      	mov	r0, r5
 80088ce:	4798      	blx	r3
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7e0      	b.n	8008896 <_raise_r+0x12>

080088d4 <raise>:
 80088d4:	4b02      	ldr	r3, [pc, #8]	; (80088e0 <raise+0xc>)
 80088d6:	4601      	mov	r1, r0
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	f7ff bfd3 	b.w	8008884 <_raise_r>
 80088de:	bf00      	nop
 80088e0:	2000000c 	.word	0x2000000c

080088e4 <_kill_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d07      	ldr	r5, [pc, #28]	; (8008904 <_kill_r+0x20>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	4611      	mov	r1, r2
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	f7f9 fd1a 	bl	800232a <_kill>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d102      	bne.n	8008900 <_kill_r+0x1c>
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	b103      	cbz	r3, 8008900 <_kill_r+0x1c>
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	bf00      	nop
 8008904:	200003b4 	.word	0x200003b4

08008908 <_getpid_r>:
 8008908:	f7f9 bd07 	b.w	800231a <_getpid>

0800890c <__sread>:
 800890c:	b510      	push	{r4, lr}
 800890e:	460c      	mov	r4, r1
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	f000 f894 	bl	8008a40 <_read_r>
 8008918:	2800      	cmp	r0, #0
 800891a:	bfab      	itete	ge
 800891c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800891e:	89a3      	ldrhlt	r3, [r4, #12]
 8008920:	181b      	addge	r3, r3, r0
 8008922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008926:	bfac      	ite	ge
 8008928:	6563      	strge	r3, [r4, #84]	; 0x54
 800892a:	81a3      	strhlt	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__swrite>:
 800892e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008932:	461f      	mov	r7, r3
 8008934:	898b      	ldrh	r3, [r1, #12]
 8008936:	05db      	lsls	r3, r3, #23
 8008938:	4605      	mov	r5, r0
 800893a:	460c      	mov	r4, r1
 800893c:	4616      	mov	r6, r2
 800893e:	d505      	bpl.n	800894c <__swrite+0x1e>
 8008940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008944:	2302      	movs	r3, #2
 8008946:	2200      	movs	r2, #0
 8008948:	f000 f868 	bl	8008a1c <_lseek_r>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	4632      	mov	r2, r6
 800895a:	463b      	mov	r3, r7
 800895c:	4628      	mov	r0, r5
 800895e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008962:	f000 b817 	b.w	8008994 <_write_r>

08008966 <__sseek>:
 8008966:	b510      	push	{r4, lr}
 8008968:	460c      	mov	r4, r1
 800896a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896e:	f000 f855 	bl	8008a1c <_lseek_r>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	bf15      	itete	ne
 8008978:	6560      	strne	r0, [r4, #84]	; 0x54
 800897a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800897e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008982:	81a3      	strheq	r3, [r4, #12]
 8008984:	bf18      	it	ne
 8008986:	81a3      	strhne	r3, [r4, #12]
 8008988:	bd10      	pop	{r4, pc}

0800898a <__sclose>:
 800898a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898e:	f000 b813 	b.w	80089b8 <_close_r>
	...

08008994 <_write_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d07      	ldr	r5, [pc, #28]	; (80089b4 <_write_r+0x20>)
 8008998:	4604      	mov	r4, r0
 800899a:	4608      	mov	r0, r1
 800899c:	4611      	mov	r1, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	602a      	str	r2, [r5, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	f7f9 fcf8 	bl	8002398 <_write>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_write_r+0x1e>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_write_r+0x1e>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	200003b4 	.word	0x200003b4

080089b8 <_close_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4d06      	ldr	r5, [pc, #24]	; (80089d4 <_close_r+0x1c>)
 80089bc:	2300      	movs	r3, #0
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	f7f9 fd04 	bl	80023d0 <_close>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_close_r+0x1a>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_close_r+0x1a>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	200003b4 	.word	0x200003b4

080089d8 <_fstat_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d07      	ldr	r5, [pc, #28]	; (80089f8 <_fstat_r+0x20>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	4611      	mov	r1, r2
 80089e4:	602b      	str	r3, [r5, #0]
 80089e6:	f7f9 fcff 	bl	80023e8 <_fstat>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	d102      	bne.n	80089f4 <_fstat_r+0x1c>
 80089ee:	682b      	ldr	r3, [r5, #0]
 80089f0:	b103      	cbz	r3, 80089f4 <_fstat_r+0x1c>
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	bd38      	pop	{r3, r4, r5, pc}
 80089f6:	bf00      	nop
 80089f8:	200003b4 	.word	0x200003b4

080089fc <_isatty_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d06      	ldr	r5, [pc, #24]	; (8008a18 <_isatty_r+0x1c>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	f7f9 fcfe 	bl	8002408 <_isatty>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_isatty_r+0x1a>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_isatty_r+0x1a>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	200003b4 	.word	0x200003b4

08008a1c <_lseek_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d07      	ldr	r5, [pc, #28]	; (8008a3c <_lseek_r+0x20>)
 8008a20:	4604      	mov	r4, r0
 8008a22:	4608      	mov	r0, r1
 8008a24:	4611      	mov	r1, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7f9 fcf7 	bl	800241e <_lseek>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_lseek_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_lseek_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	200003b4 	.word	0x200003b4

08008a40 <_read_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d07      	ldr	r5, [pc, #28]	; (8008a60 <_read_r+0x20>)
 8008a44:	4604      	mov	r4, r0
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7f9 fc85 	bl	800235e <_read>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_read_r+0x1e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_read_r+0x1e>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	200003b4 	.word	0x200003b4

08008a64 <_init>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	bf00      	nop
 8008a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6a:	bc08      	pop	{r3}
 8008a6c:	469e      	mov	lr, r3
 8008a6e:	4770      	bx	lr

08008a70 <_fini>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	bf00      	nop
 8008a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a76:	bc08      	pop	{r3}
 8008a78:	469e      	mov	lr, r3
 8008a7a:	4770      	bx	lr
