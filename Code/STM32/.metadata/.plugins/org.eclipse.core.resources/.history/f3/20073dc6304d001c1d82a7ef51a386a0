/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "rtc.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include "bh1750.h"
#include "bme280.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BLE_RxTableLen 20
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
// RTC variables
uint8_t RTC_interrupt = 0;

// BLE variables
uint8_t BLE_interrupt = 0;
uint16_t BLE_RxLen;
uint8_t BLE_RxTable[BLE_RxTableLen];
uint8_t BLE_connected = 0;

// sensor variables
bme280_t bme;
bh1750_t bh;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void btInit(void);
void btSend(uint8_t *data, size_t len);
void bsSleep(void);
void bsWakeup(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_I2C1_Init();
	MX_LPUART1_UART_Init();
	MX_RTC_Init();
	/* USER CODE BEGIN 2 */

	bme.i2c = &hi2c1;

	bme.filter = BME280_FILTER_OFF;
	bme.temp_oversampling = BME280_TEMPERATURE_OVER_1;
	bme.press_oversampling = BME280_PRESSURE_OVER_1;
	bme.hum_oversampling = BME280_HUMIDITY_OVER_1;
	bme.work_mode = BME280_NORMAL_MODE;
	bme.standby_time = BME280_STANDBY_20;

	bh.i2c = &hi2c1;
	bh.work_mode = BH1750_ONE_H_RES2_MODE;

	BME280_Init(&bme);
	bh1750_init(&bh);

	btInit();	// initialize ble pins and reset module
	memset((void*) BLE_RxTable, '\0', sizeof(BLE_RxTable));

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);

	BME280_ReadAll(&bme);
	bh1750_ReadMeasurement(&bh);

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		if (BLE_interrupt == 1) {
			BLE_interrupt = 0;
			if (strncmp((char*) BLE_RxTable, (char*) "TTM:CONNECT\r\n",
					BLE_RxLen) == 0) {
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
				BLE_connected = 1;
			} else if (strncmp((char*) BLE_RxTable,
					(char*) "TTM:DISCONNECT\r\n", BLE_RxLen) == 0) {
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
				BLE_connected = 0;
			} else {
				btSend((uint8_t*) BLE_RxTable, 20);
			}
			memset((void*) BLE_RxTable, '\0', sizeof(BLE_RxTable));
		}

		if (RTC_interrupt == 1) {
			RTC_interrupt = 0;
			//btSend((uint8_t*) "TEST\n", 5);

			HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10,
					RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
		}
		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_SuspendTick();
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
			!= HAL_OK) {
		Error_Handler();
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
		Error_Handler();
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
}

/* USER CODE BEGIN 4 */
void btInit(void) {
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(BT_PDN_GPIO_Port, BT_PDN_Pin, GPIO_PIN_RESET);
	HAL_Delay(20);
	// reset BLE module
	btSend((uint8_t*) "TTM:RST-SYSTEMRESET\r\n\0",
			sizeof("TTM:RST-SYSTEMRESET\r\n"));
	HAL_Delay(20);
}
void btSend(uint8_t *data, size_t len) {
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_RESET);
	HAL_Delay(1);
	HAL_UART_Transmit(&hlpuart1, data, len, 100);
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
}
void bsSleep(void) {
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_RESET);
}
void bsWakeup(void) {
	HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
	SystemClock_Config();
	HAL_ResumeTick();
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
	RTC_interrupt = 1;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	SystemClock_Config();
	HAL_ResumeTick();
	if (GPIO_Pin == BT_INT_Pin) {
		HAL_UARTEx_ReceiveToIdle(&hlpuart1, (uint8_t*) BLE_RxTable,
				BLE_RxTableLen, &BLE_RxLen, 30);
		if (BLE_RxLen > 0) { // set flag only if received something
			BLE_interrupt = 1;
		}
	}
}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
