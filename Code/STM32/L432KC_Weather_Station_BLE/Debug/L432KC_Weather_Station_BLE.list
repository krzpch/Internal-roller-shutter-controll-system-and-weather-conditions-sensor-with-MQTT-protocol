
L432KC_Weather_Station_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08008c38  08008c38  00018c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d4  080090d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080090d4  080090d4  000190d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090dc  080090dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090dc  080090dc  000190dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080090e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001dc  080092c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080092c0  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014534  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3e  00000000  00000000  00034740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00037680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00038558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223a3  00000000  00000000  000392d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001252e  00000000  00000000  0005b67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c41af  00000000  00000000  0006dba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131d58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  00131dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c1c 	.word	0x08008c1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008c1c 	.word	0x08008c1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b9 	b.w	8000fdc <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96e 	b.w	8000fdc <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	468c      	mov	ip, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8083 	bne.w	8000e2e <__udivmoddi4+0x116>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d947      	bls.n	8000dbe <__udivmoddi4+0xa6>
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	b142      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	f1c2 0020 	rsb	r0, r2, #32
 8000d38:	fa24 f000 	lsr.w	r0, r4, r0
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	4097      	lsls	r7, r2
 8000d40:	ea40 0c01 	orr.w	ip, r0, r1
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d50:	fa1f fe87 	uxth.w	lr, r7
 8000d54:	fb08 c116 	mls	r1, r8, r6, ip
 8000d58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 8119 	bcs.w	8000fa0 <__udivmoddi4+0x288>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8116 	bls.w	8000fa0 <__udivmoddi4+0x288>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8105 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f240 8102 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000da0:	3802      	subs	r0, #2
 8000da2:	443c      	add	r4, r7
 8000da4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	b902      	cbnz	r2, 8000dc2 <__udivmoddi4+0xaa>
 8000dc0:	deff      	udf	#255	; 0xff
 8000dc2:	fab2 f282 	clz	r2, r2
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d150      	bne.n	8000e6c <__udivmoddi4+0x154>
 8000dca:	1bcb      	subs	r3, r1, r7
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	fa1f f887 	uxth.w	r8, r7
 8000dd4:	2601      	movs	r6, #1
 8000dd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dda:	0c21      	lsrs	r1, r4, #16
 8000ddc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb08 f30c 	mul.w	r3, r8, ip
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0xe2>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	f200 80e9 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1ac9      	subs	r1, r1, r3
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x10c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x10a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80d9 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e7bf      	b.n	8000dae <__udivmoddi4+0x96>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x12e>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80b1 	beq.w	8000f9a <__udivmoddi4+0x282>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x1cc>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0x140>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80b8 	bhi.w	8000fc8 <__udivmoddi4+0x2b0>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	468c      	mov	ip, r1
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0a8      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000e66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e6a:	e7a5      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f603 	lsr.w	r6, r0, r3
 8000e74:	4097      	lsls	r7, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7e:	40d9      	lsrs	r1, r3
 8000e80:	4330      	orrs	r0, r6
 8000e82:	0c03      	lsrs	r3, r0, #16
 8000e84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e88:	fa1f f887 	uxth.w	r8, r7
 8000e8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e94:	fb06 f108 	mul.w	r1, r6, r8
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x19c>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ea6:	f080 808d 	bcs.w	8000fc4 <__udivmoddi4+0x2ac>
 8000eaa:	4299      	cmp	r1, r3
 8000eac:	f240 808a 	bls.w	8000fc4 <__udivmoddi4+0x2ac>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	443b      	add	r3, r7
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b281      	uxth	r1, r0
 8000eb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ebc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ec0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec4:	fb00 f308 	mul.w	r3, r0, r8
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0x1c4>
 8000ecc:	1879      	adds	r1, r7, r1
 8000ece:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ed2:	d273      	bcs.n	8000fbc <__udivmoddi4+0x2a4>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d971      	bls.n	8000fbc <__udivmoddi4+0x2a4>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4439      	add	r1, r7
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ee2:	e778      	b.n	8000dd6 <__udivmoddi4+0xbe>
 8000ee4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ee8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ef0:	431c      	orrs	r4, r3
 8000ef2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000efe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f02:	431f      	orrs	r7, r3
 8000f04:	0c3b      	lsrs	r3, r7, #16
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fa1f f884 	uxth.w	r8, r4
 8000f0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f16:	fb09 fa08 	mul.w	sl, r9, r8
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f20:	fa00 f306 	lsl.w	r3, r0, r6
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x220>
 8000f26:	1861      	adds	r1, r4, r1
 8000f28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f2c:	d248      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f2e:	458a      	cmp	sl, r1
 8000f30:	d946      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f32:	f1a9 0902 	sub.w	r9, r9, #2
 8000f36:	4421      	add	r1, r4
 8000f38:	eba1 010a 	sub.w	r1, r1, sl
 8000f3c:	b2bf      	uxth	r7, r7
 8000f3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f4a:	fb00 f808 	mul.w	r8, r0, r8
 8000f4e:	45b8      	cmp	r8, r7
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x24a>
 8000f52:	19e7      	adds	r7, r4, r7
 8000f54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f58:	d22e      	bcs.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d92c      	bls.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	4427      	add	r7, r4
 8000f62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f66:	eba7 0708 	sub.w	r7, r7, r8
 8000f6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6e:	454f      	cmp	r7, r9
 8000f70:	46c6      	mov	lr, r8
 8000f72:	4649      	mov	r1, r9
 8000f74:	d31a      	bcc.n	8000fac <__udivmoddi4+0x294>
 8000f76:	d017      	beq.n	8000fa8 <__udivmoddi4+0x290>
 8000f78:	b15d      	cbz	r5, 8000f92 <__udivmoddi4+0x27a>
 8000f7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f86:	40f2      	lsrs	r2, r6
 8000f88:	ea4c 0202 	orr.w	r2, ip, r2
 8000f8c:	40f7      	lsrs	r7, r6
 8000f8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f92:	2600      	movs	r6, #0
 8000f94:	4631      	mov	r1, r6
 8000f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e70b      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6fd      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fa8:	4543      	cmp	r3, r8
 8000faa:	d2e5      	bcs.n	8000f78 <__udivmoddi4+0x260>
 8000fac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7df      	b.n	8000f78 <__udivmoddi4+0x260>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e7d2      	b.n	8000f62 <__udivmoddi4+0x24a>
 8000fbc:	4660      	mov	r0, ip
 8000fbe:	e78d      	b.n	8000edc <__udivmoddi4+0x1c4>
 8000fc0:	4681      	mov	r9, r0
 8000fc2:	e7b9      	b.n	8000f38 <__udivmoddi4+0x220>
 8000fc4:	4666      	mov	r6, ip
 8000fc6:	e775      	b.n	8000eb4 <__udivmoddi4+0x19c>
 8000fc8:	4630      	mov	r0, r6
 8000fca:	e74a      	b.n	8000e62 <__udivmoddi4+0x14a>
 8000fcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd0:	4439      	add	r1, r7
 8000fd2:	e713      	b.n	8000dfc <__udivmoddi4+0xe4>
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	443c      	add	r4, r7
 8000fd8:	e724      	b.n	8000e24 <__udivmoddi4+0x10c>
 8000fda:	bf00      	nop

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <bh1750_init>:
 *      Author: Krzysztof Półchłopek
 */

#include "bh1750.h"

void bh1750_init(bh1750_t *bh) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
// power on the device and reset it
	bh1750_Write(bh, BH1750_POWER_ON);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f850 	bl	8001090 <bh1750_Write>
	bh1750_Write(bh, BH1750_RESET);
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f84c 	bl	8001090 <bh1750_Write>

// check if work_mode is set to continuous measurements
	if (bh->work_mode <= BH1750_ONE_H_RES_MODE) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d805      	bhi.n	800100c <bh1750_init+0x2c>
		// if yes set measurement mode
		bh1750_Write(bh, bh->work_mode);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	791b      	ldrb	r3, [r3, #4]
 8001004:	4619      	mov	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f842 	bl	8001090 <bh1750_Write>
	}
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <bh1750_ReadMeasurement>:

void bh1750_ReadMeasurement(bh1750_t *bh) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if (bh->work_mode == BH1750_ONE_L_RES_MODE) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	2b23      	cmp	r3, #35	; 0x23
 8001022:	d107      	bne.n	8001034 <bh1750_ReadMeasurement+0x20>
		// set one shot low res measurement and wait 30 ms
		bh1750_Write(bh, BH1750_ONE_L_RES_MODE);
 8001024:	2123      	movs	r1, #35	; 0x23
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f832 	bl	8001090 <bh1750_Write>
		HAL_Delay(30);
 800102c:	201e      	movs	r0, #30
 800102e:	f001 fa93 	bl	8002558 <HAL_Delay>
 8001032:	e016      	b.n	8001062 <bh1750_ReadMeasurement+0x4e>
	} else if (bh->work_mode == BH1750_ONE_H_RES_MODE) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	2b20      	cmp	r3, #32
 800103a:	d107      	bne.n	800104c <bh1750_ReadMeasurement+0x38>
		// set one shot high res measurement and wait 180 ms
		bh1750_Write(bh, BH1750_ONE_H_RES_MODE);
 800103c:	2120      	movs	r1, #32
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f826 	bl	8001090 <bh1750_Write>
		HAL_Delay(180);
 8001044:	20b4      	movs	r0, #180	; 0xb4
 8001046:	f001 fa87 	bl	8002558 <HAL_Delay>
 800104a:	e00a      	b.n	8001062 <bh1750_ReadMeasurement+0x4e>
	} else if (bh->work_mode == BH1750_ONE_H_RES2_MODE) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	2b21      	cmp	r3, #33	; 0x21
 8001052:	d106      	bne.n	8001062 <bh1750_ReadMeasurement+0x4e>
		// set one shot high res 2 measurement and wait 180 ms
		bh1750_Write(bh, BH1750_ONE_H_RES2_MODE);
 8001054:	2121      	movs	r1, #33	; 0x21
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f81a 	bl	8001090 <bh1750_Write>
		HAL_Delay(180);
 800105c:	20b4      	movs	r0, #180	; 0xb4
 800105e:	f001 fa7b 	bl	8002558 <HAL_Delay>
	}

	uint16_t temp = bh1750_Read(bh);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f828 	bl	80010b8 <bh1750_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	81fb      	strh	r3, [r7, #14]
	bh->lx = (temp / 1.2f);
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001076:	eddf 6a05 	vldr	s13, [pc, #20]	; 800108c <bh1750_ReadMeasurement+0x78>
 800107a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edc3 7a02 	vstr	s15, [r3, #8]
	return;
 8001084:	bf00      	nop
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	3f99999a 	.word	0x3f99999a

08001090 <bh1750_Write>:


HAL_StatusTypeDef bh1750_Write(bh1750_t *bh, uint8_t data) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_Master_Transmit(bh->i2c, BH1750_I2C_ADDR, &data, 1, 100);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	1cfa      	adds	r2, r7, #3
 80010a2:	2364      	movs	r3, #100	; 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	21b8      	movs	r1, #184	; 0xb8
 80010aa:	f001 ffcd 	bl	8003048 <HAL_I2C_Master_Transmit>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <bh1750_Read>:

uint16_t bh1750_Read(bh1750_t *bh) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
	uint8_t temp[2];
	HAL_I2C_Master_Receive(bh->i2c, BH1750_I2C_ADDR, (uint8_t*)temp, 2, 100);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2302      	movs	r3, #2
 80010ce:	21b8      	movs	r1, #184	; 0xb8
 80010d0:	f002 f8ae 	bl	8003230 <HAL_I2C_Master_Receive>
	return ((temp[0] << 8) | temp[1]);
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	b29b      	uxth	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <BME280_WriteByte>:


#if MODE_I2C_NSPI
	// I2C communication
	void BME280_WriteByte(bme280_t *bme, uint8_t addr, uint8_t data)
	{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(bme->i2c, BME280_I2C_ADDR, addr, 1, &data, 1, 100);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	b29a      	uxth	r2, r3
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	21ec      	movs	r1, #236	; 0xec
 8001114:	f002 f982 	bl	800341c <HAL_I2C_Mem_Write>
	}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <BME280_ReadByte>:

	uint8_t BME280_ReadByte(bme280_t *bme, uint8_t addr)
	{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af04      	add	r7, sp, #16
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
		uint8_t tmp = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, addr, 1, &tmp, 1, 100);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	b29a      	uxth	r2, r3
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 030f 	add.w	r3, r7, #15
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	21ec      	movs	r1, #236	; 0xec
 800114a:	f002 fa7b 	bl	8003644 <HAL_I2C_Mem_Read>
		return tmp;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <BME280_Read2Bytes>:

	uint16_t BME280_Read2Bytes(bme280_t *bme, uint8_t addr)
	{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af04      	add	r7, sp, #16
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
		uint8_t temp[2];
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, addr, 1, (uint8_t*)temp, 2, 100);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	b29a      	uxth	r2, r3
 800116c:	2364      	movs	r3, #100	; 0x64
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2302      	movs	r3, #2
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	21ec      	movs	r1, #236	; 0xec
 800117e:	f002 fa61 	bl	8003644 <HAL_I2C_Mem_Read>
		return ((temp[0] << 8) | temp[1]);
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21b      	sxth	r3, r3
 8001190:	b29b      	uxth	r3, r3
	}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <BME280_ReadMeasurements>:
		uint8_t temp[3];
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, addr, 1, (uint8_t*)temp, 3, 100);
		return ((temp[0] << 16) | (temp[1] << 8) | temp[2]);
	}
	void BME280_ReadMeasurements(bme280_t *bme, int32_t *raw_temp, int32_t *raw_hum, int32_t *raw_press)
	{
 800119a:	b580      	push	{r7, lr}
 800119c:	b08a      	sub	sp, #40	; 0x28
 800119e:	af04      	add	r7, sp, #16
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	603b      	str	r3, [r7, #0]
		uint8_t temp[8];
		HAL_I2C_Mem_Read(bme->i2c, BME280_I2C_ADDR, BME280_PRESS_MSB_ADDR, 1, (uint8_t*)temp, 8, 100);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2308      	movs	r3, #8
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	22f7      	movs	r2, #247	; 0xf7
 80011be:	21ec      	movs	r1, #236	; 0xec
 80011c0:	f002 fa40 	bl	8003644 <HAL_I2C_Mem_Read>

		*raw_press = ((temp[0] << 16) | (temp[1] << 8) | temp[2]);
 80011c4:	7c3b      	ldrb	r3, [r7, #16]
 80011c6:	041a      	lsls	r2, r3, #16
 80011c8:	7c7b      	ldrb	r3, [r7, #17]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	4313      	orrs	r3, r2
 80011ce:	7cba      	ldrb	r2, [r7, #18]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	601a      	str	r2, [r3, #0]
		*raw_temp = ((temp[3] << 16) | (temp[4] << 8) | temp[5]);
 80011d6:	7cfb      	ldrb	r3, [r7, #19]
 80011d8:	041a      	lsls	r2, r3, #16
 80011da:	7d3b      	ldrb	r3, [r7, #20]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	4313      	orrs	r3, r2
 80011e0:	7d7a      	ldrb	r2, [r7, #21]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	601a      	str	r2, [r3, #0]
		*raw_hum = ((temp[6] << 8) | temp[7]);
 80011e8:	7dbb      	ldrb	r3, [r7, #22]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	7dfa      	ldrb	r2, [r7, #23]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
		return;
 80011f4:	bf00      	nop
	}
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <BME280_Read2BytesRV>:
		return;
	}
#endif

uint16_t BME280_Read2BytesRV(bme280_t *bme, uint8_t addr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = BME280_Read2Bytes(bme, addr);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4619      	mov	r1, r3
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ffa3 	bl	8001158 <BME280_Read2Bytes>
 8001212:	4603      	mov	r3, r0
 8001214:	81fb      	strh	r3, [r7, #14]
	return (temp >> 8 | temp << 8);
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	b29b      	uxth	r3, r3
 800121c:	b21a      	sxth	r2, r3
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	b29b      	uxth	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <BME280_Callibrating>:


uint8_t BME280_Callibrating(bme280_t *bme)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	uint8_t status = BME280_ReadByte(bme,BME280_STATUS_ADDR);
 800123a:	21f3      	movs	r1, #243	; 0xf3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff6f 	bl	8001120 <BME280_ReadByte>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]
	return ((status & 1 ) != 0) ? 1 : 0; // return 1 if sensor is calibrating else return 0
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <BME280_Init>:



void BME280_Init(bme280_t *bme)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	// initialize values for temperature, humidity and pressure
	bme->temp = -100.0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a85      	ldr	r2, [pc, #532]	; (8001478 <BME280_Init+0x220>)
 8001264:	60da      	str	r2, [r3, #12]
	bme->press = -100.0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a83      	ldr	r2, [pc, #524]	; (8001478 <BME280_Init+0x220>)
 800126a:	615a      	str	r2, [r3, #20]
	bme->hum = -100.0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a82      	ldr	r2, [pc, #520]	; (8001478 <BME280_Init+0x220>)
 8001270:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
		HAL_GPIO_WritePin(bme->GPIO_port, bme->GPIO_pin, GPIO_PIN_SET);
	#endif

	// performing soft reset of the board
	BME280_WriteByte(bme, BME280_RESET_ADDR, 0xB6);
 8001272:	22b6      	movs	r2, #182	; 0xb6
 8001274:	21e0      	movs	r1, #224	; 0xe0
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff38 	bl	80010ec <BME280_WriteByte>
	HAL_Delay(50);
 800127c:	2032      	movs	r0, #50	; 0x32
 800127e:	f001 f96b 	bl	8002558 <HAL_Delay>

	// waiting for end of calibration
	while(BME280_Callibrating(bme))
 8001282:	e002      	b.n	800128a <BME280_Init+0x32>
	{
		HAL_Delay(10);
 8001284:	200a      	movs	r0, #10
 8001286:	f001 f967 	bl	8002558 <HAL_Delay>
	while(BME280_Callibrating(bme))
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffd1 	bl	8001232 <BME280_Callibrating>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f6      	bne.n	8001284 <BME280_Init+0x2c>
	}

	//reading calibration data from sensor
	comp_data.t1 = BME280_Read2BytesRV(bme,BME280_DIG_T1_ADDR);
 8001296:	2188      	movs	r1, #136	; 0x88
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffaf 	bl	80011fc <BME280_Read2BytesRV>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <BME280_Init+0x224>)
 80012a4:	801a      	strh	r2, [r3, #0]
	comp_data.t2 = BME280_Read2BytesRV(bme,BME280_DIG_T2_ADDR);
 80012a6:	218a      	movs	r1, #138	; 0x8a
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ffa7 	bl	80011fc <BME280_Read2BytesRV>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b72      	ldr	r3, [pc, #456]	; (800147c <BME280_Init+0x224>)
 80012b4:	805a      	strh	r2, [r3, #2]
	comp_data.t3 = BME280_Read2BytesRV(bme,BME280_DIG_T3_ADDR);
 80012b6:	218c      	movs	r1, #140	; 0x8c
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff9f 	bl	80011fc <BME280_Read2BytesRV>
 80012be:	4603      	mov	r3, r0
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	4b6e      	ldr	r3, [pc, #440]	; (800147c <BME280_Init+0x224>)
 80012c4:	809a      	strh	r2, [r3, #4]

	comp_data.p1 = BME280_Read2BytesRV(bme,BME280_DIG_P1_ADDR);
 80012c6:	218e      	movs	r1, #142	; 0x8e
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff97 	bl	80011fc <BME280_Read2BytesRV>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b6a      	ldr	r3, [pc, #424]	; (800147c <BME280_Init+0x224>)
 80012d4:	80da      	strh	r2, [r3, #6]
	comp_data.p2 = BME280_Read2BytesRV(bme,BME280_DIG_P2_ADDR);
 80012d6:	2190      	movs	r1, #144	; 0x90
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff8f 	bl	80011fc <BME280_Read2BytesRV>
 80012de:	4603      	mov	r3, r0
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b66      	ldr	r3, [pc, #408]	; (800147c <BME280_Init+0x224>)
 80012e4:	811a      	strh	r2, [r3, #8]
	comp_data.p3 = BME280_Read2BytesRV(bme,BME280_DIG_P3_ADDR);
 80012e6:	2192      	movs	r1, #146	; 0x92
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff87 	bl	80011fc <BME280_Read2BytesRV>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b62      	ldr	r3, [pc, #392]	; (800147c <BME280_Init+0x224>)
 80012f4:	815a      	strh	r2, [r3, #10]
	comp_data.p4 = BME280_Read2BytesRV(bme,BME280_DIG_P4_ADDR);
 80012f6:	2194      	movs	r1, #148	; 0x94
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff7f 	bl	80011fc <BME280_Read2BytesRV>
 80012fe:	4603      	mov	r3, r0
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b5e      	ldr	r3, [pc, #376]	; (800147c <BME280_Init+0x224>)
 8001304:	819a      	strh	r2, [r3, #12]
	comp_data.p5 = BME280_Read2BytesRV(bme,BME280_DIG_P5_ADDR);
 8001306:	2196      	movs	r1, #150	; 0x96
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff77 	bl	80011fc <BME280_Read2BytesRV>
 800130e:	4603      	mov	r3, r0
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b5a      	ldr	r3, [pc, #360]	; (800147c <BME280_Init+0x224>)
 8001314:	81da      	strh	r2, [r3, #14]
	comp_data.p6 = BME280_Read2BytesRV(bme,BME280_DIG_P6_ADDR);
 8001316:	2198      	movs	r1, #152	; 0x98
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff6f 	bl	80011fc <BME280_Read2BytesRV>
 800131e:	4603      	mov	r3, r0
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <BME280_Init+0x224>)
 8001324:	821a      	strh	r2, [r3, #16]
	comp_data.p7 = BME280_Read2BytesRV(bme,BME280_DIG_P7_ADDR);
 8001326:	219a      	movs	r1, #154	; 0x9a
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff67 	bl	80011fc <BME280_Read2BytesRV>
 800132e:	4603      	mov	r3, r0
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b52      	ldr	r3, [pc, #328]	; (800147c <BME280_Init+0x224>)
 8001334:	825a      	strh	r2, [r3, #18]
	comp_data.p8 = BME280_Read2BytesRV(bme,BME280_DIG_P8_ADDR);
 8001336:	219c      	movs	r1, #156	; 0x9c
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff5f 	bl	80011fc <BME280_Read2BytesRV>
 800133e:	4603      	mov	r3, r0
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b4e      	ldr	r3, [pc, #312]	; (800147c <BME280_Init+0x224>)
 8001344:	829a      	strh	r2, [r3, #20]
	comp_data.p9 = BME280_Read2BytesRV(bme,BME280_DIG_P9_ADDR);
 8001346:	219e      	movs	r1, #158	; 0x9e
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff57 	bl	80011fc <BME280_Read2BytesRV>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <BME280_Init+0x224>)
 8001354:	82da      	strh	r2, [r3, #22]

	comp_data.h1 = BME280_ReadByte(bme,BME280_DIG_H1_ADDR);
 8001356:	21a1      	movs	r1, #161	; 0xa1
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fee1 	bl	8001120 <BME280_ReadByte>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <BME280_Init+0x224>)
 8001364:	761a      	strb	r2, [r3, #24]
	comp_data.h2 = BME280_Read2BytesRV(bme,BME280_DIG_H2_ADDR);
 8001366:	21e1      	movs	r1, #225	; 0xe1
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff47 	bl	80011fc <BME280_Read2BytesRV>
 800136e:	4603      	mov	r3, r0
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b42      	ldr	r3, [pc, #264]	; (800147c <BME280_Init+0x224>)
 8001374:	835a      	strh	r2, [r3, #26]
	comp_data.h3 = BME280_ReadByte(bme,BME280_DIG_H3_ADDR);
 8001376:	21e3      	movs	r1, #227	; 0xe3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fed1 	bl	8001120 <BME280_ReadByte>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <BME280_Init+0x224>)
 8001384:	771a      	strb	r2, [r3, #28]
	comp_data.h4 = ((BME280_ReadByte(bme,BME280_DIG_H4_ADDR) << 4) | (BME280_ReadByte(bme,BME280_DIG_H4_ADDR + 1) & 0xF));
 8001386:	21e4      	movs	r1, #228	; 0xe4
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fec9 	bl	8001120 <BME280_ReadByte>
 800138e:	4603      	mov	r3, r0
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	b21c      	sxth	r4, r3
 8001394:	21e5      	movs	r1, #229	; 0xe5
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fec2 	bl	8001120 <BME280_ReadByte>
 800139c:	4603      	mov	r3, r0
 800139e:	b21b      	sxth	r3, r3
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4323      	orrs	r3, r4
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <BME280_Init+0x224>)
 80013ac:	83da      	strh	r2, [r3, #30]
	comp_data.h5 = ((BME280_ReadByte(bme,BME280_DIG_H5_ADDR) >> 4) | (BME280_ReadByte(bme,BME280_DIG_H5_ADDR + 1) << 4));
 80013ae:	21e5      	movs	r1, #229	; 0xe5
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff feb5 	bl	8001120 <BME280_ReadByte>
 80013b6:	4603      	mov	r3, r0
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	b21c      	sxth	r4, r3
 80013be:	21e6      	movs	r1, #230	; 0xe6
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fead 	bl	8001120 <BME280_ReadByte>
 80013c6:	4603      	mov	r3, r0
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4323      	orrs	r3, r4
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <BME280_Init+0x224>)
 80013d2:	841a      	strh	r2, [r3, #32]
	comp_data.h6 = BME280_ReadByte(bme,BME280_DIG_H6_ADDR);
 80013d4:	21e7      	movs	r1, #231	; 0xe7
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fea2 	bl	8001120 <BME280_ReadByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <BME280_Init+0x224>)
 80013e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t temp_reg = BME280_ReadByte(bme, BME280_CTRL_HUM_ADDR);
 80013e6:	21f2      	movs	r1, #242	; 0xf2
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe99 	bl	8001120 <BME280_ReadByte>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
	temp_reg &= 0xF8;	// clear [2:0] bits
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	f023 0307 	bic.w	r3, r3, #7
 80013f8:	73fb      	strb	r3, [r7, #15]
	temp_reg |= bme->hum_oversampling;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	799a      	ldrb	r2, [r3, #6]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	4313      	orrs	r3, r2
 8001402:	73fb      	strb	r3, [r7, #15]
	BME280_WriteByte(bme,BME280_CTRL_HUM_ADDR,temp_reg);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	461a      	mov	r2, r3
 8001408:	21f2      	movs	r1, #242	; 0xf2
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fe6e 	bl	80010ec <BME280_WriteByte>
	BME280_WriteByte(bme,BME280_CTRL_MEAS_ADDR,((bme->temp_oversampling << 5) | (bme->press_oversampling << 2) | bme->work_mode));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	b25a      	sxtb	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	795b      	ldrb	r3, [r3, #5]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	b25b      	sxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b25a      	sxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	79db      	ldrb	r3, [r3, #7]
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	21f4      	movs	r1, #244	; 0xf4
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fe59 	bl	80010ec <BME280_WriteByte>

	if (bme->work_mode == BME280_NORMAL_MODE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	79db      	ldrb	r3, [r3, #7]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d115      	bne.n	800146e <BME280_Init+0x216>
	{
		// set filter and standby time for normal mode operation of sensor
		BME280_WriteByte(bme,BME280_CONFIG_ADDR,(uint8_t)(((bme->standby_time & 0x7) << 5) | ((bme->filter &7) << 2)) & 0xFC );
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7a1b      	ldrb	r3, [r3, #8]
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	b25a      	sxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7a5b      	ldrb	r3, [r3, #9]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	b25b      	sxtb	r3, r3
 8001452:	f003 031c 	and.w	r3, r3, #28
 8001456:	b25b      	sxtb	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b25b      	sxtb	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	21f5      	movs	r1, #245	; 0xf5
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fe3f 	bl	80010ec <BME280_WriteByte>
	}
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	c2c80000 	.word	0xc2c80000
 800147c:	20000208 	.word	0x20000208

08001480 <BME280_ReadAll>:
	bme->press = (int32_t)p / 256000.0;
	return;
}

void BME280_ReadAll(bme280_t *bme)
{
 8001480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001484:	b0a4      	sub	sp, #144	; 0x90
 8001486:	af00      	add	r7, sp, #0
 8001488:	64f8      	str	r0, [r7, #76]	; 0x4c
	// check mode of the sensor
	if (bme->work_mode == BME280_FORCED_MODE) {
 800148a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800148c:	79db      	ldrb	r3, [r3, #7]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d12c      	bne.n	80014ec <BME280_ReadAll+0x6c>
		uint8_t curr_mode;
		// force measurement
		uint8_t control = BME280_ReadByte(bme, BME280_CTRL_MEAS_ADDR);
 8001492:	21f4      	movs	r1, #244	; 0xf4
 8001494:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001496:	f7ff fe43 	bl	8001120 <BME280_ReadByte>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		control &= ~(0x03);
 80014a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014a4:	f023 0303 	bic.w	r3, r3, #3
 80014a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		control |= BME280_FORCED_MODE;
 80014ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		BME280_WriteByte(bme, BME280_CTRL_MEAS_ADDR, control);
 80014b8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014bc:	461a      	mov	r2, r3
 80014be:	21f4      	movs	r1, #244	; 0xf4
 80014c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014c2:	f7ff fe13 	bl	80010ec <BME280_WriteByte>

		// wait for end of measurements
		while (1) {
			curr_mode = BME280_ReadByte(bme, BME280_CTRL_MEAS_ADDR);
 80014c6:	21f4      	movs	r1, #244	; 0xf4
 80014c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014ca:	f7ff fe29 	bl	8001120 <BME280_ReadByte>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			curr_mode &= 0x03;
 80014d4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			// break if board finished measurements
			if (curr_mode == BME280_SLEEP_MODE)
 80014e0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d000      	beq.n	80014ea <BME280_ReadAll+0x6a>
			curr_mode = BME280_ReadByte(bme, BME280_CTRL_MEAS_ADDR);
 80014e8:	e7ed      	b.n	80014c6 <BME280_ReadAll+0x46>
				break;
 80014ea:	bf00      	nop
		}
	}
	int32_t raw_press, raw_temp, raw_hum;
	// read all raw data from the sensor
	BME280_ReadMeasurements(bme, &raw_temp, &raw_hum, &raw_press);
 80014ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014f0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80014f4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80014f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014fa:	f7ff fe4e 	bl	800119a <BME280_ReadMeasurements>

	// temperature part
	if (raw_temp == 0x800000) {
 80014fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001504:	d103      	bne.n	800150e <BME280_ReadAll+0x8e>
		bme->temp = -100;
 8001506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001508:	4b97      	ldr	r3, [pc, #604]	; (8001768 <BME280_ReadAll+0x2e8>)
 800150a:	60d3      	str	r3, [r2, #12]
 800150c:	e045      	b.n	800159a <BME280_ReadAll+0x11a>
	} else {
		raw_temp = raw_temp >> 4;
 800150e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001510:	111b      	asrs	r3, r3, #4
 8001512:	65bb      	str	r3, [r7, #88]	; 0x58

		uint32_t var1, var2;

		var1 = ((((raw_temp >> 3) - ((int32_t) comp_data.t1 << 1)))
 8001514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001516:	10da      	asrs	r2, r3, #3
 8001518:	4b94      	ldr	r3, [pc, #592]	; (800176c <BME280_ReadAll+0x2ec>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	1ad2      	subs	r2, r2, r3
				* ((int32_t) comp_data.t2)) >> 11;
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <BME280_ReadAll+0x2ec>)
 8001522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001526:	fb03 f302 	mul.w	r3, r3, r2
 800152a:	12db      	asrs	r3, r3, #11
		var1 = ((((raw_temp >> 3) - ((int32_t) comp_data.t1 << 1)))
 800152c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		var2 = (((((raw_temp >> 4) - ((int32_t) comp_data.t1))
 8001530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001532:	111a      	asrs	r2, r3, #4
 8001534:	4b8d      	ldr	r3, [pc, #564]	; (800176c <BME280_ReadAll+0x2ec>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	1ad1      	subs	r1, r2, r3
				* ((raw_temp >> 4) - ((int32_t) comp_data.t1))) >> 12)
 800153a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153c:	111a      	asrs	r2, r3, #4
 800153e:	4b8b      	ldr	r3, [pc, #556]	; (800176c <BME280_ReadAll+0x2ec>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	fb03 f301 	mul.w	r3, r3, r1
 8001548:	131a      	asrs	r2, r3, #12
				* ((int32_t) comp_data.t3)) >> 14;
 800154a:	4b88      	ldr	r3, [pc, #544]	; (800176c <BME280_ReadAll+0x2ec>)
 800154c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001550:	fb03 f302 	mul.w	r3, r3, r2
 8001554:	139b      	asrs	r3, r3, #14
		var2 = (((((raw_temp >> 4) - ((int32_t) comp_data.t1))
 8001556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		// t_fine carries global temperature for compensation for humidity and pressure
		t_fine = var1 + var2;
 800155a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800155e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001562:	4413      	add	r3, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4b82      	ldr	r3, [pc, #520]	; (8001770 <BME280_ReadAll+0x2f0>)
 8001568:	601a      	str	r2, [r3, #0]
		// return value in DegC
		bme->temp = ((t_fine * 5 + 128) >> 8) / 100.0;
 800156a:	4b81      	ldr	r3, [pc, #516]	; (8001770 <BME280_ReadAll+0x2f0>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	3380      	adds	r3, #128	; 0x80
 8001576:	121b      	asrs	r3, r3, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffd3 	bl	8000524 <__aeabi_i2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b7c      	ldr	r3, [pc, #496]	; (8001774 <BME280_ReadAll+0x2f4>)
 8001584:	f7ff f962 	bl	800084c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb0a 	bl	8000ba8 <__aeabi_d2f>
 8001594:	4602      	mov	r2, r0
 8001596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001598:	60da      	str	r2, [r3, #12]
	}

	// pressure part
	if (raw_temp == 0x800000) {
 800159a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800159c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80015a0:	d104      	bne.n	80015ac <BME280_ReadAll+0x12c>
		bme->press = 0;
 80015a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	e1d8      	b.n	800195e <BME280_ReadAll+0x4de>
	} else {
		raw_press = raw_press >> 4;
 80015ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ae:	111b      	asrs	r3, r3, #4
 80015b0:	65fb      	str	r3, [r7, #92]	; 0x5c

		int64_t val1, val2, p;

		val1 = ((int64_t) t_fine) - 128000;
 80015b2:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <BME280_ReadAll+0x2f0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015bc:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80015c0:	f143 35ff 	adc.w	r5, r3, #4294967295
 80015c4:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
		val2 = val1 * val1 * (int64_t) comp_data.p6;
 80015c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015cc:	fb03 f102 	mul.w	r1, r3, r2
 80015d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d4:	fb03 f302 	mul.w	r3, r3, r2
 80015d8:	18ca      	adds	r2, r1, r3
 80015da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015dc:	fba3 4503 	umull	r4, r5, r3, r3
 80015e0:	1953      	adds	r3, r2, r5
 80015e2:	461d      	mov	r5, r3
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <BME280_ReadAll+0x2ec>)
 80015e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015f0:	fb02 f005 	mul.w	r0, r2, r5
 80015f4:	fb04 f103 	mul.w	r1, r4, r3
 80015f8:	4401      	add	r1, r0
 80015fa:	fba4 2302 	umull	r2, r3, r4, r2
 80015fe:	4419      	add	r1, r3
 8001600:	460b      	mov	r3, r1
 8001602:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001606:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		val2 = val2 + ((val1 * (int64_t) comp_data.p5) << 17);
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <BME280_ReadAll+0x2ec>)
 800160c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001610:	b21a      	sxth	r2, r3
 8001612:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001616:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001618:	fb03 f001 	mul.w	r0, r3, r1
 800161c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800161e:	fb02 f101 	mul.w	r1, r2, r1
 8001622:	4408      	add	r0, r1
 8001624:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001626:	fba1 2302 	umull	r2, r3, r1, r2
 800162a:	18c1      	adds	r1, r0, r3
 800162c:	460b      	mov	r3, r1
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0459      	lsls	r1, r3, #17
 8001638:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800163c:	0450      	lsls	r0, r2, #17
 800163e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001642:	eb12 0800 	adds.w	r8, r2, r0
 8001646:	eb43 0901 	adc.w	r9, r3, r1
 800164a:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
		val2 = val2 + (((int64_t) comp_data.p4) << 35);
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <BME280_ReadAll+0x2ec>)
 8001650:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001654:	b21a      	sxth	r2, r3
 8001656:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	00d1      	lsls	r1, r2, #3
 8001664:	2000      	movs	r0, #0
 8001666:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800166a:	1814      	adds	r4, r2, r0
 800166c:	61bc      	str	r4, [r7, #24]
 800166e:	414b      	adcs	r3, r1
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001676:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		val1 = ((val1 * val1 * (int64_t) comp_data.p3) >> 8)
 800167a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800167c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800167e:	fb03 f102 	mul.w	r1, r3, r2
 8001682:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001686:	fb03 f302 	mul.w	r3, r3, r2
 800168a:	18ca      	adds	r2, r1, r3
 800168c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800168e:	fba3 4503 	umull	r4, r5, r3, r3
 8001692:	1953      	adds	r3, r2, r5
 8001694:	461d      	mov	r5, r3
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <BME280_ReadAll+0x2ec>)
 8001698:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800169c:	b21a      	sxth	r2, r3
 800169e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016a2:	fb02 f005 	mul.w	r0, r2, r5
 80016a6:	fb04 f103 	mul.w	r1, r4, r3
 80016aa:	4401      	add	r1, r0
 80016ac:	fba4 2302 	umull	r2, r3, r4, r2
 80016b0:	4419      	add	r1, r3
 80016b2:	460b      	mov	r3, r1
 80016b4:	f04f 0800 	mov.w	r8, #0
 80016b8:	f04f 0900 	mov.w	r9, #0
 80016bc:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80016c0:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80016c4:	ea4f 2923 	mov.w	r9, r3, asr #8
				+ ((val1 * (int64_t) comp_data.p2) << 12);
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <BME280_ReadAll+0x2ec>)
 80016ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016d4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80016d6:	fb03 f001 	mul.w	r0, r3, r1
 80016da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80016dc:	fb02 f101 	mul.w	r1, r2, r1
 80016e0:	1844      	adds	r4, r0, r1
 80016e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80016e4:	fba1 0102 	umull	r0, r1, r1, r2
 80016e8:	1863      	adds	r3, r4, r1
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	030b      	lsls	r3, r1, #12
 80016f6:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80016fa:	0302      	lsls	r2, r0, #12
		val1 = ((val1 * val1 * (int64_t) comp_data.p3) >> 8)
 80016fc:	eb18 0102 	adds.w	r1, r8, r2
 8001700:	6139      	str	r1, [r7, #16]
 8001702:	eb49 0303 	adc.w	r3, r9, r3
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800170c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		val1 = (((((int64_t) 1) << 47) + val1)) * ((int64_t) comp_data.p1) >> 33;
 8001710:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001714:	1c11      	adds	r1, r2, #0
 8001716:	6439      	str	r1, [r7, #64]	; 0x40
 8001718:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 800171c:	647b      	str	r3, [r7, #68]	; 0x44
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <BME280_ReadAll+0x2ec>)
 8001720:	88db      	ldrh	r3, [r3, #6]
 8001722:	b29a      	uxth	r2, r3
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800172c:	4629      	mov	r1, r5
 800172e:	fb02 f001 	mul.w	r0, r2, r1
 8001732:	4621      	mov	r1, r4
 8001734:	fb01 f103 	mul.w	r1, r1, r3
 8001738:	4401      	add	r1, r0
 800173a:	4620      	mov	r0, r4
 800173c:	fba0 2302 	umull	r2, r3, r0, r2
 8001740:	4419      	add	r1, r3
 8001742:	460b      	mov	r3, r1
 8001744:	f04f 0000 	mov.w	r0, #0
 8001748:	f04f 0100 	mov.w	r1, #0
 800174c:	1058      	asrs	r0, r3, #1
 800174e:	17d9      	asrs	r1, r3, #31
 8001750:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78

		if (val1 == 0) {
 8001754:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001758:	4313      	orrs	r3, r2
 800175a:	d10d      	bne.n	8001778 <BME280_ReadAll+0x2f8>
			// avoid division by 0
			bme->press = 0;
 800175c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	e0fb      	b.n	800195e <BME280_ReadAll+0x4de>
 8001766:	bf00      	nop
 8001768:	c2c80000 	.word	0xc2c80000
 800176c:	20000208 	.word	0x20000208
 8001770:	2000022c 	.word	0x2000022c
 8001774:	40590000 	.word	0x40590000
		} else {
			p = 1048576 - raw_press;
 8001778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800177a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800177e:	461a      	mov	r2, r3
 8001780:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001784:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			p = (((p << 31) - val2) * 3125) / val1;
 8001788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800178a:	105b      	asrs	r3, r3, #1
 800178c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800178e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001790:	07db      	lsls	r3, r3, #31
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38
 8001794:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001798:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800179c:	4621      	mov	r1, r4
 800179e:	ebb1 0a02 	subs.w	sl, r1, r2
 80017a2:	4629      	mov	r1, r5
 80017a4:	eb61 0b03 	sbc.w	fp, r1, r3
 80017a8:	4652      	mov	r2, sl
 80017aa:	465b      	mov	r3, fp
 80017ac:	1891      	adds	r1, r2, r2
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	415b      	adcs	r3, r3
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017b8:	eb12 020a 	adds.w	r2, r2, sl
 80017bc:	eb43 030b 	adc.w	r3, r3, fp
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	0199      	lsls	r1, r3, #6
 80017ca:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80017ce:	0190      	lsls	r0, r2, #6
 80017d0:	1812      	adds	r2, r2, r0
 80017d2:	eb41 0303 	adc.w	r3, r1, r3
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0099      	lsls	r1, r3, #2
 80017e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017e4:	0090      	lsls	r0, r2, #2
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	eb12 020a 	adds.w	r2, r2, sl
 80017ee:	eb43 030b 	adc.w	r3, r3, fp
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	0099      	lsls	r1, r3, #2
 80017fc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001800:	0090      	lsls	r0, r2, #2
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	eb12 010a 	adds.w	r1, r2, sl
 800180a:	6339      	str	r1, [r7, #48]	; 0x30
 800180c:	eb43 030b 	adc.w	r3, r3, fp
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
 8001812:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001816:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800181a:	f7ff fa15 	bl	8000c48 <__aeabi_ldivmod>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			val1 = (((int64_t) comp_data.p9) * (p >> 13) * (p >> 13)) >> 25;
 8001826:	4b86      	ldr	r3, [pc, #536]	; (8001a40 <BME280_ReadAll+0x5c0>)
 8001828:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800182c:	b218      	sxth	r0, r3
 800182e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001832:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	0b62      	lsrs	r2, r4, #13
 8001840:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001844:	136b      	asrs	r3, r5, #13
 8001846:	fb02 f501 	mul.w	r5, r2, r1
 800184a:	fb00 f403 	mul.w	r4, r0, r3
 800184e:	442c      	add	r4, r5
 8001850:	fba0 0102 	umull	r0, r1, r0, r2
 8001854:	1863      	adds	r3, r4, r1
 8001856:	4619      	mov	r1, r3
 8001858:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	0b62      	lsrs	r2, r4, #13
 8001866:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800186a:	136b      	asrs	r3, r5, #13
 800186c:	fb02 f501 	mul.w	r5, r2, r1
 8001870:	fb00 f403 	mul.w	r4, r0, r3
 8001874:	442c      	add	r4, r5
 8001876:	fba0 0102 	umull	r0, r1, r0, r2
 800187a:	1863      	adds	r3, r4, r1
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	0e42      	lsrs	r2, r0, #25
 8001888:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800188c:	164b      	asrs	r3, r1, #25
 800188e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			val2 = (((int64_t) comp_data.p8) * p) >> 19;
 8001892:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <BME280_ReadAll+0x5c0>)
 8001894:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001898:	b21a      	sxth	r2, r3
 800189a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800189e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018a0:	fb03 f001 	mul.w	r0, r3, r1
 80018a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80018a6:	fb02 f101 	mul.w	r1, r2, r1
 80018aa:	1844      	adds	r4, r0, r1
 80018ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018ae:	fba1 0102 	umull	r0, r1, r1, r2
 80018b2:	1863      	adds	r3, r4, r1
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	0cc2      	lsrs	r2, r0, #19
 80018c0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018c4:	14cb      	asrs	r3, r1, #19
 80018c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

			p = ((p + val1 + val2) >> 8) + (((int64_t) comp_data.p7) << 4);
 80018ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80018ce:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80018d2:	1884      	adds	r4, r0, r2
 80018d4:	62bc      	str	r4, [r7, #40]	; 0x28
 80018d6:	eb41 0303 	adc.w	r3, r1, r3
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018e0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018e4:	4621      	mov	r1, r4
 80018e6:	1889      	adds	r1, r1, r2
 80018e8:	6239      	str	r1, [r7, #32]
 80018ea:	4629      	mov	r1, r5
 80018ec:	eb43 0101 	adc.w	r1, r3, r1
 80018f0:	6279      	str	r1, [r7, #36]	; 0x24
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018fe:	4623      	mov	r3, r4
 8001900:	0a18      	lsrs	r0, r3, #8
 8001902:	462b      	mov	r3, r5
 8001904:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001908:	462b      	mov	r3, r5
 800190a:	1219      	asrs	r1, r3, #8
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <BME280_ReadAll+0x5c0>)
 800190e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001912:	b21c      	sxth	r4, r3
 8001914:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	012b      	lsls	r3, r5, #4
 8001922:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001926:	0122      	lsls	r2, r4, #4
 8001928:	1884      	adds	r4, r0, r2
 800192a:	603c      	str	r4, [r7, #0]
 800192c:	eb41 0303 	adc.w	r3, r1, r3
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001936:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			// returning value in hPa
			bme->press = (int32_t) p / 25600.0;
 800193a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fdf1 	bl	8000524 <__aeabi_i2d>
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <BME280_ReadAll+0x5c4>)
 8001948:	f7fe ff80 	bl	800084c <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f928 	bl	8000ba8 <__aeabi_d2f>
 8001958:	4602      	mov	r2, r0
 800195a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800195c:	615a      	str	r2, [r3, #20]
		}
	}

	// humidity part
	if (raw_hum == 0x8000) {
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001964:	d103      	bne.n	800196e <BME280_ReadAll+0x4ee>
		bme->hum = -100;
 8001966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001968:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <BME280_ReadAll+0x5c8>)
 800196a:	611a      	str	r2, [r3, #16]
		float h = (val1 >> 12);
		// convert value to final % RH float value
		bme->hum = h / 1024.0;
	}

	return;
 800196c:	e063      	b.n	8001a36 <BME280_ReadAll+0x5b6>
		val1 = (t_fine - ((int32_t) 76800));
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <BME280_ReadAll+0x5cc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (((((raw_hum << 14) - (((int32_t) comp_data.h4) << 20) -
 8001978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197a:	039a      	lsls	r2, r3, #14
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <BME280_ReadAll+0x5c0>)
 800197e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001982:	051b      	lsls	r3, r3, #20
 8001984:	1ad2      	subs	r2, r2, r3
					(((int32_t) comp_data.h5) * val1)) + ((int32_t) 16384)) >> 15) *
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <BME280_ReadAll+0x5c0>)
 8001988:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800198c:	4619      	mov	r1, r3
 800198e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001990:	fb03 f301 	mul.w	r3, r3, r1
		val1 = (((((raw_hum << 14) - (((int32_t) comp_data.h4) << 20) -
 8001994:	1ad3      	subs	r3, r2, r3
					(((int32_t) comp_data.h5) * val1)) + ((int32_t) 16384)) >> 15) *
 8001996:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800199a:	13db      	asrs	r3, r3, #15
					(((((((val1 * ((int32_t) comp_data.h6)) >> 10) *
 800199c:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <BME280_ReadAll+0x5c0>)
 800199e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019a2:	4611      	mov	r1, r2
 80019a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019a6:	fb02 f201 	mul.w	r2, r2, r1
 80019aa:	1292      	asrs	r2, r2, #10
					(((val1 * ((int32_t) comp_data.h3)) >> 11) +
 80019ac:	4924      	ldr	r1, [pc, #144]	; (8001a40 <BME280_ReadAll+0x5c0>)
 80019ae:	7f09      	ldrb	r1, [r1, #28]
 80019b0:	4608      	mov	r0, r1
 80019b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80019b4:	fb01 f100 	mul.w	r1, r1, r0
 80019b8:	12c9      	asrs	r1, r1, #11
 80019ba:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					(((((((val1 * ((int32_t) comp_data.h6)) >> 10) *
 80019be:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
 80019c2:	1292      	asrs	r2, r2, #10
 80019c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					((int32_t) comp_data.h2) + 8192) >> 14));
 80019c8:	491d      	ldr	r1, [pc, #116]	; (8001a40 <BME280_ReadAll+0x5c0>)
 80019ca:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
					((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
 80019ce:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t) comp_data.h2) + 8192) >> 14));
 80019d2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019d6:	1392      	asrs	r2, r2, #14
		val1 = (((((raw_hum << 14) - (((int32_t) comp_data.h4) << 20) -
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (val1 - (((((val1 >> 15) * (val1 >> 15)) >> 7) *
 80019de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019e0:	13db      	asrs	r3, r3, #15
 80019e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019e4:	13d2      	asrs	r2, r2, #15
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	11db      	asrs	r3, r3, #7
					((int32_t) comp_data.h1)) >> 4));
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <BME280_ReadAll+0x5c0>)
 80019ee:	7e12      	ldrb	r2, [r2, #24]
		val1 = (val1 - (((((val1 >> 15) * (val1 >> 15)) >> 7) *
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
					((int32_t) comp_data.h1)) >> 4));
 80019f4:	111b      	asrs	r3, r3, #4
		val1 = (val1 - (((((val1 >> 15) * (val1 >> 15)) >> 7) *
 80019f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (val1 < 0) ? 0 : val1;
 80019fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a02:	667b      	str	r3, [r7, #100]	; 0x64
		val1 = (val1 > 419430400) ? 419430400 : val1;
 8001a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a06:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a0a:	bfa8      	it	ge
 8001a0c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a10:	667b      	str	r3, [r7, #100]	; 0x64
		float h = (val1 >> 12);
 8001a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a14:	131b      	asrs	r3, r3, #12
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		bme->hum = h / 1024.0;
 8001a22:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a26:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001a50 <BME280_ReadAll+0x5d0>
 8001a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a30:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 8001a34:	bf00      	nop
}
 8001a36:	3790      	adds	r7, #144	; 0x90
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000208 	.word	0x20000208
 8001a44:	40d90000 	.word	0x40d90000
 8001a48:	c2c80000 	.word	0xc2c80000
 8001a4c:	2000022c 	.word	0x2000022c
 8001a50:	44800000 	.word	0x44800000

08001a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_DMA_Init+0x38>)
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <MX_DMA_Init+0x38>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6493      	str	r3, [r2, #72]	; 0x48
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_DMA_Init+0x38>)
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2045      	movs	r0, #69	; 0x45
 8001a78:	f000 fe8d 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001a7c:	2045      	movs	r0, #69	; 0x45
 8001a7e:	f000 fea6 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <MX_GPIO_Init+0xec>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_PDN_GPIO_Port, BT_PDN_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2102      	movs	r1, #2
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f001 f9e7 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
 8001afa:	2201      	movs	r2, #1
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b02:	f001 f9e1 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2108      	movs	r1, #8
 8001b0a:	481d      	ldr	r0, [pc, #116]	; (8001b80 <MX_GPIO_Init+0xf0>)
 8001b0c:	f001 f9dc 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BT_PDN_Pin|BT_WAKEUP_Pin;
 8001b10:	2382      	movs	r3, #130	; 0x82
 8001b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2a:	f001 f863 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_INT_Pin;
 8001b2e:	2310      	movs	r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_GPIO_Init+0xf4>)
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_INT_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f001 f856 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <MX_GPIO_Init+0xf0>)
 8001b60:	f001 f848 	bl	8002bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f000 fe14 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f000 fe2d 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	10310000 	.word	0x10310000

08001b88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <MX_I2C1_Init+0x78>)
 8001b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001b94:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <MX_I2C1_Init+0x7c>)
 8001b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc2:	480e      	ldr	r0, [pc, #56]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bc4:	f001 f9b0 	bl	8002f28 <HAL_I2C_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bce:	f000 fa15 	bl	8001ffc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bd6:	f002 f8d7 	bl	8003d88 <HAL_I2CEx_ConfigAnalogFilter>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001be0:	f000 fa0c 	bl	8001ffc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001be4:	2100      	movs	r1, #0
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001be8:	f002 f919 	bl	8003e1e <HAL_I2CEx_ConfigDigitalFilter>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bf2:	f000 fa03 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000230 	.word	0x20000230
 8001c00:	40005400 	.word	0x40005400
 8001c04:	00506682 	.word	0x00506682

08001c08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b09e      	sub	sp, #120	; 0x78
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2254      	movs	r2, #84	; 0x54
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 f947 	bl	8005ebc <memset>
  if(i2cHandle->Instance==I2C1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_I2C_MspInit+0xa4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d135      	bne.n	8001ca4 <HAL_I2C_MspInit+0x9c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c38:	2340      	movs	r3, #64	; 0x40
 8001c3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fffd 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c50:	f000 f9d4 	bl	8001ffc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_I2C_MspInit+0xa8>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <HAL_I2C_MspInit+0xa8>)
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_I2C_MspInit+0xa8>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c70:	2312      	movs	r3, #18
 8001c72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c84:	4619      	mov	r1, r3
 8001c86:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <HAL_I2C_MspInit+0xac>)
 8001c88:	f000 ffb4 	bl	8002bf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_I2C_MspInit+0xa8>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_I2C_MspInit+0xa8>)
 8001c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c96:	6593      	str	r3, [r2, #88]	; 0x58
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_I2C_MspInit+0xa8>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3778      	adds	r7, #120	; 0x78
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40005400 	.word	0x40005400
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc0:	f000 fbd5 	bl	800246e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc4:	f000 f8ca 	bl	8001e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc8:	f7ff fee2 	bl	8001a90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ccc:	f7ff ff5c 	bl	8001b88 <MX_I2C1_Init>
  MX_DMA_Init();
 8001cd0:	f7ff fec0 	bl	8001a54 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001cd4:	f000 faf0 	bl	80022b8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cdc:	f000 fc3c 	bl	8002558 <HAL_Delay>

  HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f001 f8ee 	bl	8002ec8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f000 fc33 	bl	8002558 <HAL_Delay>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*) "TTM: NAM-?\n\r\0", 13, 100);
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	220d      	movs	r2, #13
 8001cf6:	494f      	ldr	r1, [pc, #316]	; (8001e34 <main+0x17c>)
 8001cf8:	484f      	ldr	r0, [pc, #316]	; (8001e38 <main+0x180>)
 8001cfa:	f003 fae7 	bl	80052cc <HAL_UART_Transmit>
  HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d06:	f001 f8df 	bl	8002ec8 <HAL_GPIO_WritePin>


  bme.i2c = &hi2c1;
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <main+0x184>)
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <main+0x188>)
 8001d0e:	601a      	str	r2, [r3, #0]

  bme.filter = BME280_FILTER_OFF;
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <main+0x184>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	725a      	strb	r2, [r3, #9]
  bme.temp_oversampling = BME280_TEMPERATURE_OVER_1;
 8001d16:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <main+0x184>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	711a      	strb	r2, [r3, #4]
  bme.press_oversampling = BME280_PRESSURE_OVER_1;
 8001d1c:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <main+0x184>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	715a      	strb	r2, [r3, #5]
  bme.hum_oversampling = BME280_HUMIDITY_OVER_1;
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <main+0x184>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	719a      	strb	r2, [r3, #6]
  bme.work_mode = BME280_NORMAL_MODE;
 8001d28:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <main+0x184>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	71da      	strb	r2, [r3, #7]
  bme.standby_time = BME280_STANDBY_20;
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <main+0x184>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	721a      	strb	r2, [r3, #8]

  bh.i2c = &hi2c1;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <main+0x18c>)
 8001d36:	4a42      	ldr	r2, [pc, #264]	; (8001e40 <main+0x188>)
 8001d38:	601a      	str	r2, [r3, #0]
  bh.work_mode = BH1750_ONE_H_RES2_MODE;
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <main+0x18c>)
 8001d3c:	2221      	movs	r2, #33	; 0x21
 8001d3e:	711a      	strb	r2, [r3, #4]

  BME280_Init(&bme);
 8001d40:	483e      	ldr	r0, [pc, #248]	; (8001e3c <main+0x184>)
 8001d42:	f7ff fa89 	bl	8001258 <BME280_Init>
  bh1750_init(&bh);
 8001d46:	483f      	ldr	r0, [pc, #252]	; (8001e44 <main+0x18c>)
 8001d48:	f7ff f94a 	bl	8000fe0 <bh1750_init>
  HAL_Delay(1000);
 8001d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d50:	f000 fc02 	bl	8002558 <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	2108      	movs	r1, #8
 8001d58:	483b      	ldr	r0, [pc, #236]	; (8001e48 <main+0x190>)
 8001d5a:	f001 f8b5 	bl	8002ec8 <HAL_GPIO_WritePin>
  BME280_ReadAll(&bme);
 8001d5e:	4837      	ldr	r0, [pc, #220]	; (8001e3c <main+0x184>)
 8001d60:	f7ff fb8e 	bl	8001480 <BME280_ReadAll>
  bh1750_ReadMeasurement(&bh);
 8001d64:	4837      	ldr	r0, [pc, #220]	; (8001e44 <main+0x18c>)
 8001d66:	f7ff f955 	bl	8001014 <bh1750_ReadMeasurement>
  HAL_Delay(1000);
 8001d6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d6e:	f000 fbf3 	bl	8002558 <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2108      	movs	r1, #8
 8001d76:	4834      	ldr	r0, [pc, #208]	; (8001e48 <main+0x190>)
 8001d78:	f001 f8a6 	bl	8002ec8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SystemClock_Config();
 8001d7c:	f000 f86e 	bl	8001e5c <SystemClock_Config>
	HAL_ResumeTick();
 8001d80:	f000 fc1e 	bl	80025c0 <HAL_ResumeTick>
	  if (bt_state == bt_connected) {
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <main+0x194>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d14c      	bne.n	8001e26 <main+0x16e>
		  // read data form all sensors
		  BME280_ReadAll(&bme);
 8001d8c:	482b      	ldr	r0, [pc, #172]	; (8001e3c <main+0x184>)
 8001d8e:	f7ff fb77 	bl	8001480 <BME280_ReadAll>
		  bh1750_ReadMeasurement(&bh);
 8001d92:	482c      	ldr	r0, [pc, #176]	; (8001e44 <main+0x18c>)
 8001d94:	f7ff f93e 	bl	8001014 <bh1750_ReadMeasurement>
		  // turn it into string
		  len = sprintf((char*) tx_buff, "T:%.2f H:%.2f P:%.2f L:%.2f\n\r", bme.temp,bme.hum, bme.press, bh.lx);
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <main+0x184>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbd3 	bl	8000548 <__aeabi_f2d>
 8001da2:	4682      	mov	sl, r0
 8001da4:	468b      	mov	fp, r1
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <main+0x184>)
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbcc 	bl	8000548 <__aeabi_f2d>
 8001db0:	4604      	mov	r4, r0
 8001db2:	460d      	mov	r5, r1
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <main+0x184>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbc5 	bl	8000548 <__aeabi_f2d>
 8001dbe:	4680      	mov	r8, r0
 8001dc0:	4689      	mov	r9, r1
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <main+0x18c>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbbe 	bl	8000548 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dd4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dd8:	e9cd 4500 	strd	r4, r5, [sp]
 8001ddc:	4652      	mov	r2, sl
 8001dde:	465b      	mov	r3, fp
 8001de0:	491b      	ldr	r1, [pc, #108]	; (8001e50 <main+0x198>)
 8001de2:	481c      	ldr	r0, [pc, #112]	; (8001e54 <main+0x19c>)
 8001de4:	f004 fcdc 	bl	80067a0 <siprintf>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <main+0x1a0>)
 8001dee:	601a      	str	r2, [r3, #0]
		  // send it to Bluetooth module
		  HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f001 f866 	bl	8002ec8 <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f000 fbab 	bl	8002558 <HAL_Delay>
		  HAL_UART_Transmit(&hlpuart1, (uint8_t*) tx_buff, len, 100);
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <main+0x1a0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	2364      	movs	r3, #100	; 0x64
 8001e0a:	4912      	ldr	r1, [pc, #72]	; (8001e54 <main+0x19c>)
 8001e0c:	480a      	ldr	r0, [pc, #40]	; (8001e38 <main+0x180>)
 8001e0e:	f003 fa5d 	bl	80052cc <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(BT_WAKEUP_GPIO_Port, BT_WAKEUP_Pin, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1a:	f001 f855 	bl	8002ec8 <HAL_GPIO_WritePin>

		  HAL_Delay(5000);
 8001e1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e22:	f000 fb99 	bl	8002558 <HAL_Delay>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_SuspendTick();
 8001e26:	f000 fbbb 	bl	80025a0 <HAL_SuspendTick>
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f002 f8b8 	bl	8003fa0 <HAL_PWREx_EnterSTOP2Mode>
	SystemClock_Config();
 8001e30:	e7a4      	b.n	8001d7c <main+0xc4>
 8001e32:	bf00      	nop
 8001e34:	08008c38 	.word	0x08008c38
 8001e38:	2000033c 	.word	0x2000033c
 8001e3c:	200002b0 	.word	0x200002b0
 8001e40:	20000230 	.word	0x20000230
 8001e44:	200002c8 	.word	0x200002c8
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	200001f9 	.word	0x200001f9
 8001e50:	08008c48 	.word	0x08008c48
 8001e54:	200002d4 	.word	0x200002d4
 8001e58:	20000338 	.word	0x20000338

08001e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b096      	sub	sp, #88	; 0x58
 8001e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2244      	movs	r2, #68	; 0x44
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 f826 	bl	8005ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	463b      	mov	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e82:	f002 f837 	bl	8003ef4 <HAL_PWREx_ControlVoltageScaling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e8c:	f000 f8b6 	bl	8001ffc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e90:	f002 f812 	bl	8003eb8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <SystemClock_Config+0xc0>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <SystemClock_Config+0xc0>)
 8001e9c:	f023 0318 	bic.w	r3, r3, #24
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ea4:	2314      	movs	r3, #20
 8001ea6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001eb4:	2360      	movs	r3, #96	; 0x60
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001ec4:	2318      	movs	r3, #24
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 f88d 	bl	8003ff8 <HAL_RCC_OscConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001ee4:	f000 f88a 	bl	8001ffc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee8:	230f      	movs	r3, #15
 8001eea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eec:	2303      	movs	r3, #3
 8001eee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001efc:	463b      	mov	r3, r7
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fc99 	bl	8004838 <HAL_RCC_ClockConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001f0c:	f000 f876 	bl	8001ffc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f10:	f003 f88c 	bl	800502c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001f14:	bf00      	nop
 8001f16:	3758      	adds	r7, #88	; 0x58
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000

08001f20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/*
 * Receive data from bt module
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
	SystemClock_Config();
 8001f2a:	f7ff ff97 	bl	8001e5c <SystemClock_Config>
	HAL_ResumeTick();
 8001f2e:	f000 fb47 	bl	80025c0 <HAL_ResumeTick>
	//BME280_ReadAll(&bme);
	//bh1750_ReadMeasurement(&bh);
	//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);


	if (GPIO_Pin == BT_INT_Pin) {
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d14d      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0xb4>
		if (dma_state == 0) {
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_GPIO_EXTI_Callback+0x38>
			if (HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, (uint8_t*) rx_buff, 50) == HAL_OK) {
 8001f40:	2232      	movs	r2, #50	; 0x32
 8001f42:	4927      	ldr	r1, [pc, #156]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f44:	4827      	ldr	r0, [pc, #156]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f46:	f003 ff49 	bl	8005ddc <HAL_UARTEx_ReceiveToIdle_DMA>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d141      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0xb4>
				dma_state = 1;
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
			 }
			 memset((void*)rx_buff,'\0',50);
		}
	}

}
 8001f56:	e03d      	b.n	8001fd4 <HAL_GPIO_EXTI_Callback+0xb4>
		} else if (dma_state == 1) {
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d139      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0xb4>
			dma_state = 0;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
			 if (strncmp((char*) rx_buff, (char *)"TTM:CONNECT\r\n", 13) == 0) {
 8001f66:	220d      	movs	r2, #13
 8001f68:	491f      	ldr	r1, [pc, #124]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001f6a:	481d      	ldr	r0, [pc, #116]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f6c:	f004 fc38 	bl	80067e0 <strncmp>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <HAL_GPIO_EXTI_Callback+0x68>
				 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2108      	movs	r1, #8
 8001f7a:	481c      	ldr	r0, [pc, #112]	; (8001fec <HAL_GPIO_EXTI_Callback+0xcc>)
 8001f7c:	f000 ffa4 	bl	8002ec8 <HAL_GPIO_WritePin>
				 bt_state = bt_connected;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e020      	b.n	8001fca <HAL_GPIO_EXTI_Callback+0xaa>
			 } else if (strncmp((char*) rx_buff, (char *)"TTM:DISCONNECT\r\n", 16) == 0) {
 8001f88:	2210      	movs	r2, #16
 8001f8a:	491a      	ldr	r1, [pc, #104]	; (8001ff4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001f8c:	4814      	ldr	r0, [pc, #80]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f8e:	f004 fc27 	bl	80067e0 <strncmp>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d108      	bne.n	8001faa <HAL_GPIO_EXTI_Callback+0x8a>
				 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	4813      	ldr	r0, [pc, #76]	; (8001fec <HAL_GPIO_EXTI_Callback+0xcc>)
 8001f9e:	f000 ff93 	bl	8002ec8 <HAL_GPIO_WritePin>
				 bt_state = bt_disconnected;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e00f      	b.n	8001fca <HAL_GPIO_EXTI_Callback+0xaa>
			 else if (strncmp((char*) rx_buff, (char *)"TTM:DISCONNECT FOR TIMEOUT\r\n", 28) == 0) {
 8001faa:	221c      	movs	r2, #28
 8001fac:	4912      	ldr	r1, [pc, #72]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001fae:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001fb0:	f004 fc16 	bl	80067e0 <strncmp>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_GPIO_EXTI_Callback+0xaa>
			 	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <HAL_GPIO_EXTI_Callback+0xcc>)
 8001fc0:	f000 ff82 	bl	8002ec8 <HAL_GPIO_WritePin>
			 	bt_state = bt_disconnected;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
			 memset((void*)rx_buff,'\0',50);
 8001fca:	2232      	movs	r2, #50	; 0x32
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001fd0:	f003 ff74 	bl	8005ebc <memset>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200001f8 	.word	0x200001f8
 8001fe0:	2000027c 	.word	0x2000027c
 8001fe4:	2000033c 	.word	0x2000033c
 8001fe8:	08008c68 	.word	0x08008c68
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	200001f9 	.word	0x200001f9
 8001ff4:	08008c78 	.word	0x08008c78
 8001ff8:	08008c8c 	.word	0x08008c8c

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	e7fe      	b.n	8002004 <Error_Handler+0x8>
	...

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_MspInit+0x44>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_MspInit+0x44>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6613      	str	r3, [r2, #96]	; 0x60
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_MspInit+0x44>)
 800201c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_MspInit+0x44>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_MspInit+0x44>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	6593      	str	r3, [r2, #88]	; 0x58
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_MspInit+0x44>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <NMI_Handler+0x4>

08002056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <MemManage_Handler+0x4>

08002062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <BusFault_Handler+0x4>

08002068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <UsageFault_Handler+0x4>

0800206e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209c:	f000 fa3c 	bl	8002518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80020a8:	2010      	movs	r0, #16
 80020aa:	f000 ff25 	bl	8002ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA2_Channel7_IRQHandler+0x10>)
 80020ba:	f000 fcbb 	bl	8002a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200003c0 	.word	0x200003c0

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e2:	f003 fec1 	bl	8005e68 <__errno>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
	return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_exit>:

void _exit (int status)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffe7 	bl	80020d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800210a:	e7fe      	b.n	800210a <_exit+0x12>

0800210c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e00a      	b.n	8002134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800211e:	f3af 8000 	nop.w
 8002122:	4601      	mov	r1, r0
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbf0      	blt.n	800211e <_read+0x12>
	}

return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e009      	b.n	800216c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	60ba      	str	r2, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf1      	blt.n	8002158 <_write+0x12>
	}
	return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_close>:

int _close(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
	return -1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a6:	605a      	str	r2, [r3, #4]
	return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_isatty>:

int _isatty(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return 1;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f003 fe26 	bl	8005e68 <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	2000c000 	.word	0x2000c000
 8002248:	00000400 	.word	0x00000400
 800224c:	200001fc 	.word	0x200001fc
 8002250:	20000420 	.word	0x20000420

08002254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <SystemInit+0x5c>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <SystemInit+0x5c>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <SystemInit+0x60>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <SystemInit+0x60>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <SystemInit+0x60>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <SystemInit+0x60>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <SystemInit+0x60>)
 8002280:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002284:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002288:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <SystemInit+0x60>)
 800228c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002290:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <SystemInit+0x60>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <SystemInit+0x60>)
 8002298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SystemInit+0x60>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00
 80022b4:	40021000 	.word	0x40021000

080022b8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <MX_LPUART1_UART_Init+0x54>)
 80022c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <MX_LPUART1_UART_Init+0x50>)
 80022f6:	f002 ff9b 	bl	8005230 <HAL_UART_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002300:	f7ff fe7c 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	2000033c 	.word	0x2000033c
 800230c:	40008000 	.word	0x40008000

08002310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b09e      	sub	sp, #120	; 0x78
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	2254      	movs	r2, #84	; 0x54
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f003 fdc3 	bl	8005ebc <memset>
  if(uartHandle->Instance==LPUART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_UART_MspInit+0xfc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d160      	bne.n	8002402 <HAL_UART_MspInit+0xf2>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002340:	2320      	movs	r3, #32
 8002342:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4618      	mov	r0, r3
 800234e:	f002 fc79 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002358:	f7ff fe50 	bl	8001ffc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_UART_MspInit+0x100>)
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <HAL_UART_MspInit+0x100>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002368:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_UART_MspInit+0x100>)
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_UART_MspInit+0x100>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_UART_MspInit+0x100>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_UART_MspInit+0x100>)
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800238c:	230c      	movs	r3, #12
 800238e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800239c:	2308      	movs	r3, #8
 800239e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023a4:	4619      	mov	r1, r3
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023aa:	f000 fc23 	bl	8002bf4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_UART_MspInit+0x108>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80023e6:	480b      	ldr	r0, [pc, #44]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023e8:	f000 fa0c 	bl	8002804 <HAL_DMA_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80023f2:	f7ff fe03 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023fa:	671a      	str	r2, [r3, #112]	; 0x70
 80023fc:	4a05      	ldr	r2, [pc, #20]	; (8002414 <HAL_UART_MspInit+0x104>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002402:	bf00      	nop
 8002404:	3778      	adds	r7, #120	; 0x78
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40008000 	.word	0x40008000
 8002410:	40021000 	.word	0x40021000
 8002414:	200003c0 	.word	0x200003c0
 8002418:	40020480 	.word	0x40020480

0800241c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002420:	f7ff ff18 	bl	8002254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002424:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002426:	e003      	b.n	8002430 <LoopCopyDataInit>

08002428 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800242a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800242c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800242e:	3104      	adds	r1, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002434:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002436:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002438:	d3f6      	bcc.n	8002428 <CopyDataInit>
	ldr	r2, =_sbss
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <LoopForever+0x12>)
	b	LoopFillZerobss
 800243c:	e002      	b.n	8002444 <LoopFillZerobss>

0800243e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800243e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002440:	f842 3b04 	str.w	r3, [r2], #4

08002444 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <LoopForever+0x16>)
	cmp	r2, r3
 8002446:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002448:	d3f9      	bcc.n	800243e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800244a:	f003 fd13 	bl	8005e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800244e:	f7ff fc33 	bl	8001cb8 <main>

08002452 <LoopForever>:

LoopForever:
    b LoopForever
 8002452:	e7fe      	b.n	8002452 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002454:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8002458:	080090e4 	.word	0x080090e4
	ldr	r0, =_sdata
 800245c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002460:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002464:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002468:	2000041c 	.word	0x2000041c

0800246c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC1_IRQHandler>

0800246e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f981 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247e:	2000      	movs	r0, #0
 8002480:	f000 f80e 	bl	80024a0 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	e001      	b.n	8002494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002490:	f7ff fdba 	bl	8002008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002494:	79fb      	ldrb	r3, [r7, #7]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_InitTick+0x6c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_InitTick+0x70>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_InitTick+0x6c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f98d 	bl	80027ea <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d809      	bhi.n	80024f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024dc:	2200      	movs	r2, #0
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f000 f957 	bl	8002796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <HAL_InitTick+0x74>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e007      	b.n	8002500 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e004      	b.n	8002500 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e001      	b.n	8002500 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000008 	.word	0x20000008
 8002510:	20000000 	.word	0x20000000
 8002514:	20000004 	.word	0x20000004

08002518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x20>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x24>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4413      	add	r3, r2
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_IncTick+0x24>)
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000008 	.word	0x20000008
 800253c:	20000408 	.word	0x20000408

08002540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return uwTick;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_GetTick+0x14>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000408 	.word	0x20000408

08002558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff ffee 	bl	8002540 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d005      	beq.n	800257e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_Delay+0x44>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257e:	bf00      	nop
 8002580:	f7ff ffde 	bl	8002540 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f7      	bhi.n	8002580 <HAL_Delay+0x28>
  {
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000008 	.word	0x20000008

080025a0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_SuspendTick+0x1c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_SuspendTick+0x1c>)
 80025aa:	f023 0302 	bic.w	r3, r3, #2
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_ResumeTick+0x1c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <HAL_ResumeTick+0x1c>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e098      	b.n	8002948 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_DMA_Init+0x150>)
 800281e:	429a      	cmp	r2, r3
 8002820:	d80f      	bhi.n	8002842 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <HAL_DMA_Init+0x154>)
 800282a:	4413      	add	r3, r2
 800282c:	4a4b      	ldr	r2, [pc, #300]	; (800295c <HAL_DMA_Init+0x158>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	009a      	lsls	r2, r3, #2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a48      	ldr	r2, [pc, #288]	; (8002960 <HAL_DMA_Init+0x15c>)
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
 8002840:	e00e      	b.n	8002860 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_DMA_Init+0x160>)
 800284a:	4413      	add	r3, r2
 800284c:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_DMA_Init+0x158>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	009a      	lsls	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a42      	ldr	r2, [pc, #264]	; (8002968 <HAL_DMA_Init+0x164>)
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ba:	d039      	beq.n	8002930 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	4a27      	ldr	r2, [pc, #156]	; (8002960 <HAL_DMA_Init+0x15c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d11a      	bne.n	80028fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_DMA_Init+0x168>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f003 031c 	and.w	r3, r3, #28
 80028d2:	210f      	movs	r1, #15
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	4924      	ldr	r1, [pc, #144]	; (800296c <HAL_DMA_Init+0x168>)
 80028dc:	4013      	ands	r3, r2
 80028de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_DMA_Init+0x168>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f003 031c 	and.w	r3, r3, #28
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	491d      	ldr	r1, [pc, #116]	; (800296c <HAL_DMA_Init+0x168>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
 80028fa:	e019      	b.n	8002930 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028fc:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <HAL_DMA_Init+0x16c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f003 031c 	and.w	r3, r3, #28
 8002908:	210f      	movs	r1, #15
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	4917      	ldr	r1, [pc, #92]	; (8002970 <HAL_DMA_Init+0x16c>)
 8002912:	4013      	ands	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_DMA_Init+0x16c>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 031c 	and.w	r3, r3, #28
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	4911      	ldr	r1, [pc, #68]	; (8002970 <HAL_DMA_Init+0x16c>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40020407 	.word	0x40020407
 8002958:	bffdfff8 	.word	0xbffdfff8
 800295c:	cccccccd 	.word	0xcccccccd
 8002960:	40020000 	.word	0x40020000
 8002964:	bffdfbf8 	.word	0xbffdfbf8
 8002968:	40020400 	.word	0x40020400
 800296c:	400200a8 	.word	0x400200a8
 8002970:	400204a8 	.word	0x400204a8

08002974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_DMA_Start_IT+0x20>
 8002990:	2302      	movs	r3, #2
 8002992:	e04b      	b.n	8002a2c <HAL_DMA_Start_IT+0xb8>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d13a      	bne.n	8002a1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f8e0 	bl	8002b92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 020e 	orr.w	r2, r2, #14
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e00f      	b.n	8002a0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 020a 	orr.w	r2, r2, #10
 8002a0a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e005      	b.n	8002a2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f003 031c 	and.w	r3, r3, #28
 8002a54:	2204      	movs	r2, #4
 8002a56:	409a      	lsls	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d026      	beq.n	8002aae <HAL_DMA_IRQHandler+0x7a>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d021      	beq.n	8002aae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f003 021c 	and.w	r2, r3, #28
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	2104      	movs	r1, #4
 8002a96:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d071      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002aac:	e06c      	b.n	8002b88 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f003 031c 	and.w	r3, r3, #28
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d02e      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xec>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d029      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10b      	bne.n	8002af2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 020a 	bic.w	r2, r2, #10
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f003 021c 	and.w	r2, r3, #28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2102      	movs	r1, #2
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d038      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b1e:	e033      	b.n	8002b88 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	f003 031c 	and.w	r3, r3, #28
 8002b28:	2208      	movs	r2, #8
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02a      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x156>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d025      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 020e 	bic.w	r2, r2, #14
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f003 021c 	and.w	r2, r3, #28
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
}
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f003 021c 	and.w	r2, r3, #28
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d108      	bne.n	8002bd6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bd4:	e007      	b.n	8002be6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	60da      	str	r2, [r3, #12]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c02:	e148      	b.n	8002e96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 813a 	beq.w	8002e90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d00b      	beq.n	8002c3c <HAL_GPIO_Init+0x48>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d007      	beq.n	8002c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c30:	2b11      	cmp	r3, #17
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b12      	cmp	r3, #18
 8002c3a:	d130      	bne.n	8002c9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c72:	2201      	movs	r2, #1
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 0201 	and.w	r2, r3, #1
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0xea>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d123      	bne.n	8002d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	6939      	ldr	r1, [r7, #16]
 8002d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8094 	beq.w	8002e90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6c:	4a51      	ldr	r2, [pc, #324]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6613      	str	r3, [r2, #96]	; 0x60
 8002d74:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d80:	4a4d      	ldr	r2, [pc, #308]	; (8002eb8 <HAL_GPIO_Init+0x2c4>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002daa:	d00d      	beq.n	8002dc8 <HAL_GPIO_Init+0x1d4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a43      	ldr	r2, [pc, #268]	; (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <HAL_GPIO_Init+0x1d0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a42      	ldr	r2, [pc, #264]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_GPIO_Init+0x1cc>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e004      	b.n	8002dca <HAL_GPIO_Init+0x1d6>
 8002dc0:	2307      	movs	r3, #7
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x1d6>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_GPIO_Init+0x1d6>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	f002 0203 	and.w	r2, r2, #3
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	4093      	lsls	r3, r2
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dda:	4937      	ldr	r1, [pc, #220]	; (8002eb8 <HAL_GPIO_Init+0x2c4>)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	3302      	adds	r3, #2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e12:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e36:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	3301      	adds	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f47f aeaf 	bne.w	8002c04 <HAL_GPIO_Init+0x10>
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	48000400 	.word	0x48000400
 8002ec0:	48000800 	.word	0x48000800
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ee4:	e002      	b.n	8002eec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f802 	bl	8001f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40010400 	.word	0x40010400

08002f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e081      	b.n	800303e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fe5a 	bl	8001c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	e006      	b.n	8002fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d104      	bne.n	8002fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	ea42 0103 	orr.w	r1, r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1a      	ldr	r2, [r3, #32]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	460b      	mov	r3, r1
 8003056:	817b      	strh	r3, [r7, #10]
 8003058:	4613      	mov	r3, r2
 800305a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	f040 80da 	bne.w	800321e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2C_Master_Transmit+0x30>
 8003074:	2302      	movs	r3, #2
 8003076:	e0d3      	b.n	8003220 <HAL_I2C_Master_Transmit+0x1d8>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003080:	f7ff fa5e 	bl	8002540 <HAL_GetTick>
 8003084:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2319      	movs	r3, #25
 800308c:	2201      	movs	r2, #1
 800308e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fcbc 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0be      	b.n	8003220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2221      	movs	r2, #33	; 0x21
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2210      	movs	r2, #16
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	893a      	ldrh	r2, [r7, #8]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2bff      	cmp	r3, #255	; 0xff
 80030d2:	d90e      	bls.n	80030f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	4b51      	ldr	r3, [pc, #324]	; (8003228 <HAL_I2C_Master_Transmit+0x1e0>)
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fe1e 	bl	8003d2c <I2C_TransferConfig>
 80030f0:	e06c      	b.n	80031cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	b2da      	uxtb	r2, r3
 8003102:	8979      	ldrh	r1, [r7, #10]
 8003104:	4b48      	ldr	r3, [pc, #288]	; (8003228 <HAL_I2C_Master_Transmit+0x1e0>)
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fe0d 	bl	8003d2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003112:	e05b      	b.n	80031cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fcb9 	bl	8003a90 <I2C_WaitOnTXISFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e07b      	b.n	8003220 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d034      	beq.n	80031cc <HAL_I2C_Master_Transmit+0x184>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	d130      	bne.n	80031cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2200      	movs	r2, #0
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fc4b 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e04d      	b.n	8003220 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2bff      	cmp	r3, #255	; 0xff
 800318c:	d90e      	bls.n	80031ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	b2da      	uxtb	r2, r3
 800319a:	8979      	ldrh	r1, [r7, #10]
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fdc1 	bl	8003d2c <I2C_TransferConfig>
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	8979      	ldrh	r1, [r7, #10]
 80031be:	2300      	movs	r3, #0
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fdb0 	bl	8003d2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d19e      	bne.n	8003114 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	6a39      	ldr	r1, [r7, #32]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fc98 	bl	8003b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e01a      	b.n	8003220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2220      	movs	r2, #32
 80031f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_I2C_Master_Transmit+0x1e4>)
 80031fe:	400b      	ands	r3, r1
 8003200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	80002000 	.word	0x80002000
 800322c:	fe00e800 	.word	0xfe00e800

08003230 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	461a      	mov	r2, r3
 800323c:	460b      	mov	r3, r1
 800323e:	817b      	strh	r3, [r7, #10]
 8003240:	4613      	mov	r3, r2
 8003242:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	f040 80db 	bne.w	8003408 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_I2C_Master_Receive+0x30>
 800325c:	2302      	movs	r3, #2
 800325e:	e0d4      	b.n	800340a <HAL_I2C_Master_Receive+0x1da>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003268:	f7ff f96a 	bl	8002540 <HAL_GetTick>
 800326c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	2319      	movs	r3, #25
 8003274:	2201      	movs	r2, #1
 8003276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fbc8 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0bf      	b.n	800340a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2222      	movs	r2, #34	; 0x22
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2210      	movs	r2, #16
 8003296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	893a      	ldrh	r2, [r7, #8]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2bff      	cmp	r3, #255	; 0xff
 80032ba:	d90e      	bls.n	80032da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	4b52      	ldr	r3, [pc, #328]	; (8003414 <HAL_I2C_Master_Receive+0x1e4>)
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fd2a 	bl	8003d2c <I2C_TransferConfig>
 80032d8:	e06d      	b.n	80033b6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	4b49      	ldr	r3, [pc, #292]	; (8003414 <HAL_I2C_Master_Receive+0x1e4>)
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fd19 	bl	8003d2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80032fa:	e05c      	b.n	80033b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	6a39      	ldr	r1, [r7, #32]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fc41 	bl	8003b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e07c      	b.n	800340a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d034      	beq.n	80033b6 <HAL_I2C_Master_Receive+0x186>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	d130      	bne.n	80033b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2200      	movs	r2, #0
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fb56 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e04d      	b.n	800340a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	2bff      	cmp	r3, #255	; 0xff
 8003376:	d90e      	bls.n	8003396 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	22ff      	movs	r2, #255	; 0xff
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	b2da      	uxtb	r2, r3
 8003384:	8979      	ldrh	r1, [r7, #10]
 8003386:	2300      	movs	r3, #0
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fccc 	bl	8003d2c <I2C_TransferConfig>
 8003394:	e00f      	b.n	80033b6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	8979      	ldrh	r1, [r7, #10]
 80033a8:	2300      	movs	r3, #0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fcbb 	bl	8003d2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d19d      	bne.n	80032fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6a39      	ldr	r1, [r7, #32]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fba3 	bl	8003b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e01a      	b.n	800340a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2220      	movs	r2, #32
 80033da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_I2C_Master_Receive+0x1e8>)
 80033e8:	400b      	ands	r3, r1
 80033ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	80002400 	.word	0x80002400
 8003418:	fe00e800 	.word	0xfe00e800

0800341c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	4608      	mov	r0, r1
 8003426:	4611      	mov	r1, r2
 8003428:	461a      	mov	r2, r3
 800342a:	4603      	mov	r3, r0
 800342c:	817b      	strh	r3, [r7, #10]
 800342e:	460b      	mov	r3, r1
 8003430:	813b      	strh	r3, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 80f9 	bne.w	8003636 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_I2C_Mem_Write+0x34>
 800344a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0ed      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_I2C_Mem_Write+0x4e>
 8003466:	2302      	movs	r3, #2
 8003468:	e0e6      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003472:	f7ff f865 	bl	8002540 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2319      	movs	r3, #25
 800347e:	2201      	movs	r2, #1
 8003480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fac3 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0d1      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2221      	movs	r2, #33	; 0x21
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a3a      	ldr	r2, [r7, #32]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034bc:	88f8      	ldrh	r0, [r7, #6]
 80034be:	893a      	ldrh	r2, [r7, #8]
 80034c0:	8979      	ldrh	r1, [r7, #10]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4603      	mov	r3, r0
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f9d3 	bl	8003878 <I2C_RequestMemoryWrite>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0a9      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2bff      	cmp	r3, #255	; 0xff
 80034ec:	d90e      	bls.n	800350c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	22ff      	movs	r2, #255	; 0xff
 80034f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	2300      	movs	r3, #0
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fc11 	bl	8003d2c <I2C_TransferConfig>
 800350a:	e00f      	b.n	800352c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	b2da      	uxtb	r2, r3
 800351c:	8979      	ldrh	r1, [r7, #10]
 800351e:	2300      	movs	r3, #0
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fc00 	bl	8003d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 faad 	bl	8003a90 <I2C_WaitOnTXISFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e07b      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d034      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x1c8>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d130      	bne.n	80035e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	; 0x80
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fa3f 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e04d      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2bff      	cmp	r3, #255	; 0xff
 80035a4:	d90e      	bls.n	80035c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	22ff      	movs	r2, #255	; 0xff
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	8979      	ldrh	r1, [r7, #10]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fbb5 	bl	8003d2c <I2C_TransferConfig>
 80035c2:	e00f      	b.n	80035e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	2300      	movs	r3, #0
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fba4 	bl	8003d2c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d19e      	bne.n	800352c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fa8c 	bl	8003b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e01a      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2220      	movs	r2, #32
 8003608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_I2C_Mem_Write+0x224>)
 8003616:	400b      	ands	r3, r1
 8003618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	fe00e800 	.word	0xfe00e800

08003644 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	817b      	strh	r3, [r7, #10]
 8003656:	460b      	mov	r3, r1
 8003658:	813b      	strh	r3, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b20      	cmp	r3, #32
 8003668:	f040 80fd 	bne.w	8003866 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_I2C_Mem_Read+0x34>
 8003672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0f1      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_I2C_Mem_Read+0x4e>
 800368e:	2302      	movs	r3, #2
 8003690:	e0ea      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800369a:	f7fe ff51 	bl	8002540 <HAL_GetTick>
 800369e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2319      	movs	r3, #25
 80036a6:	2201      	movs	r2, #1
 80036a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f9af 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0d5      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2222      	movs	r2, #34	; 0x22
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2240      	movs	r2, #64	; 0x40
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e4:	88f8      	ldrh	r0, [r7, #6]
 80036e6:	893a      	ldrh	r2, [r7, #8]
 80036e8:	8979      	ldrh	r1, [r7, #10]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	4603      	mov	r3, r0
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f913 	bl	8003920 <I2C_RequestMemoryRead>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0ad      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2bff      	cmp	r3, #255	; 0xff
 8003714:	d90e      	bls.n	8003734 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	22ff      	movs	r2, #255	; 0xff
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	b2da      	uxtb	r2, r3
 8003722:	8979      	ldrh	r1, [r7, #10]
 8003724:	4b52      	ldr	r3, [pc, #328]	; (8003870 <HAL_I2C_Mem_Read+0x22c>)
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fafd 	bl	8003d2c <I2C_TransferConfig>
 8003732:	e00f      	b.n	8003754 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	b2da      	uxtb	r2, r3
 8003744:	8979      	ldrh	r1, [r7, #10]
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_I2C_Mem_Read+0x22c>)
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 faec 	bl	8003d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2200      	movs	r2, #0
 800375c:	2104      	movs	r1, #4
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f956 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07c      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d034      	beq.n	8003814 <HAL_I2C_Mem_Read+0x1d0>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d130      	bne.n	8003814 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	2200      	movs	r2, #0
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f927 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04d      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2bff      	cmp	r3, #255	; 0xff
 80037d4:	d90e      	bls.n	80037f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	8979      	ldrh	r1, [r7, #10]
 80037e4:	2300      	movs	r3, #0
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fa9d 	bl	8003d2c <I2C_TransferConfig>
 80037f2:	e00f      	b.n	8003814 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	b2da      	uxtb	r2, r3
 8003804:	8979      	ldrh	r1, [r7, #10]
 8003806:	2300      	movs	r3, #0
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fa8c 	bl	8003d2c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d19a      	bne.n	8003754 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f974 	bl	8003b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e01a      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2220      	movs	r2, #32
 8003838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_I2C_Mem_Read+0x230>)
 8003846:	400b      	ands	r3, r1
 8003848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	80002400 	.word	0x80002400
 8003874:	fe00e800 	.word	0xfe00e800

08003878 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	8979      	ldrh	r1, [r7, #10]
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <I2C_RequestMemoryWrite+0xa4>)
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fa43 	bl	8003d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f8f0 	bl	8003a90 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e02c      	b.n	8003914 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c0:	893b      	ldrh	r3, [r7, #8]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
 80038ca:	e015      	b.n	80038f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f8d6 	bl	8003a90 <I2C_WaitOnTXISFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e012      	b.n	8003914 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ee:	893b      	ldrh	r3, [r7, #8]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2200      	movs	r2, #0
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f884 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	80002000 	.word	0x80002000

08003920 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4603      	mov	r3, r0
 8003930:	817b      	strh	r3, [r7, #10]
 8003932:	460b      	mov	r3, r1
 8003934:	813b      	strh	r3, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	8979      	ldrh	r1, [r7, #10]
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <I2C_RequestMemoryRead+0xa4>)
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f9f0 	bl	8003d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	69b9      	ldr	r1, [r7, #24]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f89d 	bl	8003a90 <I2C_WaitOnTXISFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e02c      	b.n	80039ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003966:	893b      	ldrh	r3, [r7, #8]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
 8003970:	e015      	b.n	800399e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003972:	893b      	ldrh	r3, [r7, #8]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	b29b      	uxth	r3, r3
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	69b9      	ldr	r1, [r7, #24]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f883 	bl	8003a90 <I2C_WaitOnTXISFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e012      	b.n	80039ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003994:	893b      	ldrh	r3, [r7, #8]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2140      	movs	r1, #64	; 0x40
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f831 	bl	8003a10 <I2C_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	80002000 	.word	0x80002000

080039c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d103      	bne.n	80039e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d007      	beq.n	8003a04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	619a      	str	r2, [r3, #24]
  }
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a20:	e022      	b.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d01e      	beq.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2a:	f7fe fd89 	bl	8002540 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d113      	bne.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e00f      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d0cd      	beq.n	8003a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a9c:	e02c      	b.n	8003af8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f8dc 	bl	8003c60 <I2C_IsAcknowledgeFailed>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e02a      	b.n	8003b08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d01e      	beq.n	8003af8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fe fd41 	bl	8002540 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d113      	bne.n	8003af8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e007      	b.n	8003b08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d1cb      	bne.n	8003a9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b1c:	e028      	b.n	8003b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f89c 	bl	8003c60 <I2C_IsAcknowledgeFailed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e026      	b.n	8003b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fe fd05 	bl	8002540 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d113      	bne.n	8003b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e007      	b.n	8003b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d1cf      	bne.n	8003b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b94:	e055      	b.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f860 	bl	8003c60 <I2C_IsAcknowledgeFailed>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e053      	b.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d129      	bne.n	8003c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d105      	bne.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e03f      	b.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e022      	b.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0c:	f7fe fc98 	bl	8002540 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e007      	b.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d1a2      	bne.n	8003b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	fe00e800 	.word	0xfe00e800

08003c60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d151      	bne.n	8003d1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c7a:	e022      	b.n	8003cc2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d01e      	beq.n	8003cc2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fe fc5c 	bl	8002540 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <I2C_IsAcknowledgeFailed+0x3a>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d113      	bne.n	8003cc2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e02e      	b.n	8003d20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d1d5      	bne.n	8003c7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff fe71 	bl	80039c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <I2C_IsAcknowledgeFailed+0xc8>)
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f043 0204 	orr.w	r2, r3, #4
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	fe00e800 	.word	0xfe00e800

08003d2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	817b      	strh	r3, [r7, #10]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	0d5b      	lsrs	r3, r3, #21
 8003d48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <I2C_TransferConfig+0x58>)
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	43db      	mvns	r3, r3
 8003d52:	ea02 0103 	and.w	r1, r2, r3
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d5c:	7a7b      	ldrb	r3, [r7, #9]
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	03ff63ff 	.word	0x03ff63ff

08003d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d138      	bne.n	8003e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e032      	b.n	8003e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d139      	bne.n	8003ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e033      	b.n	8003eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2224      	movs	r2, #36	; 0x24
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40007000 	.word	0x40007000

08003ed8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40007000 	.word	0x40007000

08003ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f02:	d130      	bne.n	8003f66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f04:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f10:	d038      	beq.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2232      	movs	r2, #50	; 0x32
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	0c9b      	lsrs	r3, r3, #18
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f38:	e002      	b.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f40:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4c:	d102      	bne.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f2      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d110      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e00f      	b.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f72:	d007      	beq.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f7c:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40007000 	.word	0x40007000
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	431bde83 	.word	0x431bde83

08003fa0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003fcc:	bf30      	wfi
 8003fce:	e002      	b.n	8003fd6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fd0:	bf40      	sev
    __WFE();
 8003fd2:	bf20      	wfe
    __WFE();
 8003fd4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	4a06      	ldr	r2, [pc, #24]	; (8003ff4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	6113      	str	r3, [r2, #16]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f000 bc11 	b.w	800482e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400c:	4ba0      	ldr	r3, [pc, #640]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004016:	4b9e      	ldr	r3, [pc, #632]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80e4 	beq.w	80041f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x4c>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	f040 808b 	bne.w	8004152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b01      	cmp	r3, #1
 8004040:	f040 8087 	bne.w	8004152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004044:	4b92      	ldr	r3, [pc, #584]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x64>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e3e8      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	4b8b      	ldr	r3, [pc, #556]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <HAL_RCC_OscConfig+0x7e>
 800406c:	4b88      	ldr	r3, [pc, #544]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004074:	e005      	b.n	8004082 <HAL_RCC_OscConfig+0x8a>
 8004076:	4b86      	ldr	r3, [pc, #536]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004082:	4293      	cmp	r3, r2
 8004084:	d223      	bcs.n	80040ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fd7a 	bl	8004b84 <RCC_SetFlashLatencyFromMSIRange>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e3c9      	b.n	800482e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409a:	4b7d      	ldr	r3, [pc, #500]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7c      	ldr	r2, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040a0:	f043 0308 	orr.w	r3, r3, #8
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b7a      	ldr	r3, [pc, #488]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4977      	ldr	r1, [pc, #476]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b8:	4b75      	ldr	r3, [pc, #468]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	4972      	ldr	r1, [pc, #456]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
 80040cc:	e025      	b.n	800411a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ce:	4b70      	ldr	r3, [pc, #448]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6f      	ldr	r2, [pc, #444]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	496a      	ldr	r1, [pc, #424]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ec:	4b68      	ldr	r3, [pc, #416]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	4965      	ldr	r1, [pc, #404]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fd3a 	bl	8004b84 <RCC_SetFlashLatencyFromMSIRange>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e389      	b.n	800482e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411a:	f000 fc6f 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	495a      	ldr	r1, [pc, #360]	; (8004294 <HAL_RCC_OscConfig+0x29c>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	fa22 f303 	lsr.w	r3, r2, r3
 8004136:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_RCC_OscConfig+0x2a0>)
 8004138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800413a:	4b58      	ldr	r3, [pc, #352]	; (800429c <HAL_RCC_OscConfig+0x2a4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe f9ae 	bl	80024a0 <HAL_InitTick>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d052      	beq.n	80041f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	e36d      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d032      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800415a:	4b4d      	ldr	r3, [pc, #308]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4c      	ldr	r2, [pc, #304]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004166:	f7fe f9eb 	bl	8002540 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800416e:	f7fe f9e7 	bl	8002540 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e356      	b.n	800482e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004180:	4b43      	ldr	r3, [pc, #268]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800418c:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3f      	ldr	r2, [pc, #252]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004192:	f043 0308 	orr.w	r3, r3, #8
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	493a      	ldr	r1, [pc, #232]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041aa:	4b39      	ldr	r3, [pc, #228]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	4935      	ldr	r1, [pc, #212]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
 80041be:	e01a      	b.n	80041f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a32      	ldr	r2, [pc, #200]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041cc:	f7fe f9b8 	bl	8002540 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d4:	f7fe f9b4 	bl	8002540 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e323      	b.n	800482e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1dc>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d073      	beq.n	80042ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x21c>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d10e      	bne.n	800422c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d063      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d15f      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e300      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004234:	d106      	bne.n	8004244 <HAL_RCC_OscConfig+0x24c>
 8004236:	4b16      	ldr	r3, [pc, #88]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a15      	ldr	r2, [pc, #84]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e01d      	b.n	8004280 <HAL_RCC_OscConfig+0x288>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x270>
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0x288>
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a08      	ldr	r2, [pc, #32]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a05      	ldr	r2, [pc, #20]	; (8004290 <HAL_RCC_OscConfig+0x298>)
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe f95a 	bl	8002540 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428e:	e010      	b.n	80042b2 <HAL_RCC_OscConfig+0x2ba>
 8004290:	40021000 	.word	0x40021000
 8004294:	08008cac 	.word	0x08008cac
 8004298:	20000000 	.word	0x20000000
 800429c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fe f94e 	bl	8002540 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e2bd      	b.n	800482e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b2:	4baf      	ldr	r3, [pc, #700]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x2a8>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe f93e 	bl	8002540 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe f93a 	bl	8002540 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e2a9      	b.n	800482e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042da:	4ba5      	ldr	r3, [pc, #660]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x2d0>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d060      	beq.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x310>
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d119      	bne.n	8004336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d116      	bne.n	8004336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004308:	4b99      	ldr	r3, [pc, #612]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x328>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e286      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b93      	ldr	r3, [pc, #588]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	4990      	ldr	r1, [pc, #576]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004334:	e040      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d023      	beq.n	8004386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433e:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a8b      	ldr	r2, [pc, #556]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fe f8f9 	bl	8002540 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004352:	f7fe f8f5 	bl	8002540 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e264      	b.n	800482e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004364:	4b82      	ldr	r3, [pc, #520]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b7f      	ldr	r3, [pc, #508]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	497c      	ldr	r1, [pc, #496]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	e018      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004386:	4b7a      	ldr	r3, [pc, #488]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a79      	ldr	r2, [pc, #484]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800438c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fe f8d5 	bl	8002540 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439a:	f7fe f8d1 	bl	8002540 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e240      	b.n	800482e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ac:	4b70      	ldr	r3, [pc, #448]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d03c      	beq.n	800443e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01c      	beq.n	8004406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043cc:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d2:	4a67      	ldr	r2, [pc, #412]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fe f8b0 	bl	8002540 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fe f8ac 	bl	8002540 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e21b      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f6:	4b5e      	ldr	r3, [pc, #376]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ef      	beq.n	80043e4 <HAL_RCC_OscConfig+0x3ec>
 8004404:	e01b      	b.n	800443e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004406:	4b5a      	ldr	r3, [pc, #360]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440c:	4a58      	ldr	r2, [pc, #352]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004416:	f7fe f893 	bl	8002540 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441e:	f7fe f88f 	bl	8002540 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e1fe      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004430:	4b4f      	ldr	r3, [pc, #316]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ef      	bne.n	800441e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a6 	beq.w	8004598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004450:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445c:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	4a43      	ldr	r2, [pc, #268]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	; 0x58
 8004468:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004474:	2301      	movs	r3, #1
 8004476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004478:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d118      	bne.n	80044b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004484:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3a      	ldr	r2, [pc, #232]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 800448a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004490:	f7fe f856 	bl	8002540 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004498:	f7fe f852 	bl	8002540 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1c1      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044aa:	4b32      	ldr	r3, [pc, #200]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d108      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4d8>
 80044be:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ce:	e024      	b.n	800451a <HAL_RCC_OscConfig+0x522>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d110      	bne.n	80044fa <HAL_RCC_OscConfig+0x502>
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	4a24      	ldr	r2, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f8:	e00f      	b.n	800451a <HAL_RCC_OscConfig+0x522>
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004512:	f023 0304 	bic.w	r3, r3, #4
 8004516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fe f80d 	bl	8002540 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fe f809 	bl	8002540 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e176      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ed      	beq.n	800452a <HAL_RCC_OscConfig+0x532>
 800454e:	e01a      	b.n	8004586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fd fff6 	bl	8002540 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004556:	e00f      	b.n	8004578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fd fff2 	bl	8002540 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d906      	bls.n	8004578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e15f      	b.n	800482e <HAL_RCC_OscConfig+0x836>
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004578:	4baa      	ldr	r3, [pc, #680]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e8      	bne.n	8004558 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458c:	4ba5      	ldr	r3, [pc, #660]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	4aa4      	ldr	r2, [pc, #656]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03c      	beq.n	800461e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ac:	4b9d      	ldr	r3, [pc, #628]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	4a9c      	ldr	r2, [pc, #624]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd ffc0 	bl	8002540 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c4:	f7fd ffbc 	bl	8002540 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e12b      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	4b93      	ldr	r3, [pc, #588]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80045d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCC_OscConfig+0x5cc>
 80045e4:	e01b      	b.n	800461e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e6:	4b8f      	ldr	r3, [pc, #572]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80045e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ec:	4a8d      	ldr	r2, [pc, #564]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd ffa3 	bl	8002540 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fd ff9f 	bl	8002540 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e10e      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	4b84      	ldr	r3, [pc, #528]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ef      	bne.n	80045fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8102 	beq.w	800482c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	2b02      	cmp	r3, #2
 800462e:	f040 80c5 	bne.w	80047bc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004632:	4b7c      	ldr	r3, [pc, #496]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0203 	and.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d12c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	3b01      	subs	r3, #1
 8004652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d123      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d11b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d113      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d109      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d067      	beq.n	8004770 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d062      	beq.n	800476c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046a6:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e0bb      	b.n	800482e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a5a      	ldr	r2, [pc, #360]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80046bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c2:	f7fd ff3d 	bl	8002540 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fd ff39 	bl	8002540 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0a8      	b.n	800482e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046dc:	4b51      	ldr	r3, [pc, #324]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e8:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	4b4e      	ldr	r3, [pc, #312]	; (8004828 <HAL_RCC_OscConfig+0x830>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046f8:	3a01      	subs	r2, #1
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004702:	0212      	lsls	r2, r2, #8
 8004704:	4311      	orrs	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800470a:	0852      	lsrs	r2, r2, #1
 800470c:	3a01      	subs	r2, #1
 800470e:	0552      	lsls	r2, r2, #21
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004716:	0852      	lsrs	r2, r2, #1
 8004718:	3a01      	subs	r2, #1
 800471a:	0652      	lsls	r2, r2, #25
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004722:	06d2      	lsls	r2, r2, #27
 8004724:	430a      	orrs	r2, r1
 8004726:	493f      	ldr	r1, [pc, #252]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800472c:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3c      	ldr	r2, [pc, #240]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004738:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a39      	ldr	r2, [pc, #228]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004744:	f7fd fefc 	bl	8002540 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fd fef8 	bl	8002540 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e067      	b.n	800482e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800476a:	e05f      	b.n	800482c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e05e      	b.n	800482e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004770:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d157      	bne.n	800482c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a28      	ldr	r2, [pc, #160]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004788:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004794:	f7fd fed4 	bl	8002540 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fed0 	bl	8002540 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e03f      	b.n	800482e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x7a4>
 80047ba:	e037      	b.n	800482c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d02d      	beq.n	800481e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b18      	ldr	r3, [pc, #96]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047cc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ce:	4b15      	ldr	r3, [pc, #84]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4a11      	ldr	r2, [pc, #68]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047e0:	f023 0303 	bic.w	r3, r3, #3
 80047e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fea3 	bl	8002540 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fd fe9f 	bl	8002540 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e00e      	b.n	800482e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x806>
 800481c:	e006      	b.n	800482c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e005      	b.n	800482e <HAL_RCC_OscConfig+0x836>
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop

08004838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0c8      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800484c:	4b66      	ldr	r3, [pc, #408]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d910      	bls.n	800487c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 0207 	bic.w	r2, r3, #7
 8004862:	4961      	ldr	r1, [pc, #388]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b5f      	ldr	r3, [pc, #380]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0b0      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d04c      	beq.n	8004922 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004890:	4b56      	ldr	r3, [pc, #344]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d121      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e09e      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a8:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d115      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e092      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c0:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e086      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d0:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e07e      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048e0:	4b42      	ldr	r3, [pc, #264]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f023 0203 	bic.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	493f      	ldr	r1, [pc, #252]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f2:	f7fd fe25 	bl	8002540 <HAL_GetTick>
 80048f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fa:	f7fd fe21 	bl	8002540 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e066      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 020c 	and.w	r2, r3, #12
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	429a      	cmp	r2, r3
 8004920:	d1eb      	bne.n	80048fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	492c      	ldr	r1, [pc, #176]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004940:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d210      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 0207 	bic.w	r2, r3, #7
 8004956:	4924      	ldr	r1, [pc, #144]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <HAL_RCC_ClockConfig+0x1b0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e036      	b.n	80049de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4918      	ldr	r1, [pc, #96]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4910      	ldr	r1, [pc, #64]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049ae:	f000 f825 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <HAL_RCC_ClockConfig+0x1b4>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	490c      	ldr	r1, [pc, #48]	; (80049f0 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	5ccb      	ldrb	r3, [r1, r3]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a0a      	ldr	r2, [pc, #40]	; (80049f4 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <HAL_RCC_ClockConfig+0x1c0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd fd64 	bl	80024a0 <HAL_InitTick>
 80049d8:	4603      	mov	r3, r0
 80049da:	72fb      	strb	r3, [r7, #11]

  return status;
 80049dc:	7afb      	ldrb	r3, [r7, #11]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40022000 	.word	0x40022000
 80049ec:	40021000 	.word	0x40021000
 80049f0:	08008cac 	.word	0x08008cac
 80049f4:	20000000 	.word	0x20000000
 80049f8:	20000004 	.word	0x20000004

080049fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0a:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a14:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x34>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d121      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d11e      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a30:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a3c:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a58:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d102      	bne.n	8004a7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	e004      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a80:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d134      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xac>
 8004aa0:	e005      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa4:	617b      	str	r3, [r7, #20]
      break;
 8004aa6:	e005      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aaa:	617b      	str	r3, [r7, #20]
      break;
 8004aac:	e002      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	617b      	str	r3, [r7, #20]
      break;
 8004ab2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	3301      	adds	r3, #1
 8004ac0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	fb02 f203 	mul.w	r2, r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	0e5b      	lsrs	r3, r3, #25
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004af4:	69bb      	ldr	r3, [r7, #24]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3724      	adds	r7, #36	; 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	08008cc4 	.word	0x08008cc4
 8004b0c:	00f42400 	.word	0x00f42400
 8004b10:	007a1200 	.word	0x007a1200

08004b14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000000 	.word	0x20000000

08004b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b30:	f7ff fff0 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	4904      	ldr	r1, [pc, #16]	; (8004b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40021000 	.word	0x40021000
 8004b54:	08008cbc 	.word	0x08008cbc

08004b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b5c:	f7ff ffda 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	0adb      	lsrs	r3, r3, #11
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4904      	ldr	r1, [pc, #16]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b6e:	5ccb      	ldrb	r3, [r1, r3]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	08008cbc 	.word	0x08008cbc

08004b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b90:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b9c:	f7ff f99c 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 8004ba0:	6178      	str	r0, [r7, #20]
 8004ba2:	e014      	b.n	8004bce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba4:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba8:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb0:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bbc:	f7ff f98c 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 8004bc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d10b      	bne.n	8004bee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d919      	bls.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2ba0      	cmp	r3, #160	; 0xa0
 8004be0:	d902      	bls.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004be2:	2302      	movs	r3, #2
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e013      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004be8:	2301      	movs	r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	e010      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b80      	cmp	r3, #128	; 0x80
 8004bf2:	d902      	bls.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	e00a      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b80      	cmp	r3, #128	; 0x80
 8004bfe:	d102      	bne.n	8004c06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c00:	2302      	movs	r3, #2
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	e004      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b70      	cmp	r3, #112	; 0x70
 8004c0a:	d101      	bne.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 0207 	bic.w	r2, r3, #7
 8004c18:	4909      	ldr	r1, [pc, #36]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d001      	beq.n	8004c32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40022000 	.word	0x40022000

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c50:	2300      	movs	r3, #0
 8004c52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d031      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c68:	d01a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c6e:	d814      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c78:	d10f      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c7a:	4bac      	ldr	r3, [pc, #688]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	4aab      	ldr	r2, [pc, #684]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c86:	e00c      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f9dc 	bl	800504c <RCCEx_PLLSAI1_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c98:	e003      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ca8:	4ba0      	ldr	r3, [pc, #640]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	499d      	ldr	r1, [pc, #628]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cbe:	e001      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8099 	beq.w	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cd6:	4b95      	ldr	r3, [pc, #596]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cec:	4b8f      	ldr	r3, [pc, #572]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf0:	4a8e      	ldr	r2, [pc, #568]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf8:	4b8c      	ldr	r3, [pc, #560]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d04:	2301      	movs	r3, #1
 8004d06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d08:	4b89      	ldr	r3, [pc, #548]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a88      	ldr	r2, [pc, #544]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d14:	f7fd fc14 	bl	8002540 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d1a:	e009      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1c:	f7fd fc10 	bl	8002540 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d902      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d30:	4b7f      	ldr	r3, [pc, #508]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d155      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d42:	4b7a      	ldr	r3, [pc, #488]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d019      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d5e:	4b73      	ldr	r3, [pc, #460]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d6a:	4b70      	ldr	r3, [pc, #448]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	4a6e      	ldr	r2, [pc, #440]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d7a:	4b6c      	ldr	r3, [pc, #432]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	4a6a      	ldr	r2, [pc, #424]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d8a:	4a68      	ldr	r2, [pc, #416]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d016      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fd fbd0 	bl	8002540 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da2:	e00b      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fd fbcc 	bl	8002540 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d902      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	74fb      	strb	r3, [r7, #19]
            break;
 8004dba:	e006      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ec      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd0:	4b56      	ldr	r3, [pc, #344]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dde:	4953      	ldr	r1, [pc, #332]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004de6:	e004      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	74bb      	strb	r3, [r7, #18]
 8004dec:	e001      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dee:	7cfb      	ldrb	r3, [r7, #19]
 8004df0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df2:	7c7b      	ldrb	r3, [r7, #17]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df8:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfc:	4a4b      	ldr	r2, [pc, #300]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e10:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4943      	ldr	r1, [pc, #268]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e32:	4b3e      	ldr	r3, [pc, #248]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	f023 020c 	bic.w	r2, r3, #12
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	493a      	ldr	r1, [pc, #232]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e54:	4b35      	ldr	r3, [pc, #212]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	4932      	ldr	r1, [pc, #200]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e76:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e84:	4929      	ldr	r1, [pc, #164]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e98:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	4921      	ldr	r1, [pc, #132]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eba:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4918      	ldr	r1, [pc, #96]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4910      	ldr	r1, [pc, #64]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d02c      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	4907      	ldr	r1, [pc, #28]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f1c:	d10a      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f1e:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a02      	ldr	r2, [pc, #8]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f28:	60d3      	str	r3, [r2, #12]
 8004f2a:	e015      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3304      	adds	r3, #4
 8004f42:	2101      	movs	r1, #1
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f881 	bl	800504c <RCCEx_PLLSAI1_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d028      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f64:	4b30      	ldr	r3, [pc, #192]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	492d      	ldr	r1, [pc, #180]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f82:	d106      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a27      	ldr	r2, [pc, #156]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8e:	60d3      	str	r3, [r2, #12]
 8004f90:	e011      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f852 	bl	800504c <RCCEx_PLLSAI1_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01c      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fc2:	4b19      	ldr	r3, [pc, #100]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd0:	4915      	ldr	r1, [pc, #84]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 f82f 	bl	800504c <RCCEx_PLLSAI1_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005008:	4b07      	ldr	r3, [pc, #28]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	4904      	ldr	r1, [pc, #16]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800501e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000

0800502c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a04      	ldr	r2, [pc, #16]	; (8005048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40021000 	.word	0x40021000

0800504c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800505a:	4b74      	ldr	r3, [pc, #464]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d018      	beq.n	8005098 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005066:	4b71      	ldr	r3, [pc, #452]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0203 	and.w	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d10d      	bne.n	8005092 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
       ||
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800507e:	4b6b      	ldr	r3, [pc, #428]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
       ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d047      	beq.n	8005122 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	e044      	b.n	8005122 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b03      	cmp	r3, #3
 800509e:	d018      	beq.n	80050d2 <RCCEx_PLLSAI1_Config+0x86>
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d825      	bhi.n	80050f0 <RCCEx_PLLSAI1_Config+0xa4>
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d002      	beq.n	80050ae <RCCEx_PLLSAI1_Config+0x62>
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d009      	beq.n	80050c0 <RCCEx_PLLSAI1_Config+0x74>
 80050ac:	e020      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050ae:	4b5f      	ldr	r3, [pc, #380]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11d      	bne.n	80050f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050be:	e01a      	b.n	80050f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050c0:	4b5a      	ldr	r3, [pc, #360]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d116      	bne.n	80050fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d0:	e013      	b.n	80050fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050d2:	4b56      	ldr	r3, [pc, #344]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050de:	4b53      	ldr	r3, [pc, #332]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ee:	e006      	b.n	80050fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e004      	b.n	8005100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050f6:	bf00      	nop
 80050f8:	e002      	b.n	8005100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10d      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005106:	4b49      	ldr	r3, [pc, #292]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6819      	ldr	r1, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	430b      	orrs	r3, r1
 800511c:	4943      	ldr	r1, [pc, #268]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 800511e:	4313      	orrs	r3, r2
 8005120:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d17c      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005128:	4b40      	ldr	r3, [pc, #256]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3f      	ldr	r2, [pc, #252]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 800512e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005134:	f7fd fa04 	bl	8002540 <HAL_GetTick>
 8005138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800513a:	e009      	b.n	8005150 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800513c:	f7fd fa00 	bl	8002540 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d902      	bls.n	8005150 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	73fb      	strb	r3, [r7, #15]
        break;
 800514e:	e005      	b.n	800515c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005150:	4b36      	ldr	r3, [pc, #216]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ef      	bne.n	800513c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d15f      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d110      	bne.n	800518a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005168:	4b30      	ldr	r3, [pc, #192]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005170:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6892      	ldr	r2, [r2, #8]
 8005178:	0211      	lsls	r1, r2, #8
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68d2      	ldr	r2, [r2, #12]
 800517e:	06d2      	lsls	r2, r2, #27
 8005180:	430a      	orrs	r2, r1
 8005182:	492a      	ldr	r1, [pc, #168]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
 8005188:	e027      	b.n	80051da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d112      	bne.n	80051b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005190:	4b26      	ldr	r3, [pc, #152]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	0211      	lsls	r1, r2, #8
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6912      	ldr	r2, [r2, #16]
 80051a6:	0852      	lsrs	r2, r2, #1
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0552      	lsls	r2, r2, #21
 80051ac:	430a      	orrs	r2, r1
 80051ae:	491f      	ldr	r1, [pc, #124]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	610b      	str	r3, [r1, #16]
 80051b4:	e011      	b.n	80051da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6892      	ldr	r2, [r2, #8]
 80051c6:	0211      	lsls	r1, r2, #8
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6952      	ldr	r2, [r2, #20]
 80051cc:	0852      	lsrs	r2, r2, #1
 80051ce:	3a01      	subs	r2, #1
 80051d0:	0652      	lsls	r2, r2, #25
 80051d2:	430a      	orrs	r2, r1
 80051d4:	4915      	ldr	r1, [pc, #84]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a13      	ldr	r2, [pc, #76]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e6:	f7fd f9ab 	bl	8002540 <HAL_GetTick>
 80051ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ec:	e009      	b.n	8005202 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051ee:	f7fd f9a7 	bl	8002540 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d902      	bls.n	8005202 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	73fb      	strb	r3, [r7, #15]
          break;
 8005200:	e005      	b.n	800520e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0ef      	beq.n	80051ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	4903      	ldr	r1, [pc, #12]	; (800522c <RCCEx_PLLSAI1_Config+0x1e0>)
 800521e:	4313      	orrs	r3, r2
 8005220:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000

08005230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e040      	b.n	80052c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fd f85c 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8ea 	bl	8005448 <UART_SetConfig>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e022      	b.n	80052c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 faea 	bl	8005860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800529a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb71 	bl	80059a4 <UART_CheckIdleState>
 80052c2:	4603      	mov	r3, r0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	f040 8082 	bne.w	80053ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_UART_Transmit+0x26>
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e07a      	b.n	80053ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Transmit+0x38>
 8005300:	2302      	movs	r3, #2
 8005302:	e073      	b.n	80053ec <HAL_UART_Transmit+0x120>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2221      	movs	r2, #33	; 0x21
 8005318:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fd f911 	bl	8002540 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x80>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800535c:	e02d      	b.n	80053ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fb64 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e039      	b.n	80053ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	881a      	ldrh	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800538a:	b292      	uxth	r2, r2
 800538c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3302      	adds	r3, #2
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e008      	b.n	80053a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	b292      	uxth	r2, r2
 80053a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1cb      	bne.n	800535e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2200      	movs	r2, #0
 80053ce:	2140      	movs	r1, #64	; 0x40
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fb30 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e005      	b.n	80053ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e000      	b.n	80053ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80053ea:	2302      	movs	r3, #2
  }
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	4313      	orrs	r3, r2
 800546a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4baf      	ldr	r3, [pc, #700]	; (8005730 <UART_SetConfig+0x2e8>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	69f9      	ldr	r1, [r7, #28]
 800547c:	430b      	orrs	r3, r1
 800547e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4aa4      	ldr	r2, [pc, #656]	; (8005734 <UART_SetConfig+0x2ec>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a9b      	ldr	r2, [pc, #620]	; (8005738 <UART_SetConfig+0x2f0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d121      	bne.n	8005512 <UART_SetConfig+0xca>
 80054ce:	4b9b      	ldr	r3, [pc, #620]	; (800573c <UART_SetConfig+0x2f4>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d817      	bhi.n	800550c <UART_SetConfig+0xc4>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x9c>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	08005501 	.word	0x08005501
 80054ec:	080054fb 	.word	0x080054fb
 80054f0:	08005507 	.word	0x08005507
 80054f4:	2301      	movs	r3, #1
 80054f6:	76fb      	strb	r3, [r7, #27]
 80054f8:	e070      	b.n	80055dc <UART_SetConfig+0x194>
 80054fa:	2302      	movs	r3, #2
 80054fc:	76fb      	strb	r3, [r7, #27]
 80054fe:	e06d      	b.n	80055dc <UART_SetConfig+0x194>
 8005500:	2304      	movs	r3, #4
 8005502:	76fb      	strb	r3, [r7, #27]
 8005504:	e06a      	b.n	80055dc <UART_SetConfig+0x194>
 8005506:	2308      	movs	r3, #8
 8005508:	76fb      	strb	r3, [r7, #27]
 800550a:	e067      	b.n	80055dc <UART_SetConfig+0x194>
 800550c:	2310      	movs	r3, #16
 800550e:	76fb      	strb	r3, [r7, #27]
 8005510:	e064      	b.n	80055dc <UART_SetConfig+0x194>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a8a      	ldr	r2, [pc, #552]	; (8005740 <UART_SetConfig+0x2f8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d132      	bne.n	8005582 <UART_SetConfig+0x13a>
 800551c:	4b87      	ldr	r3, [pc, #540]	; (800573c <UART_SetConfig+0x2f4>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d828      	bhi.n	800557c <UART_SetConfig+0x134>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0xe8>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005565 	.word	0x08005565
 8005534:	0800557d 	.word	0x0800557d
 8005538:	0800557d 	.word	0x0800557d
 800553c:	0800557d 	.word	0x0800557d
 8005540:	08005571 	.word	0x08005571
 8005544:	0800557d 	.word	0x0800557d
 8005548:	0800557d 	.word	0x0800557d
 800554c:	0800557d 	.word	0x0800557d
 8005550:	0800556b 	.word	0x0800556b
 8005554:	0800557d 	.word	0x0800557d
 8005558:	0800557d 	.word	0x0800557d
 800555c:	0800557d 	.word	0x0800557d
 8005560:	08005577 	.word	0x08005577
 8005564:	2300      	movs	r3, #0
 8005566:	76fb      	strb	r3, [r7, #27]
 8005568:	e038      	b.n	80055dc <UART_SetConfig+0x194>
 800556a:	2302      	movs	r3, #2
 800556c:	76fb      	strb	r3, [r7, #27]
 800556e:	e035      	b.n	80055dc <UART_SetConfig+0x194>
 8005570:	2304      	movs	r3, #4
 8005572:	76fb      	strb	r3, [r7, #27]
 8005574:	e032      	b.n	80055dc <UART_SetConfig+0x194>
 8005576:	2308      	movs	r3, #8
 8005578:	76fb      	strb	r3, [r7, #27]
 800557a:	e02f      	b.n	80055dc <UART_SetConfig+0x194>
 800557c:	2310      	movs	r3, #16
 800557e:	76fb      	strb	r3, [r7, #27]
 8005580:	e02c      	b.n	80055dc <UART_SetConfig+0x194>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6b      	ldr	r2, [pc, #428]	; (8005734 <UART_SetConfig+0x2ec>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d125      	bne.n	80055d8 <UART_SetConfig+0x190>
 800558c:	4b6b      	ldr	r3, [pc, #428]	; (800573c <UART_SetConfig+0x2f4>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800559a:	d017      	beq.n	80055cc <UART_SetConfig+0x184>
 800559c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055a0:	d817      	bhi.n	80055d2 <UART_SetConfig+0x18a>
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d00b      	beq.n	80055c0 <UART_SetConfig+0x178>
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ac:	d811      	bhi.n	80055d2 <UART_SetConfig+0x18a>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <UART_SetConfig+0x172>
 80055b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b6:	d006      	beq.n	80055c6 <UART_SetConfig+0x17e>
 80055b8:	e00b      	b.n	80055d2 <UART_SetConfig+0x18a>
 80055ba:	2300      	movs	r3, #0
 80055bc:	76fb      	strb	r3, [r7, #27]
 80055be:	e00d      	b.n	80055dc <UART_SetConfig+0x194>
 80055c0:	2302      	movs	r3, #2
 80055c2:	76fb      	strb	r3, [r7, #27]
 80055c4:	e00a      	b.n	80055dc <UART_SetConfig+0x194>
 80055c6:	2304      	movs	r3, #4
 80055c8:	76fb      	strb	r3, [r7, #27]
 80055ca:	e007      	b.n	80055dc <UART_SetConfig+0x194>
 80055cc:	2308      	movs	r3, #8
 80055ce:	76fb      	strb	r3, [r7, #27]
 80055d0:	e004      	b.n	80055dc <UART_SetConfig+0x194>
 80055d2:	2310      	movs	r3, #16
 80055d4:	76fb      	strb	r3, [r7, #27]
 80055d6:	e001      	b.n	80055dc <UART_SetConfig+0x194>
 80055d8:	2310      	movs	r3, #16
 80055da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a54      	ldr	r2, [pc, #336]	; (8005734 <UART_SetConfig+0x2ec>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d173      	bne.n	80056ce <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055e6:	7efb      	ldrb	r3, [r7, #27]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d824      	bhi.n	8005636 <UART_SetConfig+0x1ee>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x1ac>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005637 	.word	0x08005637
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005637 	.word	0x08005637
 8005604:	08005627 	.word	0x08005627
 8005608:	08005637 	.word	0x08005637
 800560c:	08005637 	.word	0x08005637
 8005610:	08005637 	.word	0x08005637
 8005614:	0800562f 	.word	0x0800562f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005618:	f7ff fa88 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 800561c:	6178      	str	r0, [r7, #20]
        break;
 800561e:	e00f      	b.n	8005640 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005620:	4b48      	ldr	r3, [pc, #288]	; (8005744 <UART_SetConfig+0x2fc>)
 8005622:	617b      	str	r3, [r7, #20]
        break;
 8005624:	e00c      	b.n	8005640 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005626:	f7ff f9e9 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800562a:	6178      	str	r0, [r7, #20]
        break;
 800562c:	e008      	b.n	8005640 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005632:	617b      	str	r3, [r7, #20]
        break;
 8005634:	e004      	b.n	8005640 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	76bb      	strb	r3, [r7, #26]
        break;
 800563e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80fe 	beq.w	8005844 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	429a      	cmp	r2, r3
 8005656:	d305      	bcc.n	8005664 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	429a      	cmp	r2, r3
 8005662:	d902      	bls.n	800566a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	76bb      	strb	r3, [r7, #26]
 8005668:	e0ec      	b.n	8005844 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4618      	mov	r0, r3
 800566e:	f04f 0100 	mov.w	r1, #0
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	020b      	lsls	r3, r1, #8
 800567c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005680:	0202      	lsls	r2, r0, #8
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	6849      	ldr	r1, [r1, #4]
 8005686:	0849      	lsrs	r1, r1, #1
 8005688:	4608      	mov	r0, r1
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	1814      	adds	r4, r2, r0
 8005690:	eb43 0501 	adc.w	r5, r3, r1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	461a      	mov	r2, r3
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	4620      	mov	r0, r4
 80056a0:	4629      	mov	r1, r5
 80056a2:	f7fb fb21 	bl	8000ce8 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4613      	mov	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	d308      	bcc.n	80056c8 <UART_SetConfig+0x280>
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056bc:	d204      	bcs.n	80056c8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	e0bd      	b.n	8005844 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	76bb      	strb	r3, [r7, #26]
 80056cc:	e0ba      	b.n	8005844 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	d168      	bne.n	80057aa <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80056d8:	7efb      	ldrb	r3, [r7, #27]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d834      	bhi.n	8005748 <UART_SetConfig+0x300>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x29c>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	08005749 	.word	0x08005749
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	08005749 	.word	0x08005749
 80056fc:	08005749 	.word	0x08005749
 8005700:	08005749 	.word	0x08005749
 8005704:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7ff fa10 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 800570c:	6178      	str	r0, [r7, #20]
        break;
 800570e:	e020      	b.n	8005752 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7ff fa22 	bl	8004b58 <HAL_RCC_GetPCLK2Freq>
 8005714:	6178      	str	r0, [r7, #20]
        break;
 8005716:	e01c      	b.n	8005752 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <UART_SetConfig+0x2fc>)
 800571a:	617b      	str	r3, [r7, #20]
        break;
 800571c:	e019      	b.n	8005752 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7ff f96d 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8005722:	6178      	str	r0, [r7, #20]
        break;
 8005724:	e015      	b.n	8005752 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	617b      	str	r3, [r7, #20]
        break;
 800572c:	e011      	b.n	8005752 <UART_SetConfig+0x30a>
 800572e:	bf00      	nop
 8005730:	efff69f3 	.word	0xefff69f3
 8005734:	40008000 	.word	0x40008000
 8005738:	40013800 	.word	0x40013800
 800573c:	40021000 	.word	0x40021000
 8005740:	40004400 	.word	0x40004400
 8005744:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	76bb      	strb	r3, [r7, #26]
        break;
 8005750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d075      	beq.n	8005844 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	005a      	lsls	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d916      	bls.n	80057a4 <UART_SetConfig+0x35c>
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577c:	d212      	bcs.n	80057a4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f023 030f 	bic.w	r3, r3, #15
 8005786:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	b29a      	uxth	r2, r3
 8005794:	89fb      	ldrh	r3, [r7, #14]
 8005796:	4313      	orrs	r3, r2
 8005798:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	89fa      	ldrh	r2, [r7, #14]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	e04f      	b.n	8005844 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	76bb      	strb	r3, [r7, #26]
 80057a8:	e04c      	b.n	8005844 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057aa:	7efb      	ldrb	r3, [r7, #27]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d828      	bhi.n	8005802 <UART_SetConfig+0x3ba>
 80057b0:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0x370>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057dd 	.word	0x080057dd
 80057bc:	080057e5 	.word	0x080057e5
 80057c0:	080057ed 	.word	0x080057ed
 80057c4:	08005803 	.word	0x08005803
 80057c8:	080057f3 	.word	0x080057f3
 80057cc:	08005803 	.word	0x08005803
 80057d0:	08005803 	.word	0x08005803
 80057d4:	08005803 	.word	0x08005803
 80057d8:	080057fb 	.word	0x080057fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057dc:	f7ff f9a6 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 80057e0:	6178      	str	r0, [r7, #20]
        break;
 80057e2:	e013      	b.n	800580c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7ff f9b8 	bl	8004b58 <HAL_RCC_GetPCLK2Freq>
 80057e8:	6178      	str	r0, [r7, #20]
        break;
 80057ea:	e00f      	b.n	800580c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <UART_SetConfig+0x414>)
 80057ee:	617b      	str	r3, [r7, #20]
        break;
 80057f0:	e00c      	b.n	800580c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f2:	f7ff f903 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80057f6:	6178      	str	r0, [r7, #20]
        break;
 80057f8:	e008      	b.n	800580c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fe:	617b      	str	r3, [r7, #20]
        break;
 8005800:	e004      	b.n	800580c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	76bb      	strb	r3, [r7, #26]
        break;
 800580a:	bf00      	nop
    }

    if (pclk != 0U)
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d018      	beq.n	8005844 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	085a      	lsrs	r2, r3, #1
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	441a      	add	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	b29b      	uxth	r3, r3
 8005826:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b0f      	cmp	r3, #15
 800582c:	d908      	bls.n	8005840 <UART_SetConfig+0x3f8>
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005834:	d204      	bcs.n	8005840 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	e001      	b.n	8005844 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005850:	7ebb      	ldrb	r3, [r7, #26]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bdb0      	pop	{r4, r5, r7, pc}
 800585a:	bf00      	nop
 800585c:	00f42400 	.word	0x00f42400

08005860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01a      	beq.n	8005976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595e:	d10a      	bne.n	8005976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059b4:	f7fc fdc4 	bl	8002540 <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d10e      	bne.n	80059e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f82d 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e023      	b.n	8005a2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d10e      	bne.n	8005a12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f817 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e00d      	b.n	8005a2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a46:	e05e      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d05a      	beq.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a50:	f7fc fd76 	bl	8002540 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d302      	bcc.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11b      	bne.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e043      	b.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d02c      	beq.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aba:	d124      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ac4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ad4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e00f      	b.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d091      	beq.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2222      	movs	r2, #34	; 0x22
 8005b58:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02b      	beq.n	8005bba <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	4a25      	ldr	r2, [pc, #148]	; (8005bfc <UART_Start_Receive_DMA+0xcc>)
 8005b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a24      	ldr	r2, [pc, #144]	; (8005c00 <UART_Start_Receive_DMA+0xd0>)
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	4a23      	ldr	r2, [pc, #140]	; (8005c04 <UART_Start_Receive_DMA+0xd4>)
 8005b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	2200      	movs	r2, #0
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3324      	adds	r3, #36	; 0x24
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	461a      	mov	r2, r3
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	f7fc feed 	bl	8002974 <HAL_DMA_Start_IT>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00c      	beq.n	8005bba <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e01c      	b.n	8005bf4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	08005c91 	.word	0x08005c91
 8005c00:	08005d29 	.word	0x08005d29
 8005c04:	08005d61 	.word	0x08005d61

08005c08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c1e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c48:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0210 	bic.w	r2, r2, #16
 8005c70:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d12a      	bne.n	8005d02 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cc2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0210 	bic.w	r2, r2, #16
 8005d00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d107      	bne.n	8005d1a <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d10:	4619      	mov	r1, r3
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7ff fb8c 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d18:	e002      	b.n	8005d20 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff fb6a 	bl	80053f4 <HAL_UART_RxCpltCallback>
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d109      	bne.n	8005d52 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4619      	mov	r1, r3
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff fb70 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d50:	e002      	b.n	8005d58 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7ff fb58 	bl	8005408 <HAL_UART_RxHalfCpltCallback>
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d84:	2b80      	cmp	r3, #128	; 0x80
 8005d86:	d109      	bne.n	8005d9c <UART_DMAError+0x3c>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b21      	cmp	r3, #33	; 0x21
 8005d8c:	d106      	bne.n	8005d9c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f7ff ff36 	bl	8005c08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d109      	bne.n	8005dbe <UART_DMAError+0x5e>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b22      	cmp	r3, #34	; 0x22
 8005dae:	d106      	bne.n	8005dbe <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005db8:	6978      	ldr	r0, [r7, #20]
 8005dba:	f7ff ff3a 	bl	8005c32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc4:	f043 0210 	orr.w	r2, r3, #16
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dce:	6978      	ldr	r0, [r7, #20]
 8005dd0:	f7ff fb24 	bl	800541c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd4:	bf00      	nop
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d135      	bne.n	8005e5e <HAL_UARTEx_ReceiveToIdle_DMA+0x82>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e02e      	b.n	8005e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
    }

    __HAL_LOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e027      	b.n	8005e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	461a      	mov	r2, r3
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff fe83 	bl	8005b30 <UART_Start_Receive_DMA>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d112      	bne.n	8005e5a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10c      	bne.n	8005e56 <HAL_UARTEx_ReceiveToIdle_DMA+0x7a>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2210      	movs	r2, #16
 8005e42:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0210 	orr.w	r2, r2, #16
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	e001      	b.n	8005e5a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	e000      	b.n	8005e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x84>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <__errno>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <__errno+0x8>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	2000000c 	.word	0x2000000c

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	4d0d      	ldr	r5, [pc, #52]	; (8005eac <__libc_init_array+0x38>)
 8005e78:	4c0d      	ldr	r4, [pc, #52]	; (8005eb0 <__libc_init_array+0x3c>)
 8005e7a:	1b64      	subs	r4, r4, r5
 8005e7c:	10a4      	asrs	r4, r4, #2
 8005e7e:	2600      	movs	r6, #0
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	4d0b      	ldr	r5, [pc, #44]	; (8005eb4 <__libc_init_array+0x40>)
 8005e86:	4c0c      	ldr	r4, [pc, #48]	; (8005eb8 <__libc_init_array+0x44>)
 8005e88:	f002 fec8 	bl	8008c1c <_init>
 8005e8c:	1b64      	subs	r4, r4, r5
 8005e8e:	10a4      	asrs	r4, r4, #2
 8005e90:	2600      	movs	r6, #0
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	080090dc 	.word	0x080090dc
 8005eb0:	080090dc 	.word	0x080090dc
 8005eb4:	080090dc 	.word	0x080090dc
 8005eb8:	080090e0 	.word	0x080090e0

08005ebc <memset>:
 8005ebc:	4402      	add	r2, r0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <__cvt>:
 8005ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	ec55 4b10 	vmov	r4, r5, d0
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	460e      	mov	r6, r1
 8005ed8:	4619      	mov	r1, r3
 8005eda:	462b      	mov	r3, r5
 8005edc:	bfbb      	ittet	lt
 8005ede:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ee2:	461d      	movlt	r5, r3
 8005ee4:	2300      	movge	r3, #0
 8005ee6:	232d      	movlt	r3, #45	; 0x2d
 8005ee8:	700b      	strb	r3, [r1, #0]
 8005eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ef0:	4691      	mov	r9, r2
 8005ef2:	f023 0820 	bic.w	r8, r3, #32
 8005ef6:	bfbc      	itt	lt
 8005ef8:	4622      	movlt	r2, r4
 8005efa:	4614      	movlt	r4, r2
 8005efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f00:	d005      	beq.n	8005f0e <__cvt+0x42>
 8005f02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f06:	d100      	bne.n	8005f0a <__cvt+0x3e>
 8005f08:	3601      	adds	r6, #1
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	e000      	b.n	8005f10 <__cvt+0x44>
 8005f0e:	2103      	movs	r1, #3
 8005f10:	ab03      	add	r3, sp, #12
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	ab02      	add	r3, sp, #8
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	ec45 4b10 	vmov	d0, r4, r5
 8005f1c:	4653      	mov	r3, sl
 8005f1e:	4632      	mov	r2, r6
 8005f20:	f000 fcfe 	bl	8006920 <_dtoa_r>
 8005f24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f28:	4607      	mov	r7, r0
 8005f2a:	d102      	bne.n	8005f32 <__cvt+0x66>
 8005f2c:	f019 0f01 	tst.w	r9, #1
 8005f30:	d022      	beq.n	8005f78 <__cvt+0xac>
 8005f32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f36:	eb07 0906 	add.w	r9, r7, r6
 8005f3a:	d110      	bne.n	8005f5e <__cvt+0x92>
 8005f3c:	783b      	ldrb	r3, [r7, #0]
 8005f3e:	2b30      	cmp	r3, #48	; 0x30
 8005f40:	d10a      	bne.n	8005f58 <__cvt+0x8c>
 8005f42:	2200      	movs	r2, #0
 8005f44:	2300      	movs	r3, #0
 8005f46:	4620      	mov	r0, r4
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f7fa fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f4e:	b918      	cbnz	r0, 8005f58 <__cvt+0x8c>
 8005f50:	f1c6 0601 	rsb	r6, r6, #1
 8005f54:	f8ca 6000 	str.w	r6, [sl]
 8005f58:	f8da 3000 	ldr.w	r3, [sl]
 8005f5c:	4499      	add	r9, r3
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2300      	movs	r3, #0
 8005f62:	4620      	mov	r0, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7fa fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f6a:	b108      	cbz	r0, 8005f70 <__cvt+0xa4>
 8005f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f70:	2230      	movs	r2, #48	; 0x30
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	454b      	cmp	r3, r9
 8005f76:	d307      	bcc.n	8005f88 <__cvt+0xbc>
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f7c:	1bdb      	subs	r3, r3, r7
 8005f7e:	4638      	mov	r0, r7
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	b004      	add	sp, #16
 8005f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	9103      	str	r1, [sp, #12]
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e7f0      	b.n	8005f72 <__cvt+0xa6>

08005f90 <__exponent>:
 8005f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f92:	4603      	mov	r3, r0
 8005f94:	2900      	cmp	r1, #0
 8005f96:	bfb8      	it	lt
 8005f98:	4249      	neglt	r1, r1
 8005f9a:	f803 2b02 	strb.w	r2, [r3], #2
 8005f9e:	bfb4      	ite	lt
 8005fa0:	222d      	movlt	r2, #45	; 0x2d
 8005fa2:	222b      	movge	r2, #43	; 0x2b
 8005fa4:	2909      	cmp	r1, #9
 8005fa6:	7042      	strb	r2, [r0, #1]
 8005fa8:	dd2a      	ble.n	8006000 <__exponent+0x70>
 8005faa:	f10d 0407 	add.w	r4, sp, #7
 8005fae:	46a4      	mov	ip, r4
 8005fb0:	270a      	movs	r7, #10
 8005fb2:	46a6      	mov	lr, r4
 8005fb4:	460a      	mov	r2, r1
 8005fb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fba:	fb07 1516 	mls	r5, r7, r6, r1
 8005fbe:	3530      	adds	r5, #48	; 0x30
 8005fc0:	2a63      	cmp	r2, #99	; 0x63
 8005fc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005fc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005fca:	4631      	mov	r1, r6
 8005fcc:	dcf1      	bgt.n	8005fb2 <__exponent+0x22>
 8005fce:	3130      	adds	r1, #48	; 0x30
 8005fd0:	f1ae 0502 	sub.w	r5, lr, #2
 8005fd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005fd8:	1c44      	adds	r4, r0, #1
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4561      	cmp	r1, ip
 8005fde:	d30a      	bcc.n	8005ff6 <__exponent+0x66>
 8005fe0:	f10d 0209 	add.w	r2, sp, #9
 8005fe4:	eba2 020e 	sub.w	r2, r2, lr
 8005fe8:	4565      	cmp	r5, ip
 8005fea:	bf88      	it	hi
 8005fec:	2200      	movhi	r2, #0
 8005fee:	4413      	add	r3, r2
 8005ff0:	1a18      	subs	r0, r3, r0
 8005ff2:	b003      	add	sp, #12
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ffa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ffe:	e7ed      	b.n	8005fdc <__exponent+0x4c>
 8006000:	2330      	movs	r3, #48	; 0x30
 8006002:	3130      	adds	r1, #48	; 0x30
 8006004:	7083      	strb	r3, [r0, #2]
 8006006:	70c1      	strb	r1, [r0, #3]
 8006008:	1d03      	adds	r3, r0, #4
 800600a:	e7f1      	b.n	8005ff0 <__exponent+0x60>

0800600c <_printf_float>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	ed2d 8b02 	vpush	{d8}
 8006014:	b08d      	sub	sp, #52	; 0x34
 8006016:	460c      	mov	r4, r1
 8006018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800601c:	4616      	mov	r6, r2
 800601e:	461f      	mov	r7, r3
 8006020:	4605      	mov	r5, r0
 8006022:	f001 fa69 	bl	80074f8 <_localeconv_r>
 8006026:	f8d0 a000 	ldr.w	sl, [r0]
 800602a:	4650      	mov	r0, sl
 800602c:	f7fa f8d0 	bl	80001d0 <strlen>
 8006030:	2300      	movs	r3, #0
 8006032:	930a      	str	r3, [sp, #40]	; 0x28
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	9305      	str	r3, [sp, #20]
 8006038:	f8d8 3000 	ldr.w	r3, [r8]
 800603c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006040:	3307      	adds	r3, #7
 8006042:	f023 0307 	bic.w	r3, r3, #7
 8006046:	f103 0208 	add.w	r2, r3, #8
 800604a:	f8c8 2000 	str.w	r2, [r8]
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006056:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800605a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800605e:	9307      	str	r3, [sp, #28]
 8006060:	f8cd 8018 	str.w	r8, [sp, #24]
 8006064:	ee08 0a10 	vmov	s16, r0
 8006068:	4b9f      	ldr	r3, [pc, #636]	; (80062e8 <_printf_float+0x2dc>)
 800606a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800606e:	f04f 32ff 	mov.w	r2, #4294967295
 8006072:	f7fa fd5b 	bl	8000b2c <__aeabi_dcmpun>
 8006076:	bb88      	cbnz	r0, 80060dc <_printf_float+0xd0>
 8006078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800607c:	4b9a      	ldr	r3, [pc, #616]	; (80062e8 <_printf_float+0x2dc>)
 800607e:	f04f 32ff 	mov.w	r2, #4294967295
 8006082:	f7fa fd35 	bl	8000af0 <__aeabi_dcmple>
 8006086:	bb48      	cbnz	r0, 80060dc <_printf_float+0xd0>
 8006088:	2200      	movs	r2, #0
 800608a:	2300      	movs	r3, #0
 800608c:	4640      	mov	r0, r8
 800608e:	4649      	mov	r1, r9
 8006090:	f7fa fd24 	bl	8000adc <__aeabi_dcmplt>
 8006094:	b110      	cbz	r0, 800609c <_printf_float+0x90>
 8006096:	232d      	movs	r3, #45	; 0x2d
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609c:	4b93      	ldr	r3, [pc, #588]	; (80062ec <_printf_float+0x2e0>)
 800609e:	4894      	ldr	r0, [pc, #592]	; (80062f0 <_printf_float+0x2e4>)
 80060a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060a4:	bf94      	ite	ls
 80060a6:	4698      	movls	r8, r3
 80060a8:	4680      	movhi	r8, r0
 80060aa:	2303      	movs	r3, #3
 80060ac:	6123      	str	r3, [r4, #16]
 80060ae:	9b05      	ldr	r3, [sp, #20]
 80060b0:	f023 0204 	bic.w	r2, r3, #4
 80060b4:	6022      	str	r2, [r4, #0]
 80060b6:	f04f 0900 	mov.w	r9, #0
 80060ba:	9700      	str	r7, [sp, #0]
 80060bc:	4633      	mov	r3, r6
 80060be:	aa0b      	add	r2, sp, #44	; 0x2c
 80060c0:	4621      	mov	r1, r4
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f9d8 	bl	8006478 <_printf_common>
 80060c8:	3001      	adds	r0, #1
 80060ca:	f040 8090 	bne.w	80061ee <_printf_float+0x1e2>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	b00d      	add	sp, #52	; 0x34
 80060d4:	ecbd 8b02 	vpop	{d8}
 80060d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fa fd22 	bl	8000b2c <__aeabi_dcmpun>
 80060e8:	b140      	cbz	r0, 80060fc <_printf_float+0xf0>
 80060ea:	464b      	mov	r3, r9
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bfbc      	itt	lt
 80060f0:	232d      	movlt	r3, #45	; 0x2d
 80060f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060f6:	487f      	ldr	r0, [pc, #508]	; (80062f4 <_printf_float+0x2e8>)
 80060f8:	4b7f      	ldr	r3, [pc, #508]	; (80062f8 <_printf_float+0x2ec>)
 80060fa:	e7d1      	b.n	80060a0 <_printf_float+0x94>
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006102:	9206      	str	r2, [sp, #24]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	d13f      	bne.n	8006188 <_printf_float+0x17c>
 8006108:	2306      	movs	r3, #6
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	9b05      	ldr	r3, [sp, #20]
 800610e:	6861      	ldr	r1, [r4, #4]
 8006110:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006114:	2300      	movs	r3, #0
 8006116:	9303      	str	r3, [sp, #12]
 8006118:	ab0a      	add	r3, sp, #40	; 0x28
 800611a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800611e:	ab09      	add	r3, sp, #36	; 0x24
 8006120:	ec49 8b10 	vmov	d0, r8, r9
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	6022      	str	r2, [r4, #0]
 8006128:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800612c:	4628      	mov	r0, r5
 800612e:	f7ff fecd 	bl	8005ecc <__cvt>
 8006132:	9b06      	ldr	r3, [sp, #24]
 8006134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006136:	2b47      	cmp	r3, #71	; 0x47
 8006138:	4680      	mov	r8, r0
 800613a:	d108      	bne.n	800614e <_printf_float+0x142>
 800613c:	1cc8      	adds	r0, r1, #3
 800613e:	db02      	blt.n	8006146 <_printf_float+0x13a>
 8006140:	6863      	ldr	r3, [r4, #4]
 8006142:	4299      	cmp	r1, r3
 8006144:	dd41      	ble.n	80061ca <_printf_float+0x1be>
 8006146:	f1ab 0b02 	sub.w	fp, fp, #2
 800614a:	fa5f fb8b 	uxtb.w	fp, fp
 800614e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006152:	d820      	bhi.n	8006196 <_printf_float+0x18a>
 8006154:	3901      	subs	r1, #1
 8006156:	465a      	mov	r2, fp
 8006158:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800615c:	9109      	str	r1, [sp, #36]	; 0x24
 800615e:	f7ff ff17 	bl	8005f90 <__exponent>
 8006162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006164:	1813      	adds	r3, r2, r0
 8006166:	2a01      	cmp	r2, #1
 8006168:	4681      	mov	r9, r0
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	dc02      	bgt.n	8006174 <_printf_float+0x168>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	07d2      	lsls	r2, r2, #31
 8006172:	d501      	bpl.n	8006178 <_printf_float+0x16c>
 8006174:	3301      	adds	r3, #1
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800617c:	2b00      	cmp	r3, #0
 800617e:	d09c      	beq.n	80060ba <_printf_float+0xae>
 8006180:	232d      	movs	r3, #45	; 0x2d
 8006182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006186:	e798      	b.n	80060ba <_printf_float+0xae>
 8006188:	9a06      	ldr	r2, [sp, #24]
 800618a:	2a47      	cmp	r2, #71	; 0x47
 800618c:	d1be      	bne.n	800610c <_printf_float+0x100>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1bc      	bne.n	800610c <_printf_float+0x100>
 8006192:	2301      	movs	r3, #1
 8006194:	e7b9      	b.n	800610a <_printf_float+0xfe>
 8006196:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800619a:	d118      	bne.n	80061ce <_printf_float+0x1c2>
 800619c:	2900      	cmp	r1, #0
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	dd0b      	ble.n	80061ba <_printf_float+0x1ae>
 80061a2:	6121      	str	r1, [r4, #16]
 80061a4:	b913      	cbnz	r3, 80061ac <_printf_float+0x1a0>
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	07d0      	lsls	r0, r2, #31
 80061aa:	d502      	bpl.n	80061b2 <_printf_float+0x1a6>
 80061ac:	3301      	adds	r3, #1
 80061ae:	440b      	add	r3, r1
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80061b4:	f04f 0900 	mov.w	r9, #0
 80061b8:	e7de      	b.n	8006178 <_printf_float+0x16c>
 80061ba:	b913      	cbnz	r3, 80061c2 <_printf_float+0x1b6>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	07d2      	lsls	r2, r2, #31
 80061c0:	d501      	bpl.n	80061c6 <_printf_float+0x1ba>
 80061c2:	3302      	adds	r3, #2
 80061c4:	e7f4      	b.n	80061b0 <_printf_float+0x1a4>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e7f2      	b.n	80061b0 <_printf_float+0x1a4>
 80061ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d0:	4299      	cmp	r1, r3
 80061d2:	db05      	blt.n	80061e0 <_printf_float+0x1d4>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	6121      	str	r1, [r4, #16]
 80061d8:	07d8      	lsls	r0, r3, #31
 80061da:	d5ea      	bpl.n	80061b2 <_printf_float+0x1a6>
 80061dc:	1c4b      	adds	r3, r1, #1
 80061de:	e7e7      	b.n	80061b0 <_printf_float+0x1a4>
 80061e0:	2900      	cmp	r1, #0
 80061e2:	bfd4      	ite	le
 80061e4:	f1c1 0202 	rsble	r2, r1, #2
 80061e8:	2201      	movgt	r2, #1
 80061ea:	4413      	add	r3, r2
 80061ec:	e7e0      	b.n	80061b0 <_printf_float+0x1a4>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	055a      	lsls	r2, r3, #21
 80061f2:	d407      	bmi.n	8006204 <_printf_float+0x1f8>
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	4642      	mov	r2, r8
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	d12c      	bne.n	800625c <_printf_float+0x250>
 8006202:	e764      	b.n	80060ce <_printf_float+0xc2>
 8006204:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006208:	f240 80e0 	bls.w	80063cc <_printf_float+0x3c0>
 800620c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006210:	2200      	movs	r2, #0
 8006212:	2300      	movs	r3, #0
 8006214:	f7fa fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8006218:	2800      	cmp	r0, #0
 800621a:	d034      	beq.n	8006286 <_printf_float+0x27a>
 800621c:	4a37      	ldr	r2, [pc, #220]	; (80062fc <_printf_float+0x2f0>)
 800621e:	2301      	movs	r3, #1
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af51 	beq.w	80060ce <_printf_float+0xc2>
 800622c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006230:	429a      	cmp	r2, r3
 8006232:	db02      	blt.n	800623a <_printf_float+0x22e>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07d8      	lsls	r0, r3, #31
 8006238:	d510      	bpl.n	800625c <_printf_float+0x250>
 800623a:	ee18 3a10 	vmov	r3, s16
 800623e:	4652      	mov	r2, sl
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	f43f af41 	beq.w	80060ce <_printf_float+0xc2>
 800624c:	f04f 0800 	mov.w	r8, #0
 8006250:	f104 091a 	add.w	r9, r4, #26
 8006254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006256:	3b01      	subs	r3, #1
 8006258:	4543      	cmp	r3, r8
 800625a:	dc09      	bgt.n	8006270 <_printf_float+0x264>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	079b      	lsls	r3, r3, #30
 8006260:	f100 8105 	bmi.w	800646e <_printf_float+0x462>
 8006264:	68e0      	ldr	r0, [r4, #12]
 8006266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006268:	4298      	cmp	r0, r3
 800626a:	bfb8      	it	lt
 800626c:	4618      	movlt	r0, r3
 800626e:	e730      	b.n	80060d2 <_printf_float+0xc6>
 8006270:	2301      	movs	r3, #1
 8006272:	464a      	mov	r2, r9
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	47b8      	blx	r7
 800627a:	3001      	adds	r0, #1
 800627c:	f43f af27 	beq.w	80060ce <_printf_float+0xc2>
 8006280:	f108 0801 	add.w	r8, r8, #1
 8006284:	e7e6      	b.n	8006254 <_printf_float+0x248>
 8006286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	dc39      	bgt.n	8006300 <_printf_float+0x2f4>
 800628c:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <_printf_float+0x2f0>)
 800628e:	2301      	movs	r3, #1
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	f43f af19 	beq.w	80060ce <_printf_float+0xc2>
 800629c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d102      	bne.n	80062aa <_printf_float+0x29e>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07d9      	lsls	r1, r3, #31
 80062a8:	d5d8      	bpl.n	800625c <_printf_float+0x250>
 80062aa:	ee18 3a10 	vmov	r3, s16
 80062ae:	4652      	mov	r2, sl
 80062b0:	4631      	mov	r1, r6
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	f43f af09 	beq.w	80060ce <_printf_float+0xc2>
 80062bc:	f04f 0900 	mov.w	r9, #0
 80062c0:	f104 0a1a 	add.w	sl, r4, #26
 80062c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c6:	425b      	negs	r3, r3
 80062c8:	454b      	cmp	r3, r9
 80062ca:	dc01      	bgt.n	80062d0 <_printf_float+0x2c4>
 80062cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ce:	e792      	b.n	80061f6 <_printf_float+0x1ea>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4652      	mov	r2, sl
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f aef7 	beq.w	80060ce <_printf_float+0xc2>
 80062e0:	f109 0901 	add.w	r9, r9, #1
 80062e4:	e7ee      	b.n	80062c4 <_printf_float+0x2b8>
 80062e6:	bf00      	nop
 80062e8:	7fefffff 	.word	0x7fefffff
 80062ec:	08008cf8 	.word	0x08008cf8
 80062f0:	08008cfc 	.word	0x08008cfc
 80062f4:	08008d04 	.word	0x08008d04
 80062f8:	08008d00 	.word	0x08008d00
 80062fc:	08008d08 	.word	0x08008d08
 8006300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006304:	429a      	cmp	r2, r3
 8006306:	bfa8      	it	ge
 8006308:	461a      	movge	r2, r3
 800630a:	2a00      	cmp	r2, #0
 800630c:	4691      	mov	r9, r2
 800630e:	dc37      	bgt.n	8006380 <_printf_float+0x374>
 8006310:	f04f 0b00 	mov.w	fp, #0
 8006314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006318:	f104 021a 	add.w	r2, r4, #26
 800631c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	eba3 0309 	sub.w	r3, r3, r9
 8006324:	455b      	cmp	r3, fp
 8006326:	dc33      	bgt.n	8006390 <_printf_float+0x384>
 8006328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800632c:	429a      	cmp	r2, r3
 800632e:	db3b      	blt.n	80063a8 <_printf_float+0x39c>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	07da      	lsls	r2, r3, #31
 8006334:	d438      	bmi.n	80063a8 <_printf_float+0x39c>
 8006336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006338:	9b05      	ldr	r3, [sp, #20]
 800633a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	eba2 0901 	sub.w	r9, r2, r1
 8006342:	4599      	cmp	r9, r3
 8006344:	bfa8      	it	ge
 8006346:	4699      	movge	r9, r3
 8006348:	f1b9 0f00 	cmp.w	r9, #0
 800634c:	dc35      	bgt.n	80063ba <_printf_float+0x3ae>
 800634e:	f04f 0800 	mov.w	r8, #0
 8006352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006356:	f104 0a1a 	add.w	sl, r4, #26
 800635a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	eba3 0309 	sub.w	r3, r3, r9
 8006364:	4543      	cmp	r3, r8
 8006366:	f77f af79 	ble.w	800625c <_printf_float+0x250>
 800636a:	2301      	movs	r3, #1
 800636c:	4652      	mov	r2, sl
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	f43f aeaa 	beq.w	80060ce <_printf_float+0xc2>
 800637a:	f108 0801 	add.w	r8, r8, #1
 800637e:	e7ec      	b.n	800635a <_printf_float+0x34e>
 8006380:	4613      	mov	r3, r2
 8006382:	4631      	mov	r1, r6
 8006384:	4642      	mov	r2, r8
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	d1c0      	bne.n	8006310 <_printf_float+0x304>
 800638e:	e69e      	b.n	80060ce <_printf_float+0xc2>
 8006390:	2301      	movs	r3, #1
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	9205      	str	r2, [sp, #20]
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	f43f ae97 	beq.w	80060ce <_printf_float+0xc2>
 80063a0:	9a05      	ldr	r2, [sp, #20]
 80063a2:	f10b 0b01 	add.w	fp, fp, #1
 80063a6:	e7b9      	b.n	800631c <_printf_float+0x310>
 80063a8:	ee18 3a10 	vmov	r3, s16
 80063ac:	4652      	mov	r2, sl
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	d1be      	bne.n	8006336 <_printf_float+0x32a>
 80063b8:	e689      	b.n	80060ce <_printf_float+0xc2>
 80063ba:	9a05      	ldr	r2, [sp, #20]
 80063bc:	464b      	mov	r3, r9
 80063be:	4442      	add	r2, r8
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	d1c1      	bne.n	800634e <_printf_float+0x342>
 80063ca:	e680      	b.n	80060ce <_printf_float+0xc2>
 80063cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ce:	2a01      	cmp	r2, #1
 80063d0:	dc01      	bgt.n	80063d6 <_printf_float+0x3ca>
 80063d2:	07db      	lsls	r3, r3, #31
 80063d4:	d538      	bpl.n	8006448 <_printf_float+0x43c>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4642      	mov	r2, r8
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f ae74 	beq.w	80060ce <_printf_float+0xc2>
 80063e6:	ee18 3a10 	vmov	r3, s16
 80063ea:	4652      	mov	r2, sl
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f ae6b 	beq.w	80060ce <_printf_float+0xc2>
 80063f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	f7fa fb62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006404:	b9d8      	cbnz	r0, 800643e <_printf_float+0x432>
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	f108 0201 	add.w	r2, r8, #1
 800640c:	3b01      	subs	r3, #1
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	d10e      	bne.n	8006436 <_printf_float+0x42a>
 8006418:	e659      	b.n	80060ce <_printf_float+0xc2>
 800641a:	2301      	movs	r3, #1
 800641c:	4652      	mov	r2, sl
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	f43f ae52 	beq.w	80060ce <_printf_float+0xc2>
 800642a:	f108 0801 	add.w	r8, r8, #1
 800642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	4543      	cmp	r3, r8
 8006434:	dcf1      	bgt.n	800641a <_printf_float+0x40e>
 8006436:	464b      	mov	r3, r9
 8006438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800643c:	e6dc      	b.n	80061f8 <_printf_float+0x1ec>
 800643e:	f04f 0800 	mov.w	r8, #0
 8006442:	f104 0a1a 	add.w	sl, r4, #26
 8006446:	e7f2      	b.n	800642e <_printf_float+0x422>
 8006448:	2301      	movs	r3, #1
 800644a:	4642      	mov	r2, r8
 800644c:	e7df      	b.n	800640e <_printf_float+0x402>
 800644e:	2301      	movs	r3, #1
 8006450:	464a      	mov	r2, r9
 8006452:	4631      	mov	r1, r6
 8006454:	4628      	mov	r0, r5
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	f43f ae38 	beq.w	80060ce <_printf_float+0xc2>
 800645e:	f108 0801 	add.w	r8, r8, #1
 8006462:	68e3      	ldr	r3, [r4, #12]
 8006464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006466:	1a5b      	subs	r3, r3, r1
 8006468:	4543      	cmp	r3, r8
 800646a:	dcf0      	bgt.n	800644e <_printf_float+0x442>
 800646c:	e6fa      	b.n	8006264 <_printf_float+0x258>
 800646e:	f04f 0800 	mov.w	r8, #0
 8006472:	f104 0919 	add.w	r9, r4, #25
 8006476:	e7f4      	b.n	8006462 <_printf_float+0x456>

08006478 <_printf_common>:
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	4616      	mov	r6, r2
 800647e:	4699      	mov	r9, r3
 8006480:	688a      	ldr	r2, [r1, #8]
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006488:	4293      	cmp	r3, r2
 800648a:	bfb8      	it	lt
 800648c:	4613      	movlt	r3, r2
 800648e:	6033      	str	r3, [r6, #0]
 8006490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006494:	4607      	mov	r7, r0
 8006496:	460c      	mov	r4, r1
 8006498:	b10a      	cbz	r2, 800649e <_printf_common+0x26>
 800649a:	3301      	adds	r3, #1
 800649c:	6033      	str	r3, [r6, #0]
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	0699      	lsls	r1, r3, #26
 80064a2:	bf42      	ittt	mi
 80064a4:	6833      	ldrmi	r3, [r6, #0]
 80064a6:	3302      	addmi	r3, #2
 80064a8:	6033      	strmi	r3, [r6, #0]
 80064aa:	6825      	ldr	r5, [r4, #0]
 80064ac:	f015 0506 	ands.w	r5, r5, #6
 80064b0:	d106      	bne.n	80064c0 <_printf_common+0x48>
 80064b2:	f104 0a19 	add.w	sl, r4, #25
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	6832      	ldr	r2, [r6, #0]
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dc26      	bgt.n	800650e <_printf_common+0x96>
 80064c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064c4:	1e13      	subs	r3, r2, #0
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	bf18      	it	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	0692      	lsls	r2, r2, #26
 80064ce:	d42b      	bmi.n	8006528 <_printf_common+0xb0>
 80064d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064d4:	4649      	mov	r1, r9
 80064d6:	4638      	mov	r0, r7
 80064d8:	47c0      	blx	r8
 80064da:	3001      	adds	r0, #1
 80064dc:	d01e      	beq.n	800651c <_printf_common+0xa4>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	68e5      	ldr	r5, [r4, #12]
 80064e2:	6832      	ldr	r2, [r6, #0]
 80064e4:	f003 0306 	and.w	r3, r3, #6
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	bf08      	it	eq
 80064ec:	1aad      	subeq	r5, r5, r2
 80064ee:	68a3      	ldr	r3, [r4, #8]
 80064f0:	6922      	ldr	r2, [r4, #16]
 80064f2:	bf0c      	ite	eq
 80064f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064f8:	2500      	movne	r5, #0
 80064fa:	4293      	cmp	r3, r2
 80064fc:	bfc4      	itt	gt
 80064fe:	1a9b      	subgt	r3, r3, r2
 8006500:	18ed      	addgt	r5, r5, r3
 8006502:	2600      	movs	r6, #0
 8006504:	341a      	adds	r4, #26
 8006506:	42b5      	cmp	r5, r6
 8006508:	d11a      	bne.n	8006540 <_printf_common+0xc8>
 800650a:	2000      	movs	r0, #0
 800650c:	e008      	b.n	8006520 <_printf_common+0xa8>
 800650e:	2301      	movs	r3, #1
 8006510:	4652      	mov	r2, sl
 8006512:	4649      	mov	r1, r9
 8006514:	4638      	mov	r0, r7
 8006516:	47c0      	blx	r8
 8006518:	3001      	adds	r0, #1
 800651a:	d103      	bne.n	8006524 <_printf_common+0xac>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006524:	3501      	adds	r5, #1
 8006526:	e7c6      	b.n	80064b6 <_printf_common+0x3e>
 8006528:	18e1      	adds	r1, r4, r3
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	2030      	movs	r0, #48	; 0x30
 800652e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006532:	4422      	add	r2, r4
 8006534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800653c:	3302      	adds	r3, #2
 800653e:	e7c7      	b.n	80064d0 <_printf_common+0x58>
 8006540:	2301      	movs	r3, #1
 8006542:	4622      	mov	r2, r4
 8006544:	4649      	mov	r1, r9
 8006546:	4638      	mov	r0, r7
 8006548:	47c0      	blx	r8
 800654a:	3001      	adds	r0, #1
 800654c:	d0e6      	beq.n	800651c <_printf_common+0xa4>
 800654e:	3601      	adds	r6, #1
 8006550:	e7d9      	b.n	8006506 <_printf_common+0x8e>
	...

08006554 <_printf_i>:
 8006554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	460c      	mov	r4, r1
 800655a:	4691      	mov	r9, r2
 800655c:	7e27      	ldrb	r7, [r4, #24]
 800655e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006560:	2f78      	cmp	r7, #120	; 0x78
 8006562:	4680      	mov	r8, r0
 8006564:	469a      	mov	sl, r3
 8006566:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656a:	d807      	bhi.n	800657c <_printf_i+0x28>
 800656c:	2f62      	cmp	r7, #98	; 0x62
 800656e:	d80a      	bhi.n	8006586 <_printf_i+0x32>
 8006570:	2f00      	cmp	r7, #0
 8006572:	f000 80d8 	beq.w	8006726 <_printf_i+0x1d2>
 8006576:	2f58      	cmp	r7, #88	; 0x58
 8006578:	f000 80a3 	beq.w	80066c2 <_printf_i+0x16e>
 800657c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006584:	e03a      	b.n	80065fc <_printf_i+0xa8>
 8006586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800658a:	2b15      	cmp	r3, #21
 800658c:	d8f6      	bhi.n	800657c <_printf_i+0x28>
 800658e:	a001      	add	r0, pc, #4	; (adr r0, 8006594 <_printf_i+0x40>)
 8006590:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006594:	080065ed 	.word	0x080065ed
 8006598:	08006601 	.word	0x08006601
 800659c:	0800657d 	.word	0x0800657d
 80065a0:	0800657d 	.word	0x0800657d
 80065a4:	0800657d 	.word	0x0800657d
 80065a8:	0800657d 	.word	0x0800657d
 80065ac:	08006601 	.word	0x08006601
 80065b0:	0800657d 	.word	0x0800657d
 80065b4:	0800657d 	.word	0x0800657d
 80065b8:	0800657d 	.word	0x0800657d
 80065bc:	0800657d 	.word	0x0800657d
 80065c0:	0800670d 	.word	0x0800670d
 80065c4:	08006631 	.word	0x08006631
 80065c8:	080066ef 	.word	0x080066ef
 80065cc:	0800657d 	.word	0x0800657d
 80065d0:	0800657d 	.word	0x0800657d
 80065d4:	0800672f 	.word	0x0800672f
 80065d8:	0800657d 	.word	0x0800657d
 80065dc:	08006631 	.word	0x08006631
 80065e0:	0800657d 	.word	0x0800657d
 80065e4:	0800657d 	.word	0x0800657d
 80065e8:	080066f7 	.word	0x080066f7
 80065ec:	680b      	ldr	r3, [r1, #0]
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	600a      	str	r2, [r1, #0]
 80065f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0a3      	b.n	8006748 <_printf_i+0x1f4>
 8006600:	6825      	ldr	r5, [r4, #0]
 8006602:	6808      	ldr	r0, [r1, #0]
 8006604:	062e      	lsls	r6, r5, #24
 8006606:	f100 0304 	add.w	r3, r0, #4
 800660a:	d50a      	bpl.n	8006622 <_printf_i+0xce>
 800660c:	6805      	ldr	r5, [r0, #0]
 800660e:	600b      	str	r3, [r1, #0]
 8006610:	2d00      	cmp	r5, #0
 8006612:	da03      	bge.n	800661c <_printf_i+0xc8>
 8006614:	232d      	movs	r3, #45	; 0x2d
 8006616:	426d      	negs	r5, r5
 8006618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661c:	485e      	ldr	r0, [pc, #376]	; (8006798 <_printf_i+0x244>)
 800661e:	230a      	movs	r3, #10
 8006620:	e019      	b.n	8006656 <_printf_i+0x102>
 8006622:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006626:	6805      	ldr	r5, [r0, #0]
 8006628:	600b      	str	r3, [r1, #0]
 800662a:	bf18      	it	ne
 800662c:	b22d      	sxthne	r5, r5
 800662e:	e7ef      	b.n	8006610 <_printf_i+0xbc>
 8006630:	680b      	ldr	r3, [r1, #0]
 8006632:	6825      	ldr	r5, [r4, #0]
 8006634:	1d18      	adds	r0, r3, #4
 8006636:	6008      	str	r0, [r1, #0]
 8006638:	0628      	lsls	r0, r5, #24
 800663a:	d501      	bpl.n	8006640 <_printf_i+0xec>
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	e002      	b.n	8006646 <_printf_i+0xf2>
 8006640:	0669      	lsls	r1, r5, #25
 8006642:	d5fb      	bpl.n	800663c <_printf_i+0xe8>
 8006644:	881d      	ldrh	r5, [r3, #0]
 8006646:	4854      	ldr	r0, [pc, #336]	; (8006798 <_printf_i+0x244>)
 8006648:	2f6f      	cmp	r7, #111	; 0x6f
 800664a:	bf0c      	ite	eq
 800664c:	2308      	moveq	r3, #8
 800664e:	230a      	movne	r3, #10
 8006650:	2100      	movs	r1, #0
 8006652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006656:	6866      	ldr	r6, [r4, #4]
 8006658:	60a6      	str	r6, [r4, #8]
 800665a:	2e00      	cmp	r6, #0
 800665c:	bfa2      	ittt	ge
 800665e:	6821      	ldrge	r1, [r4, #0]
 8006660:	f021 0104 	bicge.w	r1, r1, #4
 8006664:	6021      	strge	r1, [r4, #0]
 8006666:	b90d      	cbnz	r5, 800666c <_printf_i+0x118>
 8006668:	2e00      	cmp	r6, #0
 800666a:	d04d      	beq.n	8006708 <_printf_i+0x1b4>
 800666c:	4616      	mov	r6, r2
 800666e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006672:	fb03 5711 	mls	r7, r3, r1, r5
 8006676:	5dc7      	ldrb	r7, [r0, r7]
 8006678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800667c:	462f      	mov	r7, r5
 800667e:	42bb      	cmp	r3, r7
 8006680:	460d      	mov	r5, r1
 8006682:	d9f4      	bls.n	800666e <_printf_i+0x11a>
 8006684:	2b08      	cmp	r3, #8
 8006686:	d10b      	bne.n	80066a0 <_printf_i+0x14c>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	07df      	lsls	r7, r3, #31
 800668c:	d508      	bpl.n	80066a0 <_printf_i+0x14c>
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	6861      	ldr	r1, [r4, #4]
 8006692:	4299      	cmp	r1, r3
 8006694:	bfde      	ittt	le
 8006696:	2330      	movle	r3, #48	; 0x30
 8006698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800669c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066a0:	1b92      	subs	r2, r2, r6
 80066a2:	6122      	str	r2, [r4, #16]
 80066a4:	f8cd a000 	str.w	sl, [sp]
 80066a8:	464b      	mov	r3, r9
 80066aa:	aa03      	add	r2, sp, #12
 80066ac:	4621      	mov	r1, r4
 80066ae:	4640      	mov	r0, r8
 80066b0:	f7ff fee2 	bl	8006478 <_printf_common>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d14c      	bne.n	8006752 <_printf_i+0x1fe>
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	b004      	add	sp, #16
 80066be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c2:	4835      	ldr	r0, [pc, #212]	; (8006798 <_printf_i+0x244>)
 80066c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	680e      	ldr	r6, [r1, #0]
 80066cc:	061f      	lsls	r7, r3, #24
 80066ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80066d2:	600e      	str	r6, [r1, #0]
 80066d4:	d514      	bpl.n	8006700 <_printf_i+0x1ac>
 80066d6:	07d9      	lsls	r1, r3, #31
 80066d8:	bf44      	itt	mi
 80066da:	f043 0320 	orrmi.w	r3, r3, #32
 80066de:	6023      	strmi	r3, [r4, #0]
 80066e0:	b91d      	cbnz	r5, 80066ea <_printf_i+0x196>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f023 0320 	bic.w	r3, r3, #32
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	2310      	movs	r3, #16
 80066ec:	e7b0      	b.n	8006650 <_printf_i+0xfc>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	f043 0320 	orr.w	r3, r3, #32
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	2378      	movs	r3, #120	; 0x78
 80066f8:	4828      	ldr	r0, [pc, #160]	; (800679c <_printf_i+0x248>)
 80066fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066fe:	e7e3      	b.n	80066c8 <_printf_i+0x174>
 8006700:	065e      	lsls	r6, r3, #25
 8006702:	bf48      	it	mi
 8006704:	b2ad      	uxthmi	r5, r5
 8006706:	e7e6      	b.n	80066d6 <_printf_i+0x182>
 8006708:	4616      	mov	r6, r2
 800670a:	e7bb      	b.n	8006684 <_printf_i+0x130>
 800670c:	680b      	ldr	r3, [r1, #0]
 800670e:	6826      	ldr	r6, [r4, #0]
 8006710:	6960      	ldr	r0, [r4, #20]
 8006712:	1d1d      	adds	r5, r3, #4
 8006714:	600d      	str	r5, [r1, #0]
 8006716:	0635      	lsls	r5, r6, #24
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	d501      	bpl.n	8006720 <_printf_i+0x1cc>
 800671c:	6018      	str	r0, [r3, #0]
 800671e:	e002      	b.n	8006726 <_printf_i+0x1d2>
 8006720:	0671      	lsls	r1, r6, #25
 8006722:	d5fb      	bpl.n	800671c <_printf_i+0x1c8>
 8006724:	8018      	strh	r0, [r3, #0]
 8006726:	2300      	movs	r3, #0
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	4616      	mov	r6, r2
 800672c:	e7ba      	b.n	80066a4 <_printf_i+0x150>
 800672e:	680b      	ldr	r3, [r1, #0]
 8006730:	1d1a      	adds	r2, r3, #4
 8006732:	600a      	str	r2, [r1, #0]
 8006734:	681e      	ldr	r6, [r3, #0]
 8006736:	6862      	ldr	r2, [r4, #4]
 8006738:	2100      	movs	r1, #0
 800673a:	4630      	mov	r0, r6
 800673c:	f7f9 fd50 	bl	80001e0 <memchr>
 8006740:	b108      	cbz	r0, 8006746 <_printf_i+0x1f2>
 8006742:	1b80      	subs	r0, r0, r6
 8006744:	6060      	str	r0, [r4, #4]
 8006746:	6863      	ldr	r3, [r4, #4]
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	2300      	movs	r3, #0
 800674c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006750:	e7a8      	b.n	80066a4 <_printf_i+0x150>
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	4632      	mov	r2, r6
 8006756:	4649      	mov	r1, r9
 8006758:	4640      	mov	r0, r8
 800675a:	47d0      	blx	sl
 800675c:	3001      	adds	r0, #1
 800675e:	d0ab      	beq.n	80066b8 <_printf_i+0x164>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	079b      	lsls	r3, r3, #30
 8006764:	d413      	bmi.n	800678e <_printf_i+0x23a>
 8006766:	68e0      	ldr	r0, [r4, #12]
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	4298      	cmp	r0, r3
 800676c:	bfb8      	it	lt
 800676e:	4618      	movlt	r0, r3
 8006770:	e7a4      	b.n	80066bc <_printf_i+0x168>
 8006772:	2301      	movs	r3, #1
 8006774:	4632      	mov	r2, r6
 8006776:	4649      	mov	r1, r9
 8006778:	4640      	mov	r0, r8
 800677a:	47d0      	blx	sl
 800677c:	3001      	adds	r0, #1
 800677e:	d09b      	beq.n	80066b8 <_printf_i+0x164>
 8006780:	3501      	adds	r5, #1
 8006782:	68e3      	ldr	r3, [r4, #12]
 8006784:	9903      	ldr	r1, [sp, #12]
 8006786:	1a5b      	subs	r3, r3, r1
 8006788:	42ab      	cmp	r3, r5
 800678a:	dcf2      	bgt.n	8006772 <_printf_i+0x21e>
 800678c:	e7eb      	b.n	8006766 <_printf_i+0x212>
 800678e:	2500      	movs	r5, #0
 8006790:	f104 0619 	add.w	r6, r4, #25
 8006794:	e7f5      	b.n	8006782 <_printf_i+0x22e>
 8006796:	bf00      	nop
 8006798:	08008d0a 	.word	0x08008d0a
 800679c:	08008d1b 	.word	0x08008d1b

080067a0 <siprintf>:
 80067a0:	b40e      	push	{r1, r2, r3}
 80067a2:	b500      	push	{lr}
 80067a4:	b09c      	sub	sp, #112	; 0x70
 80067a6:	ab1d      	add	r3, sp, #116	; 0x74
 80067a8:	9002      	str	r0, [sp, #8]
 80067aa:	9006      	str	r0, [sp, #24]
 80067ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067b0:	4809      	ldr	r0, [pc, #36]	; (80067d8 <siprintf+0x38>)
 80067b2:	9107      	str	r1, [sp, #28]
 80067b4:	9104      	str	r1, [sp, #16]
 80067b6:	4909      	ldr	r1, [pc, #36]	; (80067dc <siprintf+0x3c>)
 80067b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067bc:	9105      	str	r1, [sp, #20]
 80067be:	6800      	ldr	r0, [r0, #0]
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	a902      	add	r1, sp, #8
 80067c4:	f001 fb46 	bl	8007e54 <_svfiprintf_r>
 80067c8:	9b02      	ldr	r3, [sp, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	b01c      	add	sp, #112	; 0x70
 80067d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d4:	b003      	add	sp, #12
 80067d6:	4770      	bx	lr
 80067d8:	2000000c 	.word	0x2000000c
 80067dc:	ffff0208 	.word	0xffff0208

080067e0 <strncmp>:
 80067e0:	b510      	push	{r4, lr}
 80067e2:	b16a      	cbz	r2, 8006800 <strncmp+0x20>
 80067e4:	3901      	subs	r1, #1
 80067e6:	1884      	adds	r4, r0, r2
 80067e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d103      	bne.n	80067fc <strncmp+0x1c>
 80067f4:	42a0      	cmp	r0, r4
 80067f6:	d001      	beq.n	80067fc <strncmp+0x1c>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f5      	bne.n	80067e8 <strncmp+0x8>
 80067fc:	1a98      	subs	r0, r3, r2
 80067fe:	bd10      	pop	{r4, pc}
 8006800:	4610      	mov	r0, r2
 8006802:	e7fc      	b.n	80067fe <strncmp+0x1e>

08006804 <quorem>:
 8006804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006808:	6903      	ldr	r3, [r0, #16]
 800680a:	690c      	ldr	r4, [r1, #16]
 800680c:	42a3      	cmp	r3, r4
 800680e:	4607      	mov	r7, r0
 8006810:	f2c0 8081 	blt.w	8006916 <quorem+0x112>
 8006814:	3c01      	subs	r4, #1
 8006816:	f101 0814 	add.w	r8, r1, #20
 800681a:	f100 0514 	add.w	r5, r0, #20
 800681e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800682c:	3301      	adds	r3, #1
 800682e:	429a      	cmp	r2, r3
 8006830:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006834:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006838:	fbb2 f6f3 	udiv	r6, r2, r3
 800683c:	d331      	bcc.n	80068a2 <quorem+0x9e>
 800683e:	f04f 0e00 	mov.w	lr, #0
 8006842:	4640      	mov	r0, r8
 8006844:	46ac      	mov	ip, r5
 8006846:	46f2      	mov	sl, lr
 8006848:	f850 2b04 	ldr.w	r2, [r0], #4
 800684c:	b293      	uxth	r3, r2
 800684e:	fb06 e303 	mla	r3, r6, r3, lr
 8006852:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006856:	b29b      	uxth	r3, r3
 8006858:	ebaa 0303 	sub.w	r3, sl, r3
 800685c:	0c12      	lsrs	r2, r2, #16
 800685e:	f8dc a000 	ldr.w	sl, [ip]
 8006862:	fb06 e202 	mla	r2, r6, r2, lr
 8006866:	fa13 f38a 	uxtah	r3, r3, sl
 800686a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800686e:	fa1f fa82 	uxth.w	sl, r2
 8006872:	f8dc 2000 	ldr.w	r2, [ip]
 8006876:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800687a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800687e:	b29b      	uxth	r3, r3
 8006880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006884:	4581      	cmp	r9, r0
 8006886:	f84c 3b04 	str.w	r3, [ip], #4
 800688a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800688e:	d2db      	bcs.n	8006848 <quorem+0x44>
 8006890:	f855 300b 	ldr.w	r3, [r5, fp]
 8006894:	b92b      	cbnz	r3, 80068a2 <quorem+0x9e>
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	3b04      	subs	r3, #4
 800689a:	429d      	cmp	r5, r3
 800689c:	461a      	mov	r2, r3
 800689e:	d32e      	bcc.n	80068fe <quorem+0xfa>
 80068a0:	613c      	str	r4, [r7, #16]
 80068a2:	4638      	mov	r0, r7
 80068a4:	f001 f8c0 	bl	8007a28 <__mcmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	db24      	blt.n	80068f6 <quorem+0xf2>
 80068ac:	3601      	adds	r6, #1
 80068ae:	4628      	mov	r0, r5
 80068b0:	f04f 0c00 	mov.w	ip, #0
 80068b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80068b8:	f8d0 e000 	ldr.w	lr, [r0]
 80068bc:	b293      	uxth	r3, r2
 80068be:	ebac 0303 	sub.w	r3, ip, r3
 80068c2:	0c12      	lsrs	r2, r2, #16
 80068c4:	fa13 f38e 	uxtah	r3, r3, lr
 80068c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068d6:	45c1      	cmp	r9, r8
 80068d8:	f840 3b04 	str.w	r3, [r0], #4
 80068dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068e0:	d2e8      	bcs.n	80068b4 <quorem+0xb0>
 80068e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ea:	b922      	cbnz	r2, 80068f6 <quorem+0xf2>
 80068ec:	3b04      	subs	r3, #4
 80068ee:	429d      	cmp	r5, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	d30a      	bcc.n	800690a <quorem+0x106>
 80068f4:	613c      	str	r4, [r7, #16]
 80068f6:	4630      	mov	r0, r6
 80068f8:	b003      	add	sp, #12
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	3b04      	subs	r3, #4
 8006902:	2a00      	cmp	r2, #0
 8006904:	d1cc      	bne.n	80068a0 <quorem+0x9c>
 8006906:	3c01      	subs	r4, #1
 8006908:	e7c7      	b.n	800689a <quorem+0x96>
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	3b04      	subs	r3, #4
 800690e:	2a00      	cmp	r2, #0
 8006910:	d1f0      	bne.n	80068f4 <quorem+0xf0>
 8006912:	3c01      	subs	r4, #1
 8006914:	e7eb      	b.n	80068ee <quorem+0xea>
 8006916:	2000      	movs	r0, #0
 8006918:	e7ee      	b.n	80068f8 <quorem+0xf4>
 800691a:	0000      	movs	r0, r0
 800691c:	0000      	movs	r0, r0
	...

08006920 <_dtoa_r>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	ed2d 8b02 	vpush	{d8}
 8006928:	ec57 6b10 	vmov	r6, r7, d0
 800692c:	b095      	sub	sp, #84	; 0x54
 800692e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006934:	9105      	str	r1, [sp, #20]
 8006936:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800693a:	4604      	mov	r4, r0
 800693c:	9209      	str	r2, [sp, #36]	; 0x24
 800693e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006940:	b975      	cbnz	r5, 8006960 <_dtoa_r+0x40>
 8006942:	2010      	movs	r0, #16
 8006944:	f000 fddc 	bl	8007500 <malloc>
 8006948:	4602      	mov	r2, r0
 800694a:	6260      	str	r0, [r4, #36]	; 0x24
 800694c:	b920      	cbnz	r0, 8006958 <_dtoa_r+0x38>
 800694e:	4bb2      	ldr	r3, [pc, #712]	; (8006c18 <_dtoa_r+0x2f8>)
 8006950:	21ea      	movs	r1, #234	; 0xea
 8006952:	48b2      	ldr	r0, [pc, #712]	; (8006c1c <_dtoa_r+0x2fc>)
 8006954:	f001 fb8e 	bl	8008074 <__assert_func>
 8006958:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800695c:	6005      	str	r5, [r0, #0]
 800695e:	60c5      	str	r5, [r0, #12]
 8006960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006962:	6819      	ldr	r1, [r3, #0]
 8006964:	b151      	cbz	r1, 800697c <_dtoa_r+0x5c>
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	604a      	str	r2, [r1, #4]
 800696a:	2301      	movs	r3, #1
 800696c:	4093      	lsls	r3, r2
 800696e:	608b      	str	r3, [r1, #8]
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fe1b 	bl	80075ac <_Bfree>
 8006976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	1e3b      	subs	r3, r7, #0
 800697e:	bfb9      	ittee	lt
 8006980:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006984:	9303      	strlt	r3, [sp, #12]
 8006986:	2300      	movge	r3, #0
 8006988:	f8c8 3000 	strge.w	r3, [r8]
 800698c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006990:	4ba3      	ldr	r3, [pc, #652]	; (8006c20 <_dtoa_r+0x300>)
 8006992:	bfbc      	itt	lt
 8006994:	2201      	movlt	r2, #1
 8006996:	f8c8 2000 	strlt.w	r2, [r8]
 800699a:	ea33 0309 	bics.w	r3, r3, r9
 800699e:	d11b      	bne.n	80069d8 <_dtoa_r+0xb8>
 80069a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069ac:	4333      	orrs	r3, r6
 80069ae:	f000 857a 	beq.w	80074a6 <_dtoa_r+0xb86>
 80069b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069b4:	b963      	cbnz	r3, 80069d0 <_dtoa_r+0xb0>
 80069b6:	4b9b      	ldr	r3, [pc, #620]	; (8006c24 <_dtoa_r+0x304>)
 80069b8:	e024      	b.n	8006a04 <_dtoa_r+0xe4>
 80069ba:	4b9b      	ldr	r3, [pc, #620]	; (8006c28 <_dtoa_r+0x308>)
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	9800      	ldr	r0, [sp, #0]
 80069c6:	b015      	add	sp, #84	; 0x54
 80069c8:	ecbd 8b02 	vpop	{d8}
 80069cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	4b94      	ldr	r3, [pc, #592]	; (8006c24 <_dtoa_r+0x304>)
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	3303      	adds	r3, #3
 80069d6:	e7f3      	b.n	80069c0 <_dtoa_r+0xa0>
 80069d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069dc:	2200      	movs	r2, #0
 80069de:	ec51 0b17 	vmov	r0, r1, d7
 80069e2:	2300      	movs	r3, #0
 80069e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80069e8:	f7fa f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ec:	4680      	mov	r8, r0
 80069ee:	b158      	cbz	r0, 8006a08 <_dtoa_r+0xe8>
 80069f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069f2:	2301      	movs	r3, #1
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8551 	beq.w	80074a0 <_dtoa_r+0xb80>
 80069fe:	488b      	ldr	r0, [pc, #556]	; (8006c2c <_dtoa_r+0x30c>)
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	1e43      	subs	r3, r0, #1
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	e7dd      	b.n	80069c4 <_dtoa_r+0xa4>
 8006a08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a0c:	aa12      	add	r2, sp, #72	; 0x48
 8006a0e:	a913      	add	r1, sp, #76	; 0x4c
 8006a10:	4620      	mov	r0, r4
 8006a12:	f001 f8ad 	bl	8007b70 <__d2b>
 8006a16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a1a:	4683      	mov	fp, r0
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	d07c      	beq.n	8006b1a <_dtoa_r+0x1fa>
 8006a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a3a:	4b7d      	ldr	r3, [pc, #500]	; (8006c30 <_dtoa_r+0x310>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4630      	mov	r0, r6
 8006a40:	4639      	mov	r1, r7
 8006a42:	f7f9 fc21 	bl	8000288 <__aeabi_dsub>
 8006a46:	a36e      	add	r3, pc, #440	; (adr r3, 8006c00 <_dtoa_r+0x2e0>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	a36d      	add	r3, pc, #436	; (adr r3, 8006c08 <_dtoa_r+0x2e8>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fc19 	bl	800028c <__adddf3>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	460f      	mov	r7, r1
 8006a60:	f7f9 fd60 	bl	8000524 <__aeabi_i2d>
 8006a64:	a36a      	add	r3, pc, #424	; (adr r3, 8006c10 <_dtoa_r+0x2f0>)
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f7f9 fdc5 	bl	80005f8 <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4630      	mov	r0, r6
 8006a74:	4639      	mov	r1, r7
 8006a76:	f7f9 fc09 	bl	800028c <__adddf3>
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	f7fa f86b 	bl	8000b58 <__aeabi_d2iz>
 8006a82:	2200      	movs	r2, #0
 8006a84:	4682      	mov	sl, r0
 8006a86:	2300      	movs	r3, #0
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7fa f826 	bl	8000adc <__aeabi_dcmplt>
 8006a90:	b148      	cbz	r0, 8006aa6 <_dtoa_r+0x186>
 8006a92:	4650      	mov	r0, sl
 8006a94:	f7f9 fd46 	bl	8000524 <__aeabi_i2d>
 8006a98:	4632      	mov	r2, r6
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	f7fa f814 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa0:	b908      	cbnz	r0, 8006aa6 <_dtoa_r+0x186>
 8006aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa6:	f1ba 0f16 	cmp.w	sl, #22
 8006aaa:	d854      	bhi.n	8006b56 <_dtoa_r+0x236>
 8006aac:	4b61      	ldr	r3, [pc, #388]	; (8006c34 <_dtoa_r+0x314>)
 8006aae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006aba:	f7fa f80f 	bl	8000adc <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d04b      	beq.n	8006b5a <_dtoa_r+0x23a>
 8006ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	930e      	str	r3, [sp, #56]	; 0x38
 8006aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006acc:	1b5d      	subs	r5, r3, r5
 8006ace:	1e6b      	subs	r3, r5, #1
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	bf43      	ittte	mi
 8006ad4:	2300      	movmi	r3, #0
 8006ad6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006ada:	9304      	strmi	r3, [sp, #16]
 8006adc:	f04f 0800 	movpl.w	r8, #0
 8006ae0:	f1ba 0f00 	cmp.w	sl, #0
 8006ae4:	db3b      	blt.n	8006b5e <_dtoa_r+0x23e>
 8006ae6:	9b04      	ldr	r3, [sp, #16]
 8006ae8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006aec:	4453      	add	r3, sl
 8006aee:	9304      	str	r3, [sp, #16]
 8006af0:	2300      	movs	r3, #0
 8006af2:	9306      	str	r3, [sp, #24]
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d869      	bhi.n	8006bce <_dtoa_r+0x2ae>
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	bfc4      	itt	gt
 8006afe:	3b04      	subgt	r3, #4
 8006b00:	9305      	strgt	r3, [sp, #20]
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	f1a3 0302 	sub.w	r3, r3, #2
 8006b08:	bfcc      	ite	gt
 8006b0a:	2500      	movgt	r5, #0
 8006b0c:	2501      	movle	r5, #1
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d869      	bhi.n	8006be6 <_dtoa_r+0x2c6>
 8006b12:	e8df f003 	tbb	[pc, r3]
 8006b16:	4e2c      	.short	0x4e2c
 8006b18:	5a4c      	.short	0x5a4c
 8006b1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006b1e:	441d      	add	r5, r3
 8006b20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	bfc1      	itttt	gt
 8006b28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b30:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b38:	bfda      	itte	le
 8006b3a:	f1c3 0320 	rsble	r3, r3, #32
 8006b3e:	fa06 f003 	lslle.w	r0, r6, r3
 8006b42:	4318      	orrgt	r0, r3
 8006b44:	f7f9 fcde 	bl	8000504 <__aeabi_ui2d>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b50:	3d01      	subs	r5, #1
 8006b52:	9310      	str	r3, [sp, #64]	; 0x40
 8006b54:	e771      	b.n	8006a3a <_dtoa_r+0x11a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e7b6      	b.n	8006ac8 <_dtoa_r+0x1a8>
 8006b5a:	900e      	str	r0, [sp, #56]	; 0x38
 8006b5c:	e7b5      	b.n	8006aca <_dtoa_r+0x1aa>
 8006b5e:	f1ca 0300 	rsb	r3, sl, #0
 8006b62:	9306      	str	r3, [sp, #24]
 8006b64:	2300      	movs	r3, #0
 8006b66:	eba8 080a 	sub.w	r8, r8, sl
 8006b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b6c:	e7c2      	b.n	8006af4 <_dtoa_r+0x1d4>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dc39      	bgt.n	8006bec <_dtoa_r+0x2cc>
 8006b78:	f04f 0901 	mov.w	r9, #1
 8006b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b80:	464b      	mov	r3, r9
 8006b82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b88:	2200      	movs	r2, #0
 8006b8a:	6042      	str	r2, [r0, #4]
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	f102 0614 	add.w	r6, r2, #20
 8006b92:	429e      	cmp	r6, r3
 8006b94:	6841      	ldr	r1, [r0, #4]
 8006b96:	d92f      	bls.n	8006bf8 <_dtoa_r+0x2d8>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fcc7 	bl	800752c <_Balloc>
 8006b9e:	9000      	str	r0, [sp, #0]
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d14b      	bne.n	8006c3c <_dtoa_r+0x31c>
 8006ba4:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <_dtoa_r+0x318>)
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bac:	e6d1      	b.n	8006952 <_dtoa_r+0x32>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e7de      	b.n	8006b70 <_dtoa_r+0x250>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9308      	str	r3, [sp, #32]
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	eb0a 0903 	add.w	r9, sl, r3
 8006bbc:	f109 0301 	add.w	r3, r9, #1
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	bfb8      	it	lt
 8006bc6:	2301      	movlt	r3, #1
 8006bc8:	e7dd      	b.n	8006b86 <_dtoa_r+0x266>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e7f2      	b.n	8006bb4 <_dtoa_r+0x294>
 8006bce:	2501      	movs	r5, #1
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	9508      	str	r5, [sp, #32]
 8006bd6:	f04f 39ff 	mov.w	r9, #4294967295
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006be0:	2312      	movs	r3, #18
 8006be2:	9209      	str	r2, [sp, #36]	; 0x24
 8006be4:	e7cf      	b.n	8006b86 <_dtoa_r+0x266>
 8006be6:	2301      	movs	r3, #1
 8006be8:	9308      	str	r3, [sp, #32]
 8006bea:	e7f4      	b.n	8006bd6 <_dtoa_r+0x2b6>
 8006bec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006bf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	e7c6      	b.n	8006b86 <_dtoa_r+0x266>
 8006bf8:	3101      	adds	r1, #1
 8006bfa:	6041      	str	r1, [r0, #4]
 8006bfc:	0052      	lsls	r2, r2, #1
 8006bfe:	e7c6      	b.n	8006b8e <_dtoa_r+0x26e>
 8006c00:	636f4361 	.word	0x636f4361
 8006c04:	3fd287a7 	.word	0x3fd287a7
 8006c08:	8b60c8b3 	.word	0x8b60c8b3
 8006c0c:	3fc68a28 	.word	0x3fc68a28
 8006c10:	509f79fb 	.word	0x509f79fb
 8006c14:	3fd34413 	.word	0x3fd34413
 8006c18:	08008d39 	.word	0x08008d39
 8006c1c:	08008d50 	.word	0x08008d50
 8006c20:	7ff00000 	.word	0x7ff00000
 8006c24:	08008d35 	.word	0x08008d35
 8006c28:	08008d2c 	.word	0x08008d2c
 8006c2c:	08008d09 	.word	0x08008d09
 8006c30:	3ff80000 	.word	0x3ff80000
 8006c34:	08008e48 	.word	0x08008e48
 8006c38:	08008daf 	.word	0x08008daf
 8006c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c3e:	9a00      	ldr	r2, [sp, #0]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	2b0e      	cmp	r3, #14
 8006c46:	f200 80ad 	bhi.w	8006da4 <_dtoa_r+0x484>
 8006c4a:	2d00      	cmp	r5, #0
 8006c4c:	f000 80aa 	beq.w	8006da4 <_dtoa_r+0x484>
 8006c50:	f1ba 0f00 	cmp.w	sl, #0
 8006c54:	dd36      	ble.n	8006cc4 <_dtoa_r+0x3a4>
 8006c56:	4ac3      	ldr	r2, [pc, #780]	; (8006f64 <_dtoa_r+0x644>)
 8006c58:	f00a 030f 	and.w	r3, sl, #15
 8006c5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c60:	ed93 7b00 	vldr	d7, [r3]
 8006c64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c6c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c70:	eef0 8a67 	vmov.f32	s17, s15
 8006c74:	d016      	beq.n	8006ca4 <_dtoa_r+0x384>
 8006c76:	4bbc      	ldr	r3, [pc, #752]	; (8006f68 <_dtoa_r+0x648>)
 8006c78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c80:	f7f9 fde4 	bl	800084c <__aeabi_ddiv>
 8006c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c88:	f007 070f 	and.w	r7, r7, #15
 8006c8c:	2503      	movs	r5, #3
 8006c8e:	4eb6      	ldr	r6, [pc, #728]	; (8006f68 <_dtoa_r+0x648>)
 8006c90:	b957      	cbnz	r7, 8006ca8 <_dtoa_r+0x388>
 8006c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c96:	ec53 2b18 	vmov	r2, r3, d8
 8006c9a:	f7f9 fdd7 	bl	800084c <__aeabi_ddiv>
 8006c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ca2:	e029      	b.n	8006cf8 <_dtoa_r+0x3d8>
 8006ca4:	2502      	movs	r5, #2
 8006ca6:	e7f2      	b.n	8006c8e <_dtoa_r+0x36e>
 8006ca8:	07f9      	lsls	r1, r7, #31
 8006caa:	d508      	bpl.n	8006cbe <_dtoa_r+0x39e>
 8006cac:	ec51 0b18 	vmov	r0, r1, d8
 8006cb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cb4:	f7f9 fca0 	bl	80005f8 <__aeabi_dmul>
 8006cb8:	ec41 0b18 	vmov	d8, r0, r1
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	107f      	asrs	r7, r7, #1
 8006cc0:	3608      	adds	r6, #8
 8006cc2:	e7e5      	b.n	8006c90 <_dtoa_r+0x370>
 8006cc4:	f000 80a6 	beq.w	8006e14 <_dtoa_r+0x4f4>
 8006cc8:	f1ca 0600 	rsb	r6, sl, #0
 8006ccc:	4ba5      	ldr	r3, [pc, #660]	; (8006f64 <_dtoa_r+0x644>)
 8006cce:	4fa6      	ldr	r7, [pc, #664]	; (8006f68 <_dtoa_r+0x648>)
 8006cd0:	f006 020f 	and.w	r2, r6, #15
 8006cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ce0:	f7f9 fc8a 	bl	80005f8 <__aeabi_dmul>
 8006ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce8:	1136      	asrs	r6, r6, #4
 8006cea:	2300      	movs	r3, #0
 8006cec:	2502      	movs	r5, #2
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	f040 8085 	bne.w	8006dfe <_dtoa_r+0x4de>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1d2      	bne.n	8006c9e <_dtoa_r+0x37e>
 8006cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 808c 	beq.w	8006e18 <_dtoa_r+0x4f8>
 8006d00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d04:	4b99      	ldr	r3, [pc, #612]	; (8006f6c <_dtoa_r+0x64c>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f7f9 fee6 	bl	8000adc <__aeabi_dcmplt>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f000 8081 	beq.w	8006e18 <_dtoa_r+0x4f8>
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d07d      	beq.n	8006e18 <_dtoa_r+0x4f8>
 8006d1c:	f1b9 0f00 	cmp.w	r9, #0
 8006d20:	dd3c      	ble.n	8006d9c <_dtoa_r+0x47c>
 8006d22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4b91      	ldr	r3, [pc, #580]	; (8006f70 <_dtoa_r+0x650>)
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	4639      	mov	r1, r7
 8006d30:	f7f9 fc62 	bl	80005f8 <__aeabi_dmul>
 8006d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d38:	3501      	adds	r5, #1
 8006d3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7f9 fbee 	bl	8000524 <__aeabi_i2d>
 8006d48:	4632      	mov	r2, r6
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	f7f9 fc54 	bl	80005f8 <__aeabi_dmul>
 8006d50:	4b88      	ldr	r3, [pc, #544]	; (8006f74 <_dtoa_r+0x654>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	f7f9 fa9a 	bl	800028c <__adddf3>
 8006d58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d15c      	bne.n	8006e22 <_dtoa_r+0x502>
 8006d68:	4b83      	ldr	r3, [pc, #524]	; (8006f78 <_dtoa_r+0x658>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7f9 fa8a 	bl	8000288 <__aeabi_dsub>
 8006d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	f7f9 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	f040 8296 	bne.w	80072b2 <_dtoa_r+0x992>
 8006d86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d90:	4639      	mov	r1, r7
 8006d92:	f7f9 fea3 	bl	8000adc <__aeabi_dcmplt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f040 8288 	bne.w	80072ac <_dtoa_r+0x98c>
 8006d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006da0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f2c0 8158 	blt.w	800705c <_dtoa_r+0x73c>
 8006dac:	f1ba 0f0e 	cmp.w	sl, #14
 8006db0:	f300 8154 	bgt.w	800705c <_dtoa_r+0x73c>
 8006db4:	4b6b      	ldr	r3, [pc, #428]	; (8006f64 <_dtoa_r+0x644>)
 8006db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f280 80e3 	bge.w	8006f8c <_dtoa_r+0x66c>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f300 80df 	bgt.w	8006f8c <_dtoa_r+0x66c>
 8006dce:	f040 826d 	bne.w	80072ac <_dtoa_r+0x98c>
 8006dd2:	4b69      	ldr	r3, [pc, #420]	; (8006f78 <_dtoa_r+0x658>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	4649      	mov	r1, r9
 8006dda:	f7f9 fc0d 	bl	80005f8 <__aeabi_dmul>
 8006dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de2:	f7f9 fe8f 	bl	8000b04 <__aeabi_dcmpge>
 8006de6:	9e01      	ldr	r6, [sp, #4]
 8006de8:	4637      	mov	r7, r6
 8006dea:	2800      	cmp	r0, #0
 8006dec:	f040 8243 	bne.w	8007276 <_dtoa_r+0x956>
 8006df0:	9d00      	ldr	r5, [sp, #0]
 8006df2:	2331      	movs	r3, #49	; 0x31
 8006df4:	f805 3b01 	strb.w	r3, [r5], #1
 8006df8:	f10a 0a01 	add.w	sl, sl, #1
 8006dfc:	e23f      	b.n	800727e <_dtoa_r+0x95e>
 8006dfe:	07f2      	lsls	r2, r6, #31
 8006e00:	d505      	bpl.n	8006e0e <_dtoa_r+0x4ee>
 8006e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e06:	f7f9 fbf7 	bl	80005f8 <__aeabi_dmul>
 8006e0a:	3501      	adds	r5, #1
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	1076      	asrs	r6, r6, #1
 8006e10:	3708      	adds	r7, #8
 8006e12:	e76c      	b.n	8006cee <_dtoa_r+0x3ce>
 8006e14:	2502      	movs	r5, #2
 8006e16:	e76f      	b.n	8006cf8 <_dtoa_r+0x3d8>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e20:	e78d      	b.n	8006d3e <_dtoa_r+0x41e>
 8006e22:	9900      	ldr	r1, [sp, #0]
 8006e24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e28:	4b4e      	ldr	r3, [pc, #312]	; (8006f64 <_dtoa_r+0x644>)
 8006e2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e2e:	4401      	add	r1, r0
 8006e30:	9102      	str	r1, [sp, #8]
 8006e32:	9908      	ldr	r1, [sp, #32]
 8006e34:	eeb0 8a47 	vmov.f32	s16, s14
 8006e38:	eef0 8a67 	vmov.f32	s17, s15
 8006e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d045      	beq.n	8006ed4 <_dtoa_r+0x5b4>
 8006e48:	494c      	ldr	r1, [pc, #304]	; (8006f7c <_dtoa_r+0x65c>)
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f7f9 fcfe 	bl	800084c <__aeabi_ddiv>
 8006e50:	ec53 2b18 	vmov	r2, r3, d8
 8006e54:	f7f9 fa18 	bl	8000288 <__aeabi_dsub>
 8006e58:	9d00      	ldr	r5, [sp, #0]
 8006e5a:	ec41 0b18 	vmov	d8, r0, r1
 8006e5e:	4639      	mov	r1, r7
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7f9 fe79 	bl	8000b58 <__aeabi_d2iz>
 8006e66:	900c      	str	r0, [sp, #48]	; 0x30
 8006e68:	f7f9 fb5c 	bl	8000524 <__aeabi_i2d>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4630      	mov	r0, r6
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 fa08 	bl	8000288 <__aeabi_dsub>
 8006e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e7a:	3330      	adds	r3, #48	; 0x30
 8006e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e80:	ec53 2b18 	vmov	r2, r3, d8
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	f7f9 fe28 	bl	8000adc <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d165      	bne.n	8006f5c <_dtoa_r+0x63c>
 8006e90:	4632      	mov	r2, r6
 8006e92:	463b      	mov	r3, r7
 8006e94:	4935      	ldr	r1, [pc, #212]	; (8006f6c <_dtoa_r+0x64c>)
 8006e96:	2000      	movs	r0, #0
 8006e98:	f7f9 f9f6 	bl	8000288 <__aeabi_dsub>
 8006e9c:	ec53 2b18 	vmov	r2, r3, d8
 8006ea0:	f7f9 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f040 80b9 	bne.w	800701c <_dtoa_r+0x6fc>
 8006eaa:	9b02      	ldr	r3, [sp, #8]
 8006eac:	429d      	cmp	r5, r3
 8006eae:	f43f af75 	beq.w	8006d9c <_dtoa_r+0x47c>
 8006eb2:	4b2f      	ldr	r3, [pc, #188]	; (8006f70 <_dtoa_r+0x650>)
 8006eb4:	ec51 0b18 	vmov	r0, r1, d8
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f7f9 fb9d 	bl	80005f8 <__aeabi_dmul>
 8006ebe:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <_dtoa_r+0x650>)
 8006ec0:	ec41 0b18 	vmov	d8, r0, r1
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	4639      	mov	r1, r7
 8006eca:	f7f9 fb95 	bl	80005f8 <__aeabi_dmul>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	e7c4      	b.n	8006e5e <_dtoa_r+0x53e>
 8006ed4:	ec51 0b17 	vmov	r0, r1, d7
 8006ed8:	f7f9 fb8e 	bl	80005f8 <__aeabi_dmul>
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	9d00      	ldr	r5, [sp, #0]
 8006ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ee2:	ec41 0b18 	vmov	d8, r0, r1
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7f9 fe35 	bl	8000b58 <__aeabi_d2iz>
 8006eee:	9011      	str	r0, [sp, #68]	; 0x44
 8006ef0:	f7f9 fb18 	bl	8000524 <__aeabi_i2d>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 f9c4 	bl	8000288 <__aeabi_dsub>
 8006f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f02:	3330      	adds	r3, #48	; 0x30
 8006f04:	f805 3b01 	strb.w	r3, [r5], #1
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	460f      	mov	r7, r1
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	d134      	bne.n	8006f80 <_dtoa_r+0x660>
 8006f16:	4b19      	ldr	r3, [pc, #100]	; (8006f7c <_dtoa_r+0x65c>)
 8006f18:	ec51 0b18 	vmov	r0, r1, d8
 8006f1c:	f7f9 f9b6 	bl	800028c <__adddf3>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 fdf6 	bl	8000b18 <__aeabi_dcmpgt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d175      	bne.n	800701c <_dtoa_r+0x6fc>
 8006f30:	ec53 2b18 	vmov	r2, r3, d8
 8006f34:	4911      	ldr	r1, [pc, #68]	; (8006f7c <_dtoa_r+0x65c>)
 8006f36:	2000      	movs	r0, #0
 8006f38:	f7f9 f9a6 	bl	8000288 <__aeabi_dsub>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4630      	mov	r0, r6
 8006f42:	4639      	mov	r1, r7
 8006f44:	f7f9 fdca 	bl	8000adc <__aeabi_dcmplt>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f43f af27 	beq.w	8006d9c <_dtoa_r+0x47c>
 8006f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f50:	1e6b      	subs	r3, r5, #1
 8006f52:	930c      	str	r3, [sp, #48]	; 0x30
 8006f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f58:	2b30      	cmp	r3, #48	; 0x30
 8006f5a:	d0f8      	beq.n	8006f4e <_dtoa_r+0x62e>
 8006f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f60:	e04a      	b.n	8006ff8 <_dtoa_r+0x6d8>
 8006f62:	bf00      	nop
 8006f64:	08008e48 	.word	0x08008e48
 8006f68:	08008e20 	.word	0x08008e20
 8006f6c:	3ff00000 	.word	0x3ff00000
 8006f70:	40240000 	.word	0x40240000
 8006f74:	401c0000 	.word	0x401c0000
 8006f78:	40140000 	.word	0x40140000
 8006f7c:	3fe00000 	.word	0x3fe00000
 8006f80:	4baf      	ldr	r3, [pc, #700]	; (8007240 <_dtoa_r+0x920>)
 8006f82:	f7f9 fb39 	bl	80005f8 <__aeabi_dmul>
 8006f86:	4606      	mov	r6, r0
 8006f88:	460f      	mov	r7, r1
 8006f8a:	e7ac      	b.n	8006ee6 <_dtoa_r+0x5c6>
 8006f8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f90:	9d00      	ldr	r5, [sp, #0]
 8006f92:	4642      	mov	r2, r8
 8006f94:	464b      	mov	r3, r9
 8006f96:	4630      	mov	r0, r6
 8006f98:	4639      	mov	r1, r7
 8006f9a:	f7f9 fc57 	bl	800084c <__aeabi_ddiv>
 8006f9e:	f7f9 fddb 	bl	8000b58 <__aeabi_d2iz>
 8006fa2:	9002      	str	r0, [sp, #8]
 8006fa4:	f7f9 fabe 	bl	8000524 <__aeabi_i2d>
 8006fa8:	4642      	mov	r2, r8
 8006faa:	464b      	mov	r3, r9
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 f966 	bl	8000288 <__aeabi_dsub>
 8006fbc:	9e02      	ldr	r6, [sp, #8]
 8006fbe:	9f01      	ldr	r7, [sp, #4]
 8006fc0:	3630      	adds	r6, #48	; 0x30
 8006fc2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fc6:	9e00      	ldr	r6, [sp, #0]
 8006fc8:	1bae      	subs	r6, r5, r6
 8006fca:	42b7      	cmp	r7, r6
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	d137      	bne.n	8007042 <_dtoa_r+0x722>
 8006fd2:	f7f9 f95b 	bl	800028c <__adddf3>
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	464b      	mov	r3, r9
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460f      	mov	r7, r1
 8006fde:	f7f9 fd9b 	bl	8000b18 <__aeabi_dcmpgt>
 8006fe2:	b9c8      	cbnz	r0, 8007018 <_dtoa_r+0x6f8>
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ff0:	b110      	cbz	r0, 8006ff8 <_dtoa_r+0x6d8>
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	07d9      	lsls	r1, r3, #31
 8006ff6:	d40f      	bmi.n	8007018 <_dtoa_r+0x6f8>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	4659      	mov	r1, fp
 8006ffc:	f000 fad6 	bl	80075ac <_Bfree>
 8007000:	2300      	movs	r3, #0
 8007002:	702b      	strb	r3, [r5, #0]
 8007004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007006:	f10a 0001 	add.w	r0, sl, #1
 800700a:	6018      	str	r0, [r3, #0]
 800700c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800700e:	2b00      	cmp	r3, #0
 8007010:	f43f acd8 	beq.w	80069c4 <_dtoa_r+0xa4>
 8007014:	601d      	str	r5, [r3, #0]
 8007016:	e4d5      	b.n	80069c4 <_dtoa_r+0xa4>
 8007018:	f8cd a01c 	str.w	sl, [sp, #28]
 800701c:	462b      	mov	r3, r5
 800701e:	461d      	mov	r5, r3
 8007020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007024:	2a39      	cmp	r2, #57	; 0x39
 8007026:	d108      	bne.n	800703a <_dtoa_r+0x71a>
 8007028:	9a00      	ldr	r2, [sp, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d1f7      	bne.n	800701e <_dtoa_r+0x6fe>
 800702e:	9a07      	ldr	r2, [sp, #28]
 8007030:	9900      	ldr	r1, [sp, #0]
 8007032:	3201      	adds	r2, #1
 8007034:	9207      	str	r2, [sp, #28]
 8007036:	2230      	movs	r2, #48	; 0x30
 8007038:	700a      	strb	r2, [r1, #0]
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	3201      	adds	r2, #1
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e78c      	b.n	8006f5c <_dtoa_r+0x63c>
 8007042:	4b7f      	ldr	r3, [pc, #508]	; (8007240 <_dtoa_r+0x920>)
 8007044:	2200      	movs	r2, #0
 8007046:	f7f9 fad7 	bl	80005f8 <__aeabi_dmul>
 800704a:	2200      	movs	r2, #0
 800704c:	2300      	movs	r3, #0
 800704e:	4606      	mov	r6, r0
 8007050:	460f      	mov	r7, r1
 8007052:	f7f9 fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 8007056:	2800      	cmp	r0, #0
 8007058:	d09b      	beq.n	8006f92 <_dtoa_r+0x672>
 800705a:	e7cd      	b.n	8006ff8 <_dtoa_r+0x6d8>
 800705c:	9a08      	ldr	r2, [sp, #32]
 800705e:	2a00      	cmp	r2, #0
 8007060:	f000 80c4 	beq.w	80071ec <_dtoa_r+0x8cc>
 8007064:	9a05      	ldr	r2, [sp, #20]
 8007066:	2a01      	cmp	r2, #1
 8007068:	f300 80a8 	bgt.w	80071bc <_dtoa_r+0x89c>
 800706c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800706e:	2a00      	cmp	r2, #0
 8007070:	f000 80a0 	beq.w	80071b4 <_dtoa_r+0x894>
 8007074:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007078:	9e06      	ldr	r6, [sp, #24]
 800707a:	4645      	mov	r5, r8
 800707c:	9a04      	ldr	r2, [sp, #16]
 800707e:	2101      	movs	r1, #1
 8007080:	441a      	add	r2, r3
 8007082:	4620      	mov	r0, r4
 8007084:	4498      	add	r8, r3
 8007086:	9204      	str	r2, [sp, #16]
 8007088:	f000 fb4c 	bl	8007724 <__i2b>
 800708c:	4607      	mov	r7, r0
 800708e:	2d00      	cmp	r5, #0
 8007090:	dd0b      	ble.n	80070aa <_dtoa_r+0x78a>
 8007092:	9b04      	ldr	r3, [sp, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	dd08      	ble.n	80070aa <_dtoa_r+0x78a>
 8007098:	42ab      	cmp	r3, r5
 800709a:	9a04      	ldr	r2, [sp, #16]
 800709c:	bfa8      	it	ge
 800709e:	462b      	movge	r3, r5
 80070a0:	eba8 0803 	sub.w	r8, r8, r3
 80070a4:	1aed      	subs	r5, r5, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	9304      	str	r3, [sp, #16]
 80070aa:	9b06      	ldr	r3, [sp, #24]
 80070ac:	b1fb      	cbz	r3, 80070ee <_dtoa_r+0x7ce>
 80070ae:	9b08      	ldr	r3, [sp, #32]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 809f 	beq.w	80071f4 <_dtoa_r+0x8d4>
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	dd11      	ble.n	80070de <_dtoa_r+0x7be>
 80070ba:	4639      	mov	r1, r7
 80070bc:	4632      	mov	r2, r6
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fbec 	bl	800789c <__pow5mult>
 80070c4:	465a      	mov	r2, fp
 80070c6:	4601      	mov	r1, r0
 80070c8:	4607      	mov	r7, r0
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fb40 	bl	8007750 <__multiply>
 80070d0:	4659      	mov	r1, fp
 80070d2:	9007      	str	r0, [sp, #28]
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 fa69 	bl	80075ac <_Bfree>
 80070da:	9b07      	ldr	r3, [sp, #28]
 80070dc:	469b      	mov	fp, r3
 80070de:	9b06      	ldr	r3, [sp, #24]
 80070e0:	1b9a      	subs	r2, r3, r6
 80070e2:	d004      	beq.n	80070ee <_dtoa_r+0x7ce>
 80070e4:	4659      	mov	r1, fp
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 fbd8 	bl	800789c <__pow5mult>
 80070ec:	4683      	mov	fp, r0
 80070ee:	2101      	movs	r1, #1
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 fb17 	bl	8007724 <__i2b>
 80070f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	4606      	mov	r6, r0
 80070fc:	dd7c      	ble.n	80071f8 <_dtoa_r+0x8d8>
 80070fe:	461a      	mov	r2, r3
 8007100:	4601      	mov	r1, r0
 8007102:	4620      	mov	r0, r4
 8007104:	f000 fbca 	bl	800789c <__pow5mult>
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	2b01      	cmp	r3, #1
 800710c:	4606      	mov	r6, r0
 800710e:	dd76      	ble.n	80071fe <_dtoa_r+0x8de>
 8007110:	2300      	movs	r3, #0
 8007112:	9306      	str	r3, [sp, #24]
 8007114:	6933      	ldr	r3, [r6, #16]
 8007116:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800711a:	6918      	ldr	r0, [r3, #16]
 800711c:	f000 fab2 	bl	8007684 <__hi0bits>
 8007120:	f1c0 0020 	rsb	r0, r0, #32
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	4418      	add	r0, r3
 8007128:	f010 001f 	ands.w	r0, r0, #31
 800712c:	f000 8086 	beq.w	800723c <_dtoa_r+0x91c>
 8007130:	f1c0 0320 	rsb	r3, r0, #32
 8007134:	2b04      	cmp	r3, #4
 8007136:	dd7f      	ble.n	8007238 <_dtoa_r+0x918>
 8007138:	f1c0 001c 	rsb	r0, r0, #28
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	4403      	add	r3, r0
 8007140:	4480      	add	r8, r0
 8007142:	4405      	add	r5, r0
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	f1b8 0f00 	cmp.w	r8, #0
 800714a:	dd05      	ble.n	8007158 <_dtoa_r+0x838>
 800714c:	4659      	mov	r1, fp
 800714e:	4642      	mov	r2, r8
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fbfd 	bl	8007950 <__lshift>
 8007156:	4683      	mov	fp, r0
 8007158:	9b04      	ldr	r3, [sp, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	dd05      	ble.n	800716a <_dtoa_r+0x84a>
 800715e:	4631      	mov	r1, r6
 8007160:	461a      	mov	r2, r3
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fbf4 	bl	8007950 <__lshift>
 8007168:	4606      	mov	r6, r0
 800716a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d069      	beq.n	8007244 <_dtoa_r+0x924>
 8007170:	4631      	mov	r1, r6
 8007172:	4658      	mov	r0, fp
 8007174:	f000 fc58 	bl	8007a28 <__mcmp>
 8007178:	2800      	cmp	r0, #0
 800717a:	da63      	bge.n	8007244 <_dtoa_r+0x924>
 800717c:	2300      	movs	r3, #0
 800717e:	4659      	mov	r1, fp
 8007180:	220a      	movs	r2, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f000 fa34 	bl	80075f0 <__multadd>
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800718e:	4683      	mov	fp, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 818f 	beq.w	80074b4 <_dtoa_r+0xb94>
 8007196:	4639      	mov	r1, r7
 8007198:	2300      	movs	r3, #0
 800719a:	220a      	movs	r2, #10
 800719c:	4620      	mov	r0, r4
 800719e:	f000 fa27 	bl	80075f0 <__multadd>
 80071a2:	f1b9 0f00 	cmp.w	r9, #0
 80071a6:	4607      	mov	r7, r0
 80071a8:	f300 808e 	bgt.w	80072c8 <_dtoa_r+0x9a8>
 80071ac:	9b05      	ldr	r3, [sp, #20]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	dc50      	bgt.n	8007254 <_dtoa_r+0x934>
 80071b2:	e089      	b.n	80072c8 <_dtoa_r+0x9a8>
 80071b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071ba:	e75d      	b.n	8007078 <_dtoa_r+0x758>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	1e5e      	subs	r6, r3, #1
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	42b3      	cmp	r3, r6
 80071c4:	bfbf      	itttt	lt
 80071c6:	9b06      	ldrlt	r3, [sp, #24]
 80071c8:	9606      	strlt	r6, [sp, #24]
 80071ca:	1af2      	sublt	r2, r6, r3
 80071cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80071ce:	bfb6      	itet	lt
 80071d0:	189b      	addlt	r3, r3, r2
 80071d2:	1b9e      	subge	r6, r3, r6
 80071d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	bfb8      	it	lt
 80071da:	2600      	movlt	r6, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	bfb5      	itete	lt
 80071e0:	eba8 0503 	sublt.w	r5, r8, r3
 80071e4:	9b01      	ldrge	r3, [sp, #4]
 80071e6:	2300      	movlt	r3, #0
 80071e8:	4645      	movge	r5, r8
 80071ea:	e747      	b.n	800707c <_dtoa_r+0x75c>
 80071ec:	9e06      	ldr	r6, [sp, #24]
 80071ee:	9f08      	ldr	r7, [sp, #32]
 80071f0:	4645      	mov	r5, r8
 80071f2:	e74c      	b.n	800708e <_dtoa_r+0x76e>
 80071f4:	9a06      	ldr	r2, [sp, #24]
 80071f6:	e775      	b.n	80070e4 <_dtoa_r+0x7c4>
 80071f8:	9b05      	ldr	r3, [sp, #20]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	dc18      	bgt.n	8007230 <_dtoa_r+0x910>
 80071fe:	9b02      	ldr	r3, [sp, #8]
 8007200:	b9b3      	cbnz	r3, 8007230 <_dtoa_r+0x910>
 8007202:	9b03      	ldr	r3, [sp, #12]
 8007204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007208:	b9a3      	cbnz	r3, 8007234 <_dtoa_r+0x914>
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007210:	0d1b      	lsrs	r3, r3, #20
 8007212:	051b      	lsls	r3, r3, #20
 8007214:	b12b      	cbz	r3, 8007222 <_dtoa_r+0x902>
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	3301      	adds	r3, #1
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	f108 0801 	add.w	r8, r8, #1
 8007220:	2301      	movs	r3, #1
 8007222:	9306      	str	r3, [sp, #24]
 8007224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007226:	2b00      	cmp	r3, #0
 8007228:	f47f af74 	bne.w	8007114 <_dtoa_r+0x7f4>
 800722c:	2001      	movs	r0, #1
 800722e:	e779      	b.n	8007124 <_dtoa_r+0x804>
 8007230:	2300      	movs	r3, #0
 8007232:	e7f6      	b.n	8007222 <_dtoa_r+0x902>
 8007234:	9b02      	ldr	r3, [sp, #8]
 8007236:	e7f4      	b.n	8007222 <_dtoa_r+0x902>
 8007238:	d085      	beq.n	8007146 <_dtoa_r+0x826>
 800723a:	4618      	mov	r0, r3
 800723c:	301c      	adds	r0, #28
 800723e:	e77d      	b.n	800713c <_dtoa_r+0x81c>
 8007240:	40240000 	.word	0x40240000
 8007244:	9b01      	ldr	r3, [sp, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	dc38      	bgt.n	80072bc <_dtoa_r+0x99c>
 800724a:	9b05      	ldr	r3, [sp, #20]
 800724c:	2b02      	cmp	r3, #2
 800724e:	dd35      	ble.n	80072bc <_dtoa_r+0x99c>
 8007250:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007254:	f1b9 0f00 	cmp.w	r9, #0
 8007258:	d10d      	bne.n	8007276 <_dtoa_r+0x956>
 800725a:	4631      	mov	r1, r6
 800725c:	464b      	mov	r3, r9
 800725e:	2205      	movs	r2, #5
 8007260:	4620      	mov	r0, r4
 8007262:	f000 f9c5 	bl	80075f0 <__multadd>
 8007266:	4601      	mov	r1, r0
 8007268:	4606      	mov	r6, r0
 800726a:	4658      	mov	r0, fp
 800726c:	f000 fbdc 	bl	8007a28 <__mcmp>
 8007270:	2800      	cmp	r0, #0
 8007272:	f73f adbd 	bgt.w	8006df0 <_dtoa_r+0x4d0>
 8007276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007278:	9d00      	ldr	r5, [sp, #0]
 800727a:	ea6f 0a03 	mvn.w	sl, r3
 800727e:	f04f 0800 	mov.w	r8, #0
 8007282:	4631      	mov	r1, r6
 8007284:	4620      	mov	r0, r4
 8007286:	f000 f991 	bl	80075ac <_Bfree>
 800728a:	2f00      	cmp	r7, #0
 800728c:	f43f aeb4 	beq.w	8006ff8 <_dtoa_r+0x6d8>
 8007290:	f1b8 0f00 	cmp.w	r8, #0
 8007294:	d005      	beq.n	80072a2 <_dtoa_r+0x982>
 8007296:	45b8      	cmp	r8, r7
 8007298:	d003      	beq.n	80072a2 <_dtoa_r+0x982>
 800729a:	4641      	mov	r1, r8
 800729c:	4620      	mov	r0, r4
 800729e:	f000 f985 	bl	80075ac <_Bfree>
 80072a2:	4639      	mov	r1, r7
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 f981 	bl	80075ac <_Bfree>
 80072aa:	e6a5      	b.n	8006ff8 <_dtoa_r+0x6d8>
 80072ac:	2600      	movs	r6, #0
 80072ae:	4637      	mov	r7, r6
 80072b0:	e7e1      	b.n	8007276 <_dtoa_r+0x956>
 80072b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80072b8:	4637      	mov	r7, r6
 80072ba:	e599      	b.n	8006df0 <_dtoa_r+0x4d0>
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80fd 	beq.w	80074c2 <_dtoa_r+0xba2>
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	dd05      	ble.n	80072d8 <_dtoa_r+0x9b8>
 80072cc:	4639      	mov	r1, r7
 80072ce:	462a      	mov	r2, r5
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fb3d 	bl	8007950 <__lshift>
 80072d6:	4607      	mov	r7, r0
 80072d8:	9b06      	ldr	r3, [sp, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d05c      	beq.n	8007398 <_dtoa_r+0xa78>
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f923 	bl	800752c <_Balloc>
 80072e6:	4605      	mov	r5, r0
 80072e8:	b928      	cbnz	r0, 80072f6 <_dtoa_r+0x9d6>
 80072ea:	4b80      	ldr	r3, [pc, #512]	; (80074ec <_dtoa_r+0xbcc>)
 80072ec:	4602      	mov	r2, r0
 80072ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072f2:	f7ff bb2e 	b.w	8006952 <_dtoa_r+0x32>
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	3202      	adds	r2, #2
 80072fa:	0092      	lsls	r2, r2, #2
 80072fc:	f107 010c 	add.w	r1, r7, #12
 8007300:	300c      	adds	r0, #12
 8007302:	f000 f905 	bl	8007510 <memcpy>
 8007306:	2201      	movs	r2, #1
 8007308:	4629      	mov	r1, r5
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fb20 	bl	8007950 <__lshift>
 8007310:	9b00      	ldr	r3, [sp, #0]
 8007312:	3301      	adds	r3, #1
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	9b00      	ldr	r3, [sp, #0]
 8007318:	444b      	add	r3, r9
 800731a:	9307      	str	r3, [sp, #28]
 800731c:	9b02      	ldr	r3, [sp, #8]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	46b8      	mov	r8, r7
 8007324:	9306      	str	r3, [sp, #24]
 8007326:	4607      	mov	r7, r0
 8007328:	9b01      	ldr	r3, [sp, #4]
 800732a:	4631      	mov	r1, r6
 800732c:	3b01      	subs	r3, #1
 800732e:	4658      	mov	r0, fp
 8007330:	9302      	str	r3, [sp, #8]
 8007332:	f7ff fa67 	bl	8006804 <quorem>
 8007336:	4603      	mov	r3, r0
 8007338:	3330      	adds	r3, #48	; 0x30
 800733a:	9004      	str	r0, [sp, #16]
 800733c:	4641      	mov	r1, r8
 800733e:	4658      	mov	r0, fp
 8007340:	9308      	str	r3, [sp, #32]
 8007342:	f000 fb71 	bl	8007a28 <__mcmp>
 8007346:	463a      	mov	r2, r7
 8007348:	4681      	mov	r9, r0
 800734a:	4631      	mov	r1, r6
 800734c:	4620      	mov	r0, r4
 800734e:	f000 fb87 	bl	8007a60 <__mdiff>
 8007352:	68c2      	ldr	r2, [r0, #12]
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	4605      	mov	r5, r0
 8007358:	bb02      	cbnz	r2, 800739c <_dtoa_r+0xa7c>
 800735a:	4601      	mov	r1, r0
 800735c:	4658      	mov	r0, fp
 800735e:	f000 fb63 	bl	8007a28 <__mcmp>
 8007362:	9b08      	ldr	r3, [sp, #32]
 8007364:	4602      	mov	r2, r0
 8007366:	4629      	mov	r1, r5
 8007368:	4620      	mov	r0, r4
 800736a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800736e:	f000 f91d 	bl	80075ac <_Bfree>
 8007372:	9b05      	ldr	r3, [sp, #20]
 8007374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007376:	9d01      	ldr	r5, [sp, #4]
 8007378:	ea43 0102 	orr.w	r1, r3, r2
 800737c:	9b06      	ldr	r3, [sp, #24]
 800737e:	430b      	orrs	r3, r1
 8007380:	9b08      	ldr	r3, [sp, #32]
 8007382:	d10d      	bne.n	80073a0 <_dtoa_r+0xa80>
 8007384:	2b39      	cmp	r3, #57	; 0x39
 8007386:	d029      	beq.n	80073dc <_dtoa_r+0xabc>
 8007388:	f1b9 0f00 	cmp.w	r9, #0
 800738c:	dd01      	ble.n	8007392 <_dtoa_r+0xa72>
 800738e:	9b04      	ldr	r3, [sp, #16]
 8007390:	3331      	adds	r3, #49	; 0x31
 8007392:	9a02      	ldr	r2, [sp, #8]
 8007394:	7013      	strb	r3, [r2, #0]
 8007396:	e774      	b.n	8007282 <_dtoa_r+0x962>
 8007398:	4638      	mov	r0, r7
 800739a:	e7b9      	b.n	8007310 <_dtoa_r+0x9f0>
 800739c:	2201      	movs	r2, #1
 800739e:	e7e2      	b.n	8007366 <_dtoa_r+0xa46>
 80073a0:	f1b9 0f00 	cmp.w	r9, #0
 80073a4:	db06      	blt.n	80073b4 <_dtoa_r+0xa94>
 80073a6:	9905      	ldr	r1, [sp, #20]
 80073a8:	ea41 0909 	orr.w	r9, r1, r9
 80073ac:	9906      	ldr	r1, [sp, #24]
 80073ae:	ea59 0101 	orrs.w	r1, r9, r1
 80073b2:	d120      	bne.n	80073f6 <_dtoa_r+0xad6>
 80073b4:	2a00      	cmp	r2, #0
 80073b6:	ddec      	ble.n	8007392 <_dtoa_r+0xa72>
 80073b8:	4659      	mov	r1, fp
 80073ba:	2201      	movs	r2, #1
 80073bc:	4620      	mov	r0, r4
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	f000 fac6 	bl	8007950 <__lshift>
 80073c4:	4631      	mov	r1, r6
 80073c6:	4683      	mov	fp, r0
 80073c8:	f000 fb2e 	bl	8007a28 <__mcmp>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	dc02      	bgt.n	80073d8 <_dtoa_r+0xab8>
 80073d2:	d1de      	bne.n	8007392 <_dtoa_r+0xa72>
 80073d4:	07da      	lsls	r2, r3, #31
 80073d6:	d5dc      	bpl.n	8007392 <_dtoa_r+0xa72>
 80073d8:	2b39      	cmp	r3, #57	; 0x39
 80073da:	d1d8      	bne.n	800738e <_dtoa_r+0xa6e>
 80073dc:	9a02      	ldr	r2, [sp, #8]
 80073de:	2339      	movs	r3, #57	; 0x39
 80073e0:	7013      	strb	r3, [r2, #0]
 80073e2:	462b      	mov	r3, r5
 80073e4:	461d      	mov	r5, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073ec:	2a39      	cmp	r2, #57	; 0x39
 80073ee:	d050      	beq.n	8007492 <_dtoa_r+0xb72>
 80073f0:	3201      	adds	r2, #1
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	e745      	b.n	8007282 <_dtoa_r+0x962>
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	dd03      	ble.n	8007402 <_dtoa_r+0xae2>
 80073fa:	2b39      	cmp	r3, #57	; 0x39
 80073fc:	d0ee      	beq.n	80073dc <_dtoa_r+0xabc>
 80073fe:	3301      	adds	r3, #1
 8007400:	e7c7      	b.n	8007392 <_dtoa_r+0xa72>
 8007402:	9a01      	ldr	r2, [sp, #4]
 8007404:	9907      	ldr	r1, [sp, #28]
 8007406:	f802 3c01 	strb.w	r3, [r2, #-1]
 800740a:	428a      	cmp	r2, r1
 800740c:	d02a      	beq.n	8007464 <_dtoa_r+0xb44>
 800740e:	4659      	mov	r1, fp
 8007410:	2300      	movs	r3, #0
 8007412:	220a      	movs	r2, #10
 8007414:	4620      	mov	r0, r4
 8007416:	f000 f8eb 	bl	80075f0 <__multadd>
 800741a:	45b8      	cmp	r8, r7
 800741c:	4683      	mov	fp, r0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	f04f 020a 	mov.w	r2, #10
 8007426:	4641      	mov	r1, r8
 8007428:	4620      	mov	r0, r4
 800742a:	d107      	bne.n	800743c <_dtoa_r+0xb1c>
 800742c:	f000 f8e0 	bl	80075f0 <__multadd>
 8007430:	4680      	mov	r8, r0
 8007432:	4607      	mov	r7, r0
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	3301      	adds	r3, #1
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	e775      	b.n	8007328 <_dtoa_r+0xa08>
 800743c:	f000 f8d8 	bl	80075f0 <__multadd>
 8007440:	4639      	mov	r1, r7
 8007442:	4680      	mov	r8, r0
 8007444:	2300      	movs	r3, #0
 8007446:	220a      	movs	r2, #10
 8007448:	4620      	mov	r0, r4
 800744a:	f000 f8d1 	bl	80075f0 <__multadd>
 800744e:	4607      	mov	r7, r0
 8007450:	e7f0      	b.n	8007434 <_dtoa_r+0xb14>
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	9a00      	ldr	r2, [sp, #0]
 8007458:	bfcc      	ite	gt
 800745a:	464d      	movgt	r5, r9
 800745c:	2501      	movle	r5, #1
 800745e:	4415      	add	r5, r2
 8007460:	f04f 0800 	mov.w	r8, #0
 8007464:	4659      	mov	r1, fp
 8007466:	2201      	movs	r2, #1
 8007468:	4620      	mov	r0, r4
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	f000 fa70 	bl	8007950 <__lshift>
 8007470:	4631      	mov	r1, r6
 8007472:	4683      	mov	fp, r0
 8007474:	f000 fad8 	bl	8007a28 <__mcmp>
 8007478:	2800      	cmp	r0, #0
 800747a:	dcb2      	bgt.n	80073e2 <_dtoa_r+0xac2>
 800747c:	d102      	bne.n	8007484 <_dtoa_r+0xb64>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	07db      	lsls	r3, r3, #31
 8007482:	d4ae      	bmi.n	80073e2 <_dtoa_r+0xac2>
 8007484:	462b      	mov	r3, r5
 8007486:	461d      	mov	r5, r3
 8007488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800748c:	2a30      	cmp	r2, #48	; 0x30
 800748e:	d0fa      	beq.n	8007486 <_dtoa_r+0xb66>
 8007490:	e6f7      	b.n	8007282 <_dtoa_r+0x962>
 8007492:	9a00      	ldr	r2, [sp, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d1a5      	bne.n	80073e4 <_dtoa_r+0xac4>
 8007498:	f10a 0a01 	add.w	sl, sl, #1
 800749c:	2331      	movs	r3, #49	; 0x31
 800749e:	e779      	b.n	8007394 <_dtoa_r+0xa74>
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <_dtoa_r+0xbd0>)
 80074a2:	f7ff baaf 	b.w	8006a04 <_dtoa_r+0xe4>
 80074a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f aa86 	bne.w	80069ba <_dtoa_r+0x9a>
 80074ae:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <_dtoa_r+0xbd4>)
 80074b0:	f7ff baa8 	b.w	8006a04 <_dtoa_r+0xe4>
 80074b4:	f1b9 0f00 	cmp.w	r9, #0
 80074b8:	dc03      	bgt.n	80074c2 <_dtoa_r+0xba2>
 80074ba:	9b05      	ldr	r3, [sp, #20]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	f73f aec9 	bgt.w	8007254 <_dtoa_r+0x934>
 80074c2:	9d00      	ldr	r5, [sp, #0]
 80074c4:	4631      	mov	r1, r6
 80074c6:	4658      	mov	r0, fp
 80074c8:	f7ff f99c 	bl	8006804 <quorem>
 80074cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074d0:	f805 3b01 	strb.w	r3, [r5], #1
 80074d4:	9a00      	ldr	r2, [sp, #0]
 80074d6:	1aaa      	subs	r2, r5, r2
 80074d8:	4591      	cmp	r9, r2
 80074da:	ddba      	ble.n	8007452 <_dtoa_r+0xb32>
 80074dc:	4659      	mov	r1, fp
 80074de:	2300      	movs	r3, #0
 80074e0:	220a      	movs	r2, #10
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 f884 	bl	80075f0 <__multadd>
 80074e8:	4683      	mov	fp, r0
 80074ea:	e7eb      	b.n	80074c4 <_dtoa_r+0xba4>
 80074ec:	08008daf 	.word	0x08008daf
 80074f0:	08008d08 	.word	0x08008d08
 80074f4:	08008d2c 	.word	0x08008d2c

080074f8 <_localeconv_r>:
 80074f8:	4800      	ldr	r0, [pc, #0]	; (80074fc <_localeconv_r+0x4>)
 80074fa:	4770      	bx	lr
 80074fc:	20000160 	.word	0x20000160

08007500 <malloc>:
 8007500:	4b02      	ldr	r3, [pc, #8]	; (800750c <malloc+0xc>)
 8007502:	4601      	mov	r1, r0
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	f000 bbef 	b.w	8007ce8 <_malloc_r>
 800750a:	bf00      	nop
 800750c:	2000000c 	.word	0x2000000c

08007510 <memcpy>:
 8007510:	440a      	add	r2, r1
 8007512:	4291      	cmp	r1, r2
 8007514:	f100 33ff 	add.w	r3, r0, #4294967295
 8007518:	d100      	bne.n	800751c <memcpy+0xc>
 800751a:	4770      	bx	lr
 800751c:	b510      	push	{r4, lr}
 800751e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007526:	4291      	cmp	r1, r2
 8007528:	d1f9      	bne.n	800751e <memcpy+0xe>
 800752a:	bd10      	pop	{r4, pc}

0800752c <_Balloc>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	b976      	cbnz	r6, 8007554 <_Balloc+0x28>
 8007536:	2010      	movs	r0, #16
 8007538:	f7ff ffe2 	bl	8007500 <malloc>
 800753c:	4602      	mov	r2, r0
 800753e:	6260      	str	r0, [r4, #36]	; 0x24
 8007540:	b920      	cbnz	r0, 800754c <_Balloc+0x20>
 8007542:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <_Balloc+0x78>)
 8007544:	4818      	ldr	r0, [pc, #96]	; (80075a8 <_Balloc+0x7c>)
 8007546:	2166      	movs	r1, #102	; 0x66
 8007548:	f000 fd94 	bl	8008074 <__assert_func>
 800754c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007550:	6006      	str	r6, [r0, #0]
 8007552:	60c6      	str	r6, [r0, #12]
 8007554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007556:	68f3      	ldr	r3, [r6, #12]
 8007558:	b183      	cbz	r3, 800757c <_Balloc+0x50>
 800755a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007562:	b9b8      	cbnz	r0, 8007594 <_Balloc+0x68>
 8007564:	2101      	movs	r1, #1
 8007566:	fa01 f605 	lsl.w	r6, r1, r5
 800756a:	1d72      	adds	r2, r6, #5
 800756c:	0092      	lsls	r2, r2, #2
 800756e:	4620      	mov	r0, r4
 8007570:	f000 fb5a 	bl	8007c28 <_calloc_r>
 8007574:	b160      	cbz	r0, 8007590 <_Balloc+0x64>
 8007576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800757a:	e00e      	b.n	800759a <_Balloc+0x6e>
 800757c:	2221      	movs	r2, #33	; 0x21
 800757e:	2104      	movs	r1, #4
 8007580:	4620      	mov	r0, r4
 8007582:	f000 fb51 	bl	8007c28 <_calloc_r>
 8007586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007588:	60f0      	str	r0, [r6, #12]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e4      	bne.n	800755a <_Balloc+0x2e>
 8007590:	2000      	movs	r0, #0
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	6802      	ldr	r2, [r0, #0]
 8007596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800759a:	2300      	movs	r3, #0
 800759c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075a0:	e7f7      	b.n	8007592 <_Balloc+0x66>
 80075a2:	bf00      	nop
 80075a4:	08008d39 	.word	0x08008d39
 80075a8:	08008dc0 	.word	0x08008dc0

080075ac <_Bfree>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075b0:	4605      	mov	r5, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	b976      	cbnz	r6, 80075d4 <_Bfree+0x28>
 80075b6:	2010      	movs	r0, #16
 80075b8:	f7ff ffa2 	bl	8007500 <malloc>
 80075bc:	4602      	mov	r2, r0
 80075be:	6268      	str	r0, [r5, #36]	; 0x24
 80075c0:	b920      	cbnz	r0, 80075cc <_Bfree+0x20>
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <_Bfree+0x3c>)
 80075c4:	4809      	ldr	r0, [pc, #36]	; (80075ec <_Bfree+0x40>)
 80075c6:	218a      	movs	r1, #138	; 0x8a
 80075c8:	f000 fd54 	bl	8008074 <__assert_func>
 80075cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075d0:	6006      	str	r6, [r0, #0]
 80075d2:	60c6      	str	r6, [r0, #12]
 80075d4:	b13c      	cbz	r4, 80075e6 <_Bfree+0x3a>
 80075d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075d8:	6862      	ldr	r2, [r4, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075e0:	6021      	str	r1, [r4, #0]
 80075e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	08008d39 	.word	0x08008d39
 80075ec:	08008dc0 	.word	0x08008dc0

080075f0 <__multadd>:
 80075f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f4:	690e      	ldr	r6, [r1, #16]
 80075f6:	4607      	mov	r7, r0
 80075f8:	4698      	mov	r8, r3
 80075fa:	460c      	mov	r4, r1
 80075fc:	f101 0014 	add.w	r0, r1, #20
 8007600:	2300      	movs	r3, #0
 8007602:	6805      	ldr	r5, [r0, #0]
 8007604:	b2a9      	uxth	r1, r5
 8007606:	fb02 8101 	mla	r1, r2, r1, r8
 800760a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800760e:	0c2d      	lsrs	r5, r5, #16
 8007610:	fb02 c505 	mla	r5, r2, r5, ip
 8007614:	b289      	uxth	r1, r1
 8007616:	3301      	adds	r3, #1
 8007618:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800761c:	429e      	cmp	r6, r3
 800761e:	f840 1b04 	str.w	r1, [r0], #4
 8007622:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007626:	dcec      	bgt.n	8007602 <__multadd+0x12>
 8007628:	f1b8 0f00 	cmp.w	r8, #0
 800762c:	d022      	beq.n	8007674 <__multadd+0x84>
 800762e:	68a3      	ldr	r3, [r4, #8]
 8007630:	42b3      	cmp	r3, r6
 8007632:	dc19      	bgt.n	8007668 <__multadd+0x78>
 8007634:	6861      	ldr	r1, [r4, #4]
 8007636:	4638      	mov	r0, r7
 8007638:	3101      	adds	r1, #1
 800763a:	f7ff ff77 	bl	800752c <_Balloc>
 800763e:	4605      	mov	r5, r0
 8007640:	b928      	cbnz	r0, 800764e <__multadd+0x5e>
 8007642:	4602      	mov	r2, r0
 8007644:	4b0d      	ldr	r3, [pc, #52]	; (800767c <__multadd+0x8c>)
 8007646:	480e      	ldr	r0, [pc, #56]	; (8007680 <__multadd+0x90>)
 8007648:	21b5      	movs	r1, #181	; 0xb5
 800764a:	f000 fd13 	bl	8008074 <__assert_func>
 800764e:	6922      	ldr	r2, [r4, #16]
 8007650:	3202      	adds	r2, #2
 8007652:	f104 010c 	add.w	r1, r4, #12
 8007656:	0092      	lsls	r2, r2, #2
 8007658:	300c      	adds	r0, #12
 800765a:	f7ff ff59 	bl	8007510 <memcpy>
 800765e:	4621      	mov	r1, r4
 8007660:	4638      	mov	r0, r7
 8007662:	f7ff ffa3 	bl	80075ac <_Bfree>
 8007666:	462c      	mov	r4, r5
 8007668:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800766c:	3601      	adds	r6, #1
 800766e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007672:	6126      	str	r6, [r4, #16]
 8007674:	4620      	mov	r0, r4
 8007676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800767a:	bf00      	nop
 800767c:	08008daf 	.word	0x08008daf
 8007680:	08008dc0 	.word	0x08008dc0

08007684 <__hi0bits>:
 8007684:	0c03      	lsrs	r3, r0, #16
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	b9d3      	cbnz	r3, 80076c0 <__hi0bits+0x3c>
 800768a:	0400      	lsls	r0, r0, #16
 800768c:	2310      	movs	r3, #16
 800768e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007692:	bf04      	itt	eq
 8007694:	0200      	lsleq	r0, r0, #8
 8007696:	3308      	addeq	r3, #8
 8007698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800769c:	bf04      	itt	eq
 800769e:	0100      	lsleq	r0, r0, #4
 80076a0:	3304      	addeq	r3, #4
 80076a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076a6:	bf04      	itt	eq
 80076a8:	0080      	lsleq	r0, r0, #2
 80076aa:	3302      	addeq	r3, #2
 80076ac:	2800      	cmp	r0, #0
 80076ae:	db05      	blt.n	80076bc <__hi0bits+0x38>
 80076b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076b4:	f103 0301 	add.w	r3, r3, #1
 80076b8:	bf08      	it	eq
 80076ba:	2320      	moveq	r3, #32
 80076bc:	4618      	mov	r0, r3
 80076be:	4770      	bx	lr
 80076c0:	2300      	movs	r3, #0
 80076c2:	e7e4      	b.n	800768e <__hi0bits+0xa>

080076c4 <__lo0bits>:
 80076c4:	6803      	ldr	r3, [r0, #0]
 80076c6:	f013 0207 	ands.w	r2, r3, #7
 80076ca:	4601      	mov	r1, r0
 80076cc:	d00b      	beq.n	80076e6 <__lo0bits+0x22>
 80076ce:	07da      	lsls	r2, r3, #31
 80076d0:	d424      	bmi.n	800771c <__lo0bits+0x58>
 80076d2:	0798      	lsls	r0, r3, #30
 80076d4:	bf49      	itett	mi
 80076d6:	085b      	lsrmi	r3, r3, #1
 80076d8:	089b      	lsrpl	r3, r3, #2
 80076da:	2001      	movmi	r0, #1
 80076dc:	600b      	strmi	r3, [r1, #0]
 80076de:	bf5c      	itt	pl
 80076e0:	600b      	strpl	r3, [r1, #0]
 80076e2:	2002      	movpl	r0, #2
 80076e4:	4770      	bx	lr
 80076e6:	b298      	uxth	r0, r3
 80076e8:	b9b0      	cbnz	r0, 8007718 <__lo0bits+0x54>
 80076ea:	0c1b      	lsrs	r3, r3, #16
 80076ec:	2010      	movs	r0, #16
 80076ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076f2:	bf04      	itt	eq
 80076f4:	0a1b      	lsreq	r3, r3, #8
 80076f6:	3008      	addeq	r0, #8
 80076f8:	071a      	lsls	r2, r3, #28
 80076fa:	bf04      	itt	eq
 80076fc:	091b      	lsreq	r3, r3, #4
 80076fe:	3004      	addeq	r0, #4
 8007700:	079a      	lsls	r2, r3, #30
 8007702:	bf04      	itt	eq
 8007704:	089b      	lsreq	r3, r3, #2
 8007706:	3002      	addeq	r0, #2
 8007708:	07da      	lsls	r2, r3, #31
 800770a:	d403      	bmi.n	8007714 <__lo0bits+0x50>
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	f100 0001 	add.w	r0, r0, #1
 8007712:	d005      	beq.n	8007720 <__lo0bits+0x5c>
 8007714:	600b      	str	r3, [r1, #0]
 8007716:	4770      	bx	lr
 8007718:	4610      	mov	r0, r2
 800771a:	e7e8      	b.n	80076ee <__lo0bits+0x2a>
 800771c:	2000      	movs	r0, #0
 800771e:	4770      	bx	lr
 8007720:	2020      	movs	r0, #32
 8007722:	4770      	bx	lr

08007724 <__i2b>:
 8007724:	b510      	push	{r4, lr}
 8007726:	460c      	mov	r4, r1
 8007728:	2101      	movs	r1, #1
 800772a:	f7ff feff 	bl	800752c <_Balloc>
 800772e:	4602      	mov	r2, r0
 8007730:	b928      	cbnz	r0, 800773e <__i2b+0x1a>
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <__i2b+0x24>)
 8007734:	4805      	ldr	r0, [pc, #20]	; (800774c <__i2b+0x28>)
 8007736:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800773a:	f000 fc9b 	bl	8008074 <__assert_func>
 800773e:	2301      	movs	r3, #1
 8007740:	6144      	str	r4, [r0, #20]
 8007742:	6103      	str	r3, [r0, #16]
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	08008daf 	.word	0x08008daf
 800774c:	08008dc0 	.word	0x08008dc0

08007750 <__multiply>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	4614      	mov	r4, r2
 8007756:	690a      	ldr	r2, [r1, #16]
 8007758:	6923      	ldr	r3, [r4, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	bfb8      	it	lt
 800775e:	460b      	movlt	r3, r1
 8007760:	460d      	mov	r5, r1
 8007762:	bfbc      	itt	lt
 8007764:	4625      	movlt	r5, r4
 8007766:	461c      	movlt	r4, r3
 8007768:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800776c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007770:	68ab      	ldr	r3, [r5, #8]
 8007772:	6869      	ldr	r1, [r5, #4]
 8007774:	eb0a 0709 	add.w	r7, sl, r9
 8007778:	42bb      	cmp	r3, r7
 800777a:	b085      	sub	sp, #20
 800777c:	bfb8      	it	lt
 800777e:	3101      	addlt	r1, #1
 8007780:	f7ff fed4 	bl	800752c <_Balloc>
 8007784:	b930      	cbnz	r0, 8007794 <__multiply+0x44>
 8007786:	4602      	mov	r2, r0
 8007788:	4b42      	ldr	r3, [pc, #264]	; (8007894 <__multiply+0x144>)
 800778a:	4843      	ldr	r0, [pc, #268]	; (8007898 <__multiply+0x148>)
 800778c:	f240 115d 	movw	r1, #349	; 0x15d
 8007790:	f000 fc70 	bl	8008074 <__assert_func>
 8007794:	f100 0614 	add.w	r6, r0, #20
 8007798:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800779c:	4633      	mov	r3, r6
 800779e:	2200      	movs	r2, #0
 80077a0:	4543      	cmp	r3, r8
 80077a2:	d31e      	bcc.n	80077e2 <__multiply+0x92>
 80077a4:	f105 0c14 	add.w	ip, r5, #20
 80077a8:	f104 0314 	add.w	r3, r4, #20
 80077ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80077b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80077b4:	9202      	str	r2, [sp, #8]
 80077b6:	ebac 0205 	sub.w	r2, ip, r5
 80077ba:	3a15      	subs	r2, #21
 80077bc:	f022 0203 	bic.w	r2, r2, #3
 80077c0:	3204      	adds	r2, #4
 80077c2:	f105 0115 	add.w	r1, r5, #21
 80077c6:	458c      	cmp	ip, r1
 80077c8:	bf38      	it	cc
 80077ca:	2204      	movcc	r2, #4
 80077cc:	9201      	str	r2, [sp, #4]
 80077ce:	9a02      	ldr	r2, [sp, #8]
 80077d0:	9303      	str	r3, [sp, #12]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d808      	bhi.n	80077e8 <__multiply+0x98>
 80077d6:	2f00      	cmp	r7, #0
 80077d8:	dc55      	bgt.n	8007886 <__multiply+0x136>
 80077da:	6107      	str	r7, [r0, #16]
 80077dc:	b005      	add	sp, #20
 80077de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e2:	f843 2b04 	str.w	r2, [r3], #4
 80077e6:	e7db      	b.n	80077a0 <__multiply+0x50>
 80077e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80077ec:	f1ba 0f00 	cmp.w	sl, #0
 80077f0:	d020      	beq.n	8007834 <__multiply+0xe4>
 80077f2:	f105 0e14 	add.w	lr, r5, #20
 80077f6:	46b1      	mov	r9, r6
 80077f8:	2200      	movs	r2, #0
 80077fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80077fe:	f8d9 b000 	ldr.w	fp, [r9]
 8007802:	b2a1      	uxth	r1, r4
 8007804:	fa1f fb8b 	uxth.w	fp, fp
 8007808:	fb0a b101 	mla	r1, sl, r1, fp
 800780c:	4411      	add	r1, r2
 800780e:	f8d9 2000 	ldr.w	r2, [r9]
 8007812:	0c24      	lsrs	r4, r4, #16
 8007814:	0c12      	lsrs	r2, r2, #16
 8007816:	fb0a 2404 	mla	r4, sl, r4, r2
 800781a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800781e:	b289      	uxth	r1, r1
 8007820:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007824:	45f4      	cmp	ip, lr
 8007826:	f849 1b04 	str.w	r1, [r9], #4
 800782a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800782e:	d8e4      	bhi.n	80077fa <__multiply+0xaa>
 8007830:	9901      	ldr	r1, [sp, #4]
 8007832:	5072      	str	r2, [r6, r1]
 8007834:	9a03      	ldr	r2, [sp, #12]
 8007836:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800783a:	3304      	adds	r3, #4
 800783c:	f1b9 0f00 	cmp.w	r9, #0
 8007840:	d01f      	beq.n	8007882 <__multiply+0x132>
 8007842:	6834      	ldr	r4, [r6, #0]
 8007844:	f105 0114 	add.w	r1, r5, #20
 8007848:	46b6      	mov	lr, r6
 800784a:	f04f 0a00 	mov.w	sl, #0
 800784e:	880a      	ldrh	r2, [r1, #0]
 8007850:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007854:	fb09 b202 	mla	r2, r9, r2, fp
 8007858:	4492      	add	sl, r2
 800785a:	b2a4      	uxth	r4, r4
 800785c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007860:	f84e 4b04 	str.w	r4, [lr], #4
 8007864:	f851 4b04 	ldr.w	r4, [r1], #4
 8007868:	f8be 2000 	ldrh.w	r2, [lr]
 800786c:	0c24      	lsrs	r4, r4, #16
 800786e:	fb09 2404 	mla	r4, r9, r4, r2
 8007872:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007876:	458c      	cmp	ip, r1
 8007878:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800787c:	d8e7      	bhi.n	800784e <__multiply+0xfe>
 800787e:	9a01      	ldr	r2, [sp, #4]
 8007880:	50b4      	str	r4, [r6, r2]
 8007882:	3604      	adds	r6, #4
 8007884:	e7a3      	b.n	80077ce <__multiply+0x7e>
 8007886:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1a5      	bne.n	80077da <__multiply+0x8a>
 800788e:	3f01      	subs	r7, #1
 8007890:	e7a1      	b.n	80077d6 <__multiply+0x86>
 8007892:	bf00      	nop
 8007894:	08008daf 	.word	0x08008daf
 8007898:	08008dc0 	.word	0x08008dc0

0800789c <__pow5mult>:
 800789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	4615      	mov	r5, r2
 80078a2:	f012 0203 	ands.w	r2, r2, #3
 80078a6:	4606      	mov	r6, r0
 80078a8:	460f      	mov	r7, r1
 80078aa:	d007      	beq.n	80078bc <__pow5mult+0x20>
 80078ac:	4c25      	ldr	r4, [pc, #148]	; (8007944 <__pow5mult+0xa8>)
 80078ae:	3a01      	subs	r2, #1
 80078b0:	2300      	movs	r3, #0
 80078b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078b6:	f7ff fe9b 	bl	80075f0 <__multadd>
 80078ba:	4607      	mov	r7, r0
 80078bc:	10ad      	asrs	r5, r5, #2
 80078be:	d03d      	beq.n	800793c <__pow5mult+0xa0>
 80078c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078c2:	b97c      	cbnz	r4, 80078e4 <__pow5mult+0x48>
 80078c4:	2010      	movs	r0, #16
 80078c6:	f7ff fe1b 	bl	8007500 <malloc>
 80078ca:	4602      	mov	r2, r0
 80078cc:	6270      	str	r0, [r6, #36]	; 0x24
 80078ce:	b928      	cbnz	r0, 80078dc <__pow5mult+0x40>
 80078d0:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <__pow5mult+0xac>)
 80078d2:	481e      	ldr	r0, [pc, #120]	; (800794c <__pow5mult+0xb0>)
 80078d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078d8:	f000 fbcc 	bl	8008074 <__assert_func>
 80078dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078e0:	6004      	str	r4, [r0, #0]
 80078e2:	60c4      	str	r4, [r0, #12]
 80078e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078ec:	b94c      	cbnz	r4, 8007902 <__pow5mult+0x66>
 80078ee:	f240 2171 	movw	r1, #625	; 0x271
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff ff16 	bl	8007724 <__i2b>
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80078fe:	4604      	mov	r4, r0
 8007900:	6003      	str	r3, [r0, #0]
 8007902:	f04f 0900 	mov.w	r9, #0
 8007906:	07eb      	lsls	r3, r5, #31
 8007908:	d50a      	bpl.n	8007920 <__pow5mult+0x84>
 800790a:	4639      	mov	r1, r7
 800790c:	4622      	mov	r2, r4
 800790e:	4630      	mov	r0, r6
 8007910:	f7ff ff1e 	bl	8007750 <__multiply>
 8007914:	4639      	mov	r1, r7
 8007916:	4680      	mov	r8, r0
 8007918:	4630      	mov	r0, r6
 800791a:	f7ff fe47 	bl	80075ac <_Bfree>
 800791e:	4647      	mov	r7, r8
 8007920:	106d      	asrs	r5, r5, #1
 8007922:	d00b      	beq.n	800793c <__pow5mult+0xa0>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	b938      	cbnz	r0, 8007938 <__pow5mult+0x9c>
 8007928:	4622      	mov	r2, r4
 800792a:	4621      	mov	r1, r4
 800792c:	4630      	mov	r0, r6
 800792e:	f7ff ff0f 	bl	8007750 <__multiply>
 8007932:	6020      	str	r0, [r4, #0]
 8007934:	f8c0 9000 	str.w	r9, [r0]
 8007938:	4604      	mov	r4, r0
 800793a:	e7e4      	b.n	8007906 <__pow5mult+0x6a>
 800793c:	4638      	mov	r0, r7
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	bf00      	nop
 8007944:	08008f10 	.word	0x08008f10
 8007948:	08008d39 	.word	0x08008d39
 800794c:	08008dc0 	.word	0x08008dc0

08007950 <__lshift>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	460c      	mov	r4, r1
 8007956:	6849      	ldr	r1, [r1, #4]
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	4607      	mov	r7, r0
 8007962:	4691      	mov	r9, r2
 8007964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007968:	f108 0601 	add.w	r6, r8, #1
 800796c:	42b3      	cmp	r3, r6
 800796e:	db0b      	blt.n	8007988 <__lshift+0x38>
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff fddb 	bl	800752c <_Balloc>
 8007976:	4605      	mov	r5, r0
 8007978:	b948      	cbnz	r0, 800798e <__lshift+0x3e>
 800797a:	4602      	mov	r2, r0
 800797c:	4b28      	ldr	r3, [pc, #160]	; (8007a20 <__lshift+0xd0>)
 800797e:	4829      	ldr	r0, [pc, #164]	; (8007a24 <__lshift+0xd4>)
 8007980:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007984:	f000 fb76 	bl	8008074 <__assert_func>
 8007988:	3101      	adds	r1, #1
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	e7ee      	b.n	800796c <__lshift+0x1c>
 800798e:	2300      	movs	r3, #0
 8007990:	f100 0114 	add.w	r1, r0, #20
 8007994:	f100 0210 	add.w	r2, r0, #16
 8007998:	4618      	mov	r0, r3
 800799a:	4553      	cmp	r3, sl
 800799c:	db33      	blt.n	8007a06 <__lshift+0xb6>
 800799e:	6920      	ldr	r0, [r4, #16]
 80079a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079a4:	f104 0314 	add.w	r3, r4, #20
 80079a8:	f019 091f 	ands.w	r9, r9, #31
 80079ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079b4:	d02b      	beq.n	8007a0e <__lshift+0xbe>
 80079b6:	f1c9 0e20 	rsb	lr, r9, #32
 80079ba:	468a      	mov	sl, r1
 80079bc:	2200      	movs	r2, #0
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	fa00 f009 	lsl.w	r0, r0, r9
 80079c4:	4302      	orrs	r2, r0
 80079c6:	f84a 2b04 	str.w	r2, [sl], #4
 80079ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ce:	459c      	cmp	ip, r3
 80079d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079d4:	d8f3      	bhi.n	80079be <__lshift+0x6e>
 80079d6:	ebac 0304 	sub.w	r3, ip, r4
 80079da:	3b15      	subs	r3, #21
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	3304      	adds	r3, #4
 80079e2:	f104 0015 	add.w	r0, r4, #21
 80079e6:	4584      	cmp	ip, r0
 80079e8:	bf38      	it	cc
 80079ea:	2304      	movcc	r3, #4
 80079ec:	50ca      	str	r2, [r1, r3]
 80079ee:	b10a      	cbz	r2, 80079f4 <__lshift+0xa4>
 80079f0:	f108 0602 	add.w	r6, r8, #2
 80079f4:	3e01      	subs	r6, #1
 80079f6:	4638      	mov	r0, r7
 80079f8:	612e      	str	r6, [r5, #16]
 80079fa:	4621      	mov	r1, r4
 80079fc:	f7ff fdd6 	bl	80075ac <_Bfree>
 8007a00:	4628      	mov	r0, r5
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	e7c5      	b.n	800799a <__lshift+0x4a>
 8007a0e:	3904      	subs	r1, #4
 8007a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a18:	459c      	cmp	ip, r3
 8007a1a:	d8f9      	bhi.n	8007a10 <__lshift+0xc0>
 8007a1c:	e7ea      	b.n	80079f4 <__lshift+0xa4>
 8007a1e:	bf00      	nop
 8007a20:	08008daf 	.word	0x08008daf
 8007a24:	08008dc0 	.word	0x08008dc0

08007a28 <__mcmp>:
 8007a28:	b530      	push	{r4, r5, lr}
 8007a2a:	6902      	ldr	r2, [r0, #16]
 8007a2c:	690c      	ldr	r4, [r1, #16]
 8007a2e:	1b12      	subs	r2, r2, r4
 8007a30:	d10e      	bne.n	8007a50 <__mcmp+0x28>
 8007a32:	f100 0314 	add.w	r3, r0, #20
 8007a36:	3114      	adds	r1, #20
 8007a38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a48:	42a5      	cmp	r5, r4
 8007a4a:	d003      	beq.n	8007a54 <__mcmp+0x2c>
 8007a4c:	d305      	bcc.n	8007a5a <__mcmp+0x32>
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4610      	mov	r0, r2
 8007a52:	bd30      	pop	{r4, r5, pc}
 8007a54:	4283      	cmp	r3, r0
 8007a56:	d3f3      	bcc.n	8007a40 <__mcmp+0x18>
 8007a58:	e7fa      	b.n	8007a50 <__mcmp+0x28>
 8007a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5e:	e7f7      	b.n	8007a50 <__mcmp+0x28>

08007a60 <__mdiff>:
 8007a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460c      	mov	r4, r1
 8007a66:	4606      	mov	r6, r0
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4617      	mov	r7, r2
 8007a6e:	f7ff ffdb 	bl	8007a28 <__mcmp>
 8007a72:	1e05      	subs	r5, r0, #0
 8007a74:	d110      	bne.n	8007a98 <__mdiff+0x38>
 8007a76:	4629      	mov	r1, r5
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff fd57 	bl	800752c <_Balloc>
 8007a7e:	b930      	cbnz	r0, 8007a8e <__mdiff+0x2e>
 8007a80:	4b39      	ldr	r3, [pc, #228]	; (8007b68 <__mdiff+0x108>)
 8007a82:	4602      	mov	r2, r0
 8007a84:	f240 2132 	movw	r1, #562	; 0x232
 8007a88:	4838      	ldr	r0, [pc, #224]	; (8007b6c <__mdiff+0x10c>)
 8007a8a:	f000 faf3 	bl	8008074 <__assert_func>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	bfa4      	itt	ge
 8007a9a:	463b      	movge	r3, r7
 8007a9c:	4627      	movge	r7, r4
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	bfa6      	itte	ge
 8007aa4:	461c      	movge	r4, r3
 8007aa6:	2500      	movge	r5, #0
 8007aa8:	2501      	movlt	r5, #1
 8007aaa:	f7ff fd3f 	bl	800752c <_Balloc>
 8007aae:	b920      	cbnz	r0, 8007aba <__mdiff+0x5a>
 8007ab0:	4b2d      	ldr	r3, [pc, #180]	; (8007b68 <__mdiff+0x108>)
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ab8:	e7e6      	b.n	8007a88 <__mdiff+0x28>
 8007aba:	693e      	ldr	r6, [r7, #16]
 8007abc:	60c5      	str	r5, [r0, #12]
 8007abe:	6925      	ldr	r5, [r4, #16]
 8007ac0:	f107 0114 	add.w	r1, r7, #20
 8007ac4:	f104 0914 	add.w	r9, r4, #20
 8007ac8:	f100 0e14 	add.w	lr, r0, #20
 8007acc:	f107 0210 	add.w	r2, r7, #16
 8007ad0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ad4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ad8:	46f2      	mov	sl, lr
 8007ada:	2700      	movs	r7, #0
 8007adc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ae0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ae4:	fa1f f883 	uxth.w	r8, r3
 8007ae8:	fa17 f78b 	uxtah	r7, r7, fp
 8007aec:	0c1b      	lsrs	r3, r3, #16
 8007aee:	eba7 0808 	sub.w	r8, r7, r8
 8007af2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007af6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007afa:	fa1f f888 	uxth.w	r8, r8
 8007afe:	141f      	asrs	r7, r3, #16
 8007b00:	454d      	cmp	r5, r9
 8007b02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b06:	f84a 3b04 	str.w	r3, [sl], #4
 8007b0a:	d8e7      	bhi.n	8007adc <__mdiff+0x7c>
 8007b0c:	1b2b      	subs	r3, r5, r4
 8007b0e:	3b15      	subs	r3, #21
 8007b10:	f023 0303 	bic.w	r3, r3, #3
 8007b14:	3304      	adds	r3, #4
 8007b16:	3415      	adds	r4, #21
 8007b18:	42a5      	cmp	r5, r4
 8007b1a:	bf38      	it	cc
 8007b1c:	2304      	movcc	r3, #4
 8007b1e:	4419      	add	r1, r3
 8007b20:	4473      	add	r3, lr
 8007b22:	469e      	mov	lr, r3
 8007b24:	460d      	mov	r5, r1
 8007b26:	4565      	cmp	r5, ip
 8007b28:	d30e      	bcc.n	8007b48 <__mdiff+0xe8>
 8007b2a:	f10c 0203 	add.w	r2, ip, #3
 8007b2e:	1a52      	subs	r2, r2, r1
 8007b30:	f022 0203 	bic.w	r2, r2, #3
 8007b34:	3903      	subs	r1, #3
 8007b36:	458c      	cmp	ip, r1
 8007b38:	bf38      	it	cc
 8007b3a:	2200      	movcc	r2, #0
 8007b3c:	441a      	add	r2, r3
 8007b3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b42:	b17b      	cbz	r3, 8007b64 <__mdiff+0x104>
 8007b44:	6106      	str	r6, [r0, #16]
 8007b46:	e7a5      	b.n	8007a94 <__mdiff+0x34>
 8007b48:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b4c:	fa17 f488 	uxtah	r4, r7, r8
 8007b50:	1422      	asrs	r2, r4, #16
 8007b52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b56:	b2a4      	uxth	r4, r4
 8007b58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b5c:	f84e 4b04 	str.w	r4, [lr], #4
 8007b60:	1417      	asrs	r7, r2, #16
 8007b62:	e7e0      	b.n	8007b26 <__mdiff+0xc6>
 8007b64:	3e01      	subs	r6, #1
 8007b66:	e7ea      	b.n	8007b3e <__mdiff+0xde>
 8007b68:	08008daf 	.word	0x08008daf
 8007b6c:	08008dc0 	.word	0x08008dc0

08007b70 <__d2b>:
 8007b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	4689      	mov	r9, r1
 8007b76:	2101      	movs	r1, #1
 8007b78:	ec57 6b10 	vmov	r6, r7, d0
 8007b7c:	4690      	mov	r8, r2
 8007b7e:	f7ff fcd5 	bl	800752c <_Balloc>
 8007b82:	4604      	mov	r4, r0
 8007b84:	b930      	cbnz	r0, 8007b94 <__d2b+0x24>
 8007b86:	4602      	mov	r2, r0
 8007b88:	4b25      	ldr	r3, [pc, #148]	; (8007c20 <__d2b+0xb0>)
 8007b8a:	4826      	ldr	r0, [pc, #152]	; (8007c24 <__d2b+0xb4>)
 8007b8c:	f240 310a 	movw	r1, #778	; 0x30a
 8007b90:	f000 fa70 	bl	8008074 <__assert_func>
 8007b94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b9c:	bb35      	cbnz	r5, 8007bec <__d2b+0x7c>
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	d028      	beq.n	8007bf6 <__d2b+0x86>
 8007ba4:	4668      	mov	r0, sp
 8007ba6:	9600      	str	r6, [sp, #0]
 8007ba8:	f7ff fd8c 	bl	80076c4 <__lo0bits>
 8007bac:	9900      	ldr	r1, [sp, #0]
 8007bae:	b300      	cbz	r0, 8007bf2 <__d2b+0x82>
 8007bb0:	9a01      	ldr	r2, [sp, #4]
 8007bb2:	f1c0 0320 	rsb	r3, r0, #32
 8007bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	40c2      	lsrs	r2, r0
 8007bbe:	6163      	str	r3, [r4, #20]
 8007bc0:	9201      	str	r2, [sp, #4]
 8007bc2:	9b01      	ldr	r3, [sp, #4]
 8007bc4:	61a3      	str	r3, [r4, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bf14      	ite	ne
 8007bca:	2202      	movne	r2, #2
 8007bcc:	2201      	moveq	r2, #1
 8007bce:	6122      	str	r2, [r4, #16]
 8007bd0:	b1d5      	cbz	r5, 8007c08 <__d2b+0x98>
 8007bd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bd6:	4405      	add	r5, r0
 8007bd8:	f8c9 5000 	str.w	r5, [r9]
 8007bdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007be0:	f8c8 0000 	str.w	r0, [r8]
 8007be4:	4620      	mov	r0, r4
 8007be6:	b003      	add	sp, #12
 8007be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bf0:	e7d5      	b.n	8007b9e <__d2b+0x2e>
 8007bf2:	6161      	str	r1, [r4, #20]
 8007bf4:	e7e5      	b.n	8007bc2 <__d2b+0x52>
 8007bf6:	a801      	add	r0, sp, #4
 8007bf8:	f7ff fd64 	bl	80076c4 <__lo0bits>
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	2201      	movs	r2, #1
 8007c02:	6122      	str	r2, [r4, #16]
 8007c04:	3020      	adds	r0, #32
 8007c06:	e7e3      	b.n	8007bd0 <__d2b+0x60>
 8007c08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c10:	f8c9 0000 	str.w	r0, [r9]
 8007c14:	6918      	ldr	r0, [r3, #16]
 8007c16:	f7ff fd35 	bl	8007684 <__hi0bits>
 8007c1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c1e:	e7df      	b.n	8007be0 <__d2b+0x70>
 8007c20:	08008daf 	.word	0x08008daf
 8007c24:	08008dc0 	.word	0x08008dc0

08007c28 <_calloc_r>:
 8007c28:	b513      	push	{r0, r1, r4, lr}
 8007c2a:	434a      	muls	r2, r1
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	9201      	str	r2, [sp, #4]
 8007c30:	f000 f85a 	bl	8007ce8 <_malloc_r>
 8007c34:	4604      	mov	r4, r0
 8007c36:	b118      	cbz	r0, 8007c40 <_calloc_r+0x18>
 8007c38:	9a01      	ldr	r2, [sp, #4]
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	f7fe f93e 	bl	8005ebc <memset>
 8007c40:	4620      	mov	r0, r4
 8007c42:	b002      	add	sp, #8
 8007c44:	bd10      	pop	{r4, pc}
	...

08007c48 <_free_r>:
 8007c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c4a:	2900      	cmp	r1, #0
 8007c4c:	d048      	beq.n	8007ce0 <_free_r+0x98>
 8007c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c52:	9001      	str	r0, [sp, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f1a1 0404 	sub.w	r4, r1, #4
 8007c5a:	bfb8      	it	lt
 8007c5c:	18e4      	addlt	r4, r4, r3
 8007c5e:	f000 fa65 	bl	800812c <__malloc_lock>
 8007c62:	4a20      	ldr	r2, [pc, #128]	; (8007ce4 <_free_r+0x9c>)
 8007c64:	9801      	ldr	r0, [sp, #4]
 8007c66:	6813      	ldr	r3, [r2, #0]
 8007c68:	4615      	mov	r5, r2
 8007c6a:	b933      	cbnz	r3, 8007c7a <_free_r+0x32>
 8007c6c:	6063      	str	r3, [r4, #4]
 8007c6e:	6014      	str	r4, [r2, #0]
 8007c70:	b003      	add	sp, #12
 8007c72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c76:	f000 ba5f 	b.w	8008138 <__malloc_unlock>
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	d90b      	bls.n	8007c96 <_free_r+0x4e>
 8007c7e:	6821      	ldr	r1, [r4, #0]
 8007c80:	1862      	adds	r2, r4, r1
 8007c82:	4293      	cmp	r3, r2
 8007c84:	bf04      	itt	eq
 8007c86:	681a      	ldreq	r2, [r3, #0]
 8007c88:	685b      	ldreq	r3, [r3, #4]
 8007c8a:	6063      	str	r3, [r4, #4]
 8007c8c:	bf04      	itt	eq
 8007c8e:	1852      	addeq	r2, r2, r1
 8007c90:	6022      	streq	r2, [r4, #0]
 8007c92:	602c      	str	r4, [r5, #0]
 8007c94:	e7ec      	b.n	8007c70 <_free_r+0x28>
 8007c96:	461a      	mov	r2, r3
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b10b      	cbz	r3, 8007ca0 <_free_r+0x58>
 8007c9c:	42a3      	cmp	r3, r4
 8007c9e:	d9fa      	bls.n	8007c96 <_free_r+0x4e>
 8007ca0:	6811      	ldr	r1, [r2, #0]
 8007ca2:	1855      	adds	r5, r2, r1
 8007ca4:	42a5      	cmp	r5, r4
 8007ca6:	d10b      	bne.n	8007cc0 <_free_r+0x78>
 8007ca8:	6824      	ldr	r4, [r4, #0]
 8007caa:	4421      	add	r1, r4
 8007cac:	1854      	adds	r4, r2, r1
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	6011      	str	r1, [r2, #0]
 8007cb2:	d1dd      	bne.n	8007c70 <_free_r+0x28>
 8007cb4:	681c      	ldr	r4, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	6053      	str	r3, [r2, #4]
 8007cba:	4421      	add	r1, r4
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	e7d7      	b.n	8007c70 <_free_r+0x28>
 8007cc0:	d902      	bls.n	8007cc8 <_free_r+0x80>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	6003      	str	r3, [r0, #0]
 8007cc6:	e7d3      	b.n	8007c70 <_free_r+0x28>
 8007cc8:	6825      	ldr	r5, [r4, #0]
 8007cca:	1961      	adds	r1, r4, r5
 8007ccc:	428b      	cmp	r3, r1
 8007cce:	bf04      	itt	eq
 8007cd0:	6819      	ldreq	r1, [r3, #0]
 8007cd2:	685b      	ldreq	r3, [r3, #4]
 8007cd4:	6063      	str	r3, [r4, #4]
 8007cd6:	bf04      	itt	eq
 8007cd8:	1949      	addeq	r1, r1, r5
 8007cda:	6021      	streq	r1, [r4, #0]
 8007cdc:	6054      	str	r4, [r2, #4]
 8007cde:	e7c7      	b.n	8007c70 <_free_r+0x28>
 8007ce0:	b003      	add	sp, #12
 8007ce2:	bd30      	pop	{r4, r5, pc}
 8007ce4:	20000200 	.word	0x20000200

08007ce8 <_malloc_r>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	1ccd      	adds	r5, r1, #3
 8007cec:	f025 0503 	bic.w	r5, r5, #3
 8007cf0:	3508      	adds	r5, #8
 8007cf2:	2d0c      	cmp	r5, #12
 8007cf4:	bf38      	it	cc
 8007cf6:	250c      	movcc	r5, #12
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	db01      	blt.n	8007d02 <_malloc_r+0x1a>
 8007cfe:	42a9      	cmp	r1, r5
 8007d00:	d903      	bls.n	8007d0a <_malloc_r+0x22>
 8007d02:	230c      	movs	r3, #12
 8007d04:	6033      	str	r3, [r6, #0]
 8007d06:	2000      	movs	r0, #0
 8007d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d0a:	f000 fa0f 	bl	800812c <__malloc_lock>
 8007d0e:	4921      	ldr	r1, [pc, #132]	; (8007d94 <_malloc_r+0xac>)
 8007d10:	680a      	ldr	r2, [r1, #0]
 8007d12:	4614      	mov	r4, r2
 8007d14:	b99c      	cbnz	r4, 8007d3e <_malloc_r+0x56>
 8007d16:	4f20      	ldr	r7, [pc, #128]	; (8007d98 <_malloc_r+0xb0>)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	b923      	cbnz	r3, 8007d26 <_malloc_r+0x3e>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f000 f998 	bl	8008054 <_sbrk_r>
 8007d24:	6038      	str	r0, [r7, #0]
 8007d26:	4629      	mov	r1, r5
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f000 f993 	bl	8008054 <_sbrk_r>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	d123      	bne.n	8007d7a <_malloc_r+0x92>
 8007d32:	230c      	movs	r3, #12
 8007d34:	6033      	str	r3, [r6, #0]
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 f9fe 	bl	8008138 <__malloc_unlock>
 8007d3c:	e7e3      	b.n	8007d06 <_malloc_r+0x1e>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	1b5b      	subs	r3, r3, r5
 8007d42:	d417      	bmi.n	8007d74 <_malloc_r+0x8c>
 8007d44:	2b0b      	cmp	r3, #11
 8007d46:	d903      	bls.n	8007d50 <_malloc_r+0x68>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	441c      	add	r4, r3
 8007d4c:	6025      	str	r5, [r4, #0]
 8007d4e:	e004      	b.n	8007d5a <_malloc_r+0x72>
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	42a2      	cmp	r2, r4
 8007d54:	bf0c      	ite	eq
 8007d56:	600b      	streq	r3, [r1, #0]
 8007d58:	6053      	strne	r3, [r2, #4]
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f9ec 	bl	8008138 <__malloc_unlock>
 8007d60:	f104 000b 	add.w	r0, r4, #11
 8007d64:	1d23      	adds	r3, r4, #4
 8007d66:	f020 0007 	bic.w	r0, r0, #7
 8007d6a:	1ac2      	subs	r2, r0, r3
 8007d6c:	d0cc      	beq.n	8007d08 <_malloc_r+0x20>
 8007d6e:	1a1b      	subs	r3, r3, r0
 8007d70:	50a3      	str	r3, [r4, r2]
 8007d72:	e7c9      	b.n	8007d08 <_malloc_r+0x20>
 8007d74:	4622      	mov	r2, r4
 8007d76:	6864      	ldr	r4, [r4, #4]
 8007d78:	e7cc      	b.n	8007d14 <_malloc_r+0x2c>
 8007d7a:	1cc4      	adds	r4, r0, #3
 8007d7c:	f024 0403 	bic.w	r4, r4, #3
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d0e3      	beq.n	8007d4c <_malloc_r+0x64>
 8007d84:	1a21      	subs	r1, r4, r0
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 f964 	bl	8008054 <_sbrk_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d1dd      	bne.n	8007d4c <_malloc_r+0x64>
 8007d90:	e7cf      	b.n	8007d32 <_malloc_r+0x4a>
 8007d92:	bf00      	nop
 8007d94:	20000200 	.word	0x20000200
 8007d98:	20000204 	.word	0x20000204

08007d9c <__ssputs_r>:
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	688e      	ldr	r6, [r1, #8]
 8007da2:	429e      	cmp	r6, r3
 8007da4:	4682      	mov	sl, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	4690      	mov	r8, r2
 8007daa:	461f      	mov	r7, r3
 8007dac:	d838      	bhi.n	8007e20 <__ssputs_r+0x84>
 8007dae:	898a      	ldrh	r2, [r1, #12]
 8007db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007db4:	d032      	beq.n	8007e1c <__ssputs_r+0x80>
 8007db6:	6825      	ldr	r5, [r4, #0]
 8007db8:	6909      	ldr	r1, [r1, #16]
 8007dba:	eba5 0901 	sub.w	r9, r5, r1
 8007dbe:	6965      	ldr	r5, [r4, #20]
 8007dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dc8:	3301      	adds	r3, #1
 8007dca:	444b      	add	r3, r9
 8007dcc:	106d      	asrs	r5, r5, #1
 8007dce:	429d      	cmp	r5, r3
 8007dd0:	bf38      	it	cc
 8007dd2:	461d      	movcc	r5, r3
 8007dd4:	0553      	lsls	r3, r2, #21
 8007dd6:	d531      	bpl.n	8007e3c <__ssputs_r+0xa0>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7ff ff85 	bl	8007ce8 <_malloc_r>
 8007dde:	4606      	mov	r6, r0
 8007de0:	b950      	cbnz	r0, 8007df8 <__ssputs_r+0x5c>
 8007de2:	230c      	movs	r3, #12
 8007de4:	f8ca 3000 	str.w	r3, [sl]
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df8:	6921      	ldr	r1, [r4, #16]
 8007dfa:	464a      	mov	r2, r9
 8007dfc:	f7ff fb88 	bl	8007510 <memcpy>
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	6126      	str	r6, [r4, #16]
 8007e0e:	6165      	str	r5, [r4, #20]
 8007e10:	444e      	add	r6, r9
 8007e12:	eba5 0509 	sub.w	r5, r5, r9
 8007e16:	6026      	str	r6, [r4, #0]
 8007e18:	60a5      	str	r5, [r4, #8]
 8007e1a:	463e      	mov	r6, r7
 8007e1c:	42be      	cmp	r6, r7
 8007e1e:	d900      	bls.n	8007e22 <__ssputs_r+0x86>
 8007e20:	463e      	mov	r6, r7
 8007e22:	4632      	mov	r2, r6
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	4641      	mov	r1, r8
 8007e28:	f000 f966 	bl	80080f8 <memmove>
 8007e2c:	68a3      	ldr	r3, [r4, #8]
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	1b9b      	subs	r3, r3, r6
 8007e32:	4432      	add	r2, r6
 8007e34:	60a3      	str	r3, [r4, #8]
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e7db      	b.n	8007df4 <__ssputs_r+0x58>
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	f000 f981 	bl	8008144 <_realloc_r>
 8007e42:	4606      	mov	r6, r0
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1e1      	bne.n	8007e0c <__ssputs_r+0x70>
 8007e48:	6921      	ldr	r1, [r4, #16]
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	f7ff fefc 	bl	8007c48 <_free_r>
 8007e50:	e7c7      	b.n	8007de2 <__ssputs_r+0x46>
	...

08007e54 <_svfiprintf_r>:
 8007e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e58:	4698      	mov	r8, r3
 8007e5a:	898b      	ldrh	r3, [r1, #12]
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	b09d      	sub	sp, #116	; 0x74
 8007e60:	4607      	mov	r7, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	4614      	mov	r4, r2
 8007e66:	d50e      	bpl.n	8007e86 <_svfiprintf_r+0x32>
 8007e68:	690b      	ldr	r3, [r1, #16]
 8007e6a:	b963      	cbnz	r3, 8007e86 <_svfiprintf_r+0x32>
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	f7ff ff3b 	bl	8007ce8 <_malloc_r>
 8007e72:	6028      	str	r0, [r5, #0]
 8007e74:	6128      	str	r0, [r5, #16]
 8007e76:	b920      	cbnz	r0, 8007e82 <_svfiprintf_r+0x2e>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	e0d1      	b.n	8008026 <_svfiprintf_r+0x1d2>
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	616b      	str	r3, [r5, #20]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8a:	2320      	movs	r3, #32
 8007e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e94:	2330      	movs	r3, #48	; 0x30
 8007e96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008040 <_svfiprintf_r+0x1ec>
 8007e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e9e:	f04f 0901 	mov.w	r9, #1
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	469a      	mov	sl, r3
 8007ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eaa:	b10a      	cbz	r2, 8007eb0 <_svfiprintf_r+0x5c>
 8007eac:	2a25      	cmp	r2, #37	; 0x25
 8007eae:	d1f9      	bne.n	8007ea4 <_svfiprintf_r+0x50>
 8007eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8007eb4:	d00b      	beq.n	8007ece <_svfiprintf_r+0x7a>
 8007eb6:	465b      	mov	r3, fp
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff ff6d 	bl	8007d9c <__ssputs_r>
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f000 80aa 	beq.w	800801c <_svfiprintf_r+0x1c8>
 8007ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eca:	445a      	add	r2, fp
 8007ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ece:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80a2 	beq.w	800801c <_svfiprintf_r+0x1c8>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f04f 32ff 	mov.w	r2, #4294967295
 8007ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee2:	f10a 0a01 	add.w	sl, sl, #1
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	9307      	str	r3, [sp, #28]
 8007eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eee:	931a      	str	r3, [sp, #104]	; 0x68
 8007ef0:	4654      	mov	r4, sl
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef8:	4851      	ldr	r0, [pc, #324]	; (8008040 <_svfiprintf_r+0x1ec>)
 8007efa:	f7f8 f971 	bl	80001e0 <memchr>
 8007efe:	9a04      	ldr	r2, [sp, #16]
 8007f00:	b9d8      	cbnz	r0, 8007f3a <_svfiprintf_r+0xe6>
 8007f02:	06d0      	lsls	r0, r2, #27
 8007f04:	bf44      	itt	mi
 8007f06:	2320      	movmi	r3, #32
 8007f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f0c:	0711      	lsls	r1, r2, #28
 8007f0e:	bf44      	itt	mi
 8007f10:	232b      	movmi	r3, #43	; 0x2b
 8007f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f16:	f89a 3000 	ldrb.w	r3, [sl]
 8007f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1c:	d015      	beq.n	8007f4a <_svfiprintf_r+0xf6>
 8007f1e:	9a07      	ldr	r2, [sp, #28]
 8007f20:	4654      	mov	r4, sl
 8007f22:	2000      	movs	r0, #0
 8007f24:	f04f 0c0a 	mov.w	ip, #10
 8007f28:	4621      	mov	r1, r4
 8007f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f2e:	3b30      	subs	r3, #48	; 0x30
 8007f30:	2b09      	cmp	r3, #9
 8007f32:	d94e      	bls.n	8007fd2 <_svfiprintf_r+0x17e>
 8007f34:	b1b0      	cbz	r0, 8007f64 <_svfiprintf_r+0x110>
 8007f36:	9207      	str	r2, [sp, #28]
 8007f38:	e014      	b.n	8007f64 <_svfiprintf_r+0x110>
 8007f3a:	eba0 0308 	sub.w	r3, r0, r8
 8007f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f42:	4313      	orrs	r3, r2
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	46a2      	mov	sl, r4
 8007f48:	e7d2      	b.n	8007ef0 <_svfiprintf_r+0x9c>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	1d19      	adds	r1, r3, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	9103      	str	r1, [sp, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfbb      	ittet	lt
 8007f56:	425b      	neglt	r3, r3
 8007f58:	f042 0202 	orrlt.w	r2, r2, #2
 8007f5c:	9307      	strge	r3, [sp, #28]
 8007f5e:	9307      	strlt	r3, [sp, #28]
 8007f60:	bfb8      	it	lt
 8007f62:	9204      	strlt	r2, [sp, #16]
 8007f64:	7823      	ldrb	r3, [r4, #0]
 8007f66:	2b2e      	cmp	r3, #46	; 0x2e
 8007f68:	d10c      	bne.n	8007f84 <_svfiprintf_r+0x130>
 8007f6a:	7863      	ldrb	r3, [r4, #1]
 8007f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6e:	d135      	bne.n	8007fdc <_svfiprintf_r+0x188>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	1d1a      	adds	r2, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	9203      	str	r2, [sp, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bfb8      	it	lt
 8007f7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f80:	3402      	adds	r4, #2
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008050 <_svfiprintf_r+0x1fc>
 8007f88:	7821      	ldrb	r1, [r4, #0]
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	f7f8 f927 	bl	80001e0 <memchr>
 8007f92:	b140      	cbz	r0, 8007fa6 <_svfiprintf_r+0x152>
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	eba0 000a 	sub.w	r0, r0, sl
 8007f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	4303      	orrs	r3, r0
 8007fa2:	3401      	adds	r4, #1
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	4826      	ldr	r0, [pc, #152]	; (8008044 <_svfiprintf_r+0x1f0>)
 8007fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fb0:	2206      	movs	r2, #6
 8007fb2:	f7f8 f915 	bl	80001e0 <memchr>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d038      	beq.n	800802c <_svfiprintf_r+0x1d8>
 8007fba:	4b23      	ldr	r3, [pc, #140]	; (8008048 <_svfiprintf_r+0x1f4>)
 8007fbc:	bb1b      	cbnz	r3, 8008006 <_svfiprintf_r+0x1b2>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	4433      	add	r3, r6
 8007fce:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd0:	e767      	b.n	8007ea2 <_svfiprintf_r+0x4e>
 8007fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	2001      	movs	r0, #1
 8007fda:	e7a5      	b.n	8007f28 <_svfiprintf_r+0xd4>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	3401      	adds	r4, #1
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f04f 0c0a 	mov.w	ip, #10
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fee:	3a30      	subs	r2, #48	; 0x30
 8007ff0:	2a09      	cmp	r2, #9
 8007ff2:	d903      	bls.n	8007ffc <_svfiprintf_r+0x1a8>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c5      	beq.n	8007f84 <_svfiprintf_r+0x130>
 8007ff8:	9105      	str	r1, [sp, #20]
 8007ffa:	e7c3      	b.n	8007f84 <_svfiprintf_r+0x130>
 8007ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008000:	4604      	mov	r4, r0
 8008002:	2301      	movs	r3, #1
 8008004:	e7f0      	b.n	8007fe8 <_svfiprintf_r+0x194>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <_svfiprintf_r+0x1f8>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	4638      	mov	r0, r7
 8008012:	f7fd fffb 	bl	800600c <_printf_float>
 8008016:	1c42      	adds	r2, r0, #1
 8008018:	4606      	mov	r6, r0
 800801a:	d1d6      	bne.n	8007fca <_svfiprintf_r+0x176>
 800801c:	89ab      	ldrh	r3, [r5, #12]
 800801e:	065b      	lsls	r3, r3, #25
 8008020:	f53f af2c 	bmi.w	8007e7c <_svfiprintf_r+0x28>
 8008024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008026:	b01d      	add	sp, #116	; 0x74
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	462a      	mov	r2, r5
 8008032:	4b06      	ldr	r3, [pc, #24]	; (800804c <_svfiprintf_r+0x1f8>)
 8008034:	a904      	add	r1, sp, #16
 8008036:	4638      	mov	r0, r7
 8008038:	f7fe fa8c 	bl	8006554 <_printf_i>
 800803c:	e7eb      	b.n	8008016 <_svfiprintf_r+0x1c2>
 800803e:	bf00      	nop
 8008040:	08008f1c 	.word	0x08008f1c
 8008044:	08008f26 	.word	0x08008f26
 8008048:	0800600d 	.word	0x0800600d
 800804c:	08007d9d 	.word	0x08007d9d
 8008050:	08008f22 	.word	0x08008f22

08008054 <_sbrk_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d06      	ldr	r5, [pc, #24]	; (8008070 <_sbrk_r+0x1c>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	602b      	str	r3, [r5, #0]
 8008060:	f7fa f8c2 	bl	80021e8 <_sbrk>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_sbrk_r+0x1a>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_sbrk_r+0x1a>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	2000040c 	.word	0x2000040c

08008074 <__assert_func>:
 8008074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008076:	4614      	mov	r4, r2
 8008078:	461a      	mov	r2, r3
 800807a:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <__assert_func+0x2c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4605      	mov	r5, r0
 8008080:	68d8      	ldr	r0, [r3, #12]
 8008082:	b14c      	cbz	r4, 8008098 <__assert_func+0x24>
 8008084:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <__assert_func+0x30>)
 8008086:	9100      	str	r1, [sp, #0]
 8008088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800808c:	4906      	ldr	r1, [pc, #24]	; (80080a8 <__assert_func+0x34>)
 800808e:	462b      	mov	r3, r5
 8008090:	f000 f80e 	bl	80080b0 <fiprintf>
 8008094:	f000 faa4 	bl	80085e0 <abort>
 8008098:	4b04      	ldr	r3, [pc, #16]	; (80080ac <__assert_func+0x38>)
 800809a:	461c      	mov	r4, r3
 800809c:	e7f3      	b.n	8008086 <__assert_func+0x12>
 800809e:	bf00      	nop
 80080a0:	2000000c 	.word	0x2000000c
 80080a4:	08008f2d 	.word	0x08008f2d
 80080a8:	08008f3a 	.word	0x08008f3a
 80080ac:	08008f68 	.word	0x08008f68

080080b0 <fiprintf>:
 80080b0:	b40e      	push	{r1, r2, r3}
 80080b2:	b503      	push	{r0, r1, lr}
 80080b4:	4601      	mov	r1, r0
 80080b6:	ab03      	add	r3, sp, #12
 80080b8:	4805      	ldr	r0, [pc, #20]	; (80080d0 <fiprintf+0x20>)
 80080ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80080be:	6800      	ldr	r0, [r0, #0]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	f000 f88f 	bl	80081e4 <_vfiprintf_r>
 80080c6:	b002      	add	sp, #8
 80080c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080cc:	b003      	add	sp, #12
 80080ce:	4770      	bx	lr
 80080d0:	2000000c 	.word	0x2000000c

080080d4 <__ascii_mbtowc>:
 80080d4:	b082      	sub	sp, #8
 80080d6:	b901      	cbnz	r1, 80080da <__ascii_mbtowc+0x6>
 80080d8:	a901      	add	r1, sp, #4
 80080da:	b142      	cbz	r2, 80080ee <__ascii_mbtowc+0x1a>
 80080dc:	b14b      	cbz	r3, 80080f2 <__ascii_mbtowc+0x1e>
 80080de:	7813      	ldrb	r3, [r2, #0]
 80080e0:	600b      	str	r3, [r1, #0]
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	1e10      	subs	r0, r2, #0
 80080e6:	bf18      	it	ne
 80080e8:	2001      	movne	r0, #1
 80080ea:	b002      	add	sp, #8
 80080ec:	4770      	bx	lr
 80080ee:	4610      	mov	r0, r2
 80080f0:	e7fb      	b.n	80080ea <__ascii_mbtowc+0x16>
 80080f2:	f06f 0001 	mvn.w	r0, #1
 80080f6:	e7f8      	b.n	80080ea <__ascii_mbtowc+0x16>

080080f8 <memmove>:
 80080f8:	4288      	cmp	r0, r1
 80080fa:	b510      	push	{r4, lr}
 80080fc:	eb01 0402 	add.w	r4, r1, r2
 8008100:	d902      	bls.n	8008108 <memmove+0x10>
 8008102:	4284      	cmp	r4, r0
 8008104:	4623      	mov	r3, r4
 8008106:	d807      	bhi.n	8008118 <memmove+0x20>
 8008108:	1e43      	subs	r3, r0, #1
 800810a:	42a1      	cmp	r1, r4
 800810c:	d008      	beq.n	8008120 <memmove+0x28>
 800810e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008116:	e7f8      	b.n	800810a <memmove+0x12>
 8008118:	4402      	add	r2, r0
 800811a:	4601      	mov	r1, r0
 800811c:	428a      	cmp	r2, r1
 800811e:	d100      	bne.n	8008122 <memmove+0x2a>
 8008120:	bd10      	pop	{r4, pc}
 8008122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800812a:	e7f7      	b.n	800811c <memmove+0x24>

0800812c <__malloc_lock>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__malloc_lock+0x8>)
 800812e:	f000 bc17 	b.w	8008960 <__retarget_lock_acquire_recursive>
 8008132:	bf00      	nop
 8008134:	20000414 	.word	0x20000414

08008138 <__malloc_unlock>:
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <__malloc_unlock+0x8>)
 800813a:	f000 bc12 	b.w	8008962 <__retarget_lock_release_recursive>
 800813e:	bf00      	nop
 8008140:	20000414 	.word	0x20000414

08008144 <_realloc_r>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	4607      	mov	r7, r0
 8008148:	4614      	mov	r4, r2
 800814a:	460e      	mov	r6, r1
 800814c:	b921      	cbnz	r1, 8008158 <_realloc_r+0x14>
 800814e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008152:	4611      	mov	r1, r2
 8008154:	f7ff bdc8 	b.w	8007ce8 <_malloc_r>
 8008158:	b922      	cbnz	r2, 8008164 <_realloc_r+0x20>
 800815a:	f7ff fd75 	bl	8007c48 <_free_r>
 800815e:	4625      	mov	r5, r4
 8008160:	4628      	mov	r0, r5
 8008162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008164:	f000 fc62 	bl	8008a2c <_malloc_usable_size_r>
 8008168:	42a0      	cmp	r0, r4
 800816a:	d20f      	bcs.n	800818c <_realloc_r+0x48>
 800816c:	4621      	mov	r1, r4
 800816e:	4638      	mov	r0, r7
 8008170:	f7ff fdba 	bl	8007ce8 <_malloc_r>
 8008174:	4605      	mov	r5, r0
 8008176:	2800      	cmp	r0, #0
 8008178:	d0f2      	beq.n	8008160 <_realloc_r+0x1c>
 800817a:	4631      	mov	r1, r6
 800817c:	4622      	mov	r2, r4
 800817e:	f7ff f9c7 	bl	8007510 <memcpy>
 8008182:	4631      	mov	r1, r6
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff fd5f 	bl	8007c48 <_free_r>
 800818a:	e7e9      	b.n	8008160 <_realloc_r+0x1c>
 800818c:	4635      	mov	r5, r6
 800818e:	e7e7      	b.n	8008160 <_realloc_r+0x1c>

08008190 <__sfputc_r>:
 8008190:	6893      	ldr	r3, [r2, #8]
 8008192:	3b01      	subs	r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	b410      	push	{r4}
 8008198:	6093      	str	r3, [r2, #8]
 800819a:	da08      	bge.n	80081ae <__sfputc_r+0x1e>
 800819c:	6994      	ldr	r4, [r2, #24]
 800819e:	42a3      	cmp	r3, r4
 80081a0:	db01      	blt.n	80081a6 <__sfputc_r+0x16>
 80081a2:	290a      	cmp	r1, #10
 80081a4:	d103      	bne.n	80081ae <__sfputc_r+0x1e>
 80081a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081aa:	f000 b94b 	b.w	8008444 <__swbuf_r>
 80081ae:	6813      	ldr	r3, [r2, #0]
 80081b0:	1c58      	adds	r0, r3, #1
 80081b2:	6010      	str	r0, [r2, #0]
 80081b4:	7019      	strb	r1, [r3, #0]
 80081b6:	4608      	mov	r0, r1
 80081b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081bc:	4770      	bx	lr

080081be <__sfputs_r>:
 80081be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c0:	4606      	mov	r6, r0
 80081c2:	460f      	mov	r7, r1
 80081c4:	4614      	mov	r4, r2
 80081c6:	18d5      	adds	r5, r2, r3
 80081c8:	42ac      	cmp	r4, r5
 80081ca:	d101      	bne.n	80081d0 <__sfputs_r+0x12>
 80081cc:	2000      	movs	r0, #0
 80081ce:	e007      	b.n	80081e0 <__sfputs_r+0x22>
 80081d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d4:	463a      	mov	r2, r7
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff ffda 	bl	8008190 <__sfputc_r>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d1f3      	bne.n	80081c8 <__sfputs_r+0xa>
 80081e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081e4 <_vfiprintf_r>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	460d      	mov	r5, r1
 80081ea:	b09d      	sub	sp, #116	; 0x74
 80081ec:	4614      	mov	r4, r2
 80081ee:	4698      	mov	r8, r3
 80081f0:	4606      	mov	r6, r0
 80081f2:	b118      	cbz	r0, 80081fc <_vfiprintf_r+0x18>
 80081f4:	6983      	ldr	r3, [r0, #24]
 80081f6:	b90b      	cbnz	r3, 80081fc <_vfiprintf_r+0x18>
 80081f8:	f000 fb14 	bl	8008824 <__sinit>
 80081fc:	4b89      	ldr	r3, [pc, #548]	; (8008424 <_vfiprintf_r+0x240>)
 80081fe:	429d      	cmp	r5, r3
 8008200:	d11b      	bne.n	800823a <_vfiprintf_r+0x56>
 8008202:	6875      	ldr	r5, [r6, #4]
 8008204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d405      	bmi.n	8008216 <_vfiprintf_r+0x32>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	059a      	lsls	r2, r3, #22
 800820e:	d402      	bmi.n	8008216 <_vfiprintf_r+0x32>
 8008210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008212:	f000 fba5 	bl	8008960 <__retarget_lock_acquire_recursive>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	071b      	lsls	r3, r3, #28
 800821a:	d501      	bpl.n	8008220 <_vfiprintf_r+0x3c>
 800821c:	692b      	ldr	r3, [r5, #16]
 800821e:	b9eb      	cbnz	r3, 800825c <_vfiprintf_r+0x78>
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f000 f96e 	bl	8008504 <__swsetup_r>
 8008228:	b1c0      	cbz	r0, 800825c <_vfiprintf_r+0x78>
 800822a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800822c:	07dc      	lsls	r4, r3, #31
 800822e:	d50e      	bpl.n	800824e <_vfiprintf_r+0x6a>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	b01d      	add	sp, #116	; 0x74
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	4b7b      	ldr	r3, [pc, #492]	; (8008428 <_vfiprintf_r+0x244>)
 800823c:	429d      	cmp	r5, r3
 800823e:	d101      	bne.n	8008244 <_vfiprintf_r+0x60>
 8008240:	68b5      	ldr	r5, [r6, #8]
 8008242:	e7df      	b.n	8008204 <_vfiprintf_r+0x20>
 8008244:	4b79      	ldr	r3, [pc, #484]	; (800842c <_vfiprintf_r+0x248>)
 8008246:	429d      	cmp	r5, r3
 8008248:	bf08      	it	eq
 800824a:	68f5      	ldreq	r5, [r6, #12]
 800824c:	e7da      	b.n	8008204 <_vfiprintf_r+0x20>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	0598      	lsls	r0, r3, #22
 8008252:	d4ed      	bmi.n	8008230 <_vfiprintf_r+0x4c>
 8008254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008256:	f000 fb84 	bl	8008962 <__retarget_lock_release_recursive>
 800825a:	e7e9      	b.n	8008230 <_vfiprintf_r+0x4c>
 800825c:	2300      	movs	r3, #0
 800825e:	9309      	str	r3, [sp, #36]	; 0x24
 8008260:	2320      	movs	r3, #32
 8008262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008266:	f8cd 800c 	str.w	r8, [sp, #12]
 800826a:	2330      	movs	r3, #48	; 0x30
 800826c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008430 <_vfiprintf_r+0x24c>
 8008270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008274:	f04f 0901 	mov.w	r9, #1
 8008278:	4623      	mov	r3, r4
 800827a:	469a      	mov	sl, r3
 800827c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008280:	b10a      	cbz	r2, 8008286 <_vfiprintf_r+0xa2>
 8008282:	2a25      	cmp	r2, #37	; 0x25
 8008284:	d1f9      	bne.n	800827a <_vfiprintf_r+0x96>
 8008286:	ebba 0b04 	subs.w	fp, sl, r4
 800828a:	d00b      	beq.n	80082a4 <_vfiprintf_r+0xc0>
 800828c:	465b      	mov	r3, fp
 800828e:	4622      	mov	r2, r4
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff ff93 	bl	80081be <__sfputs_r>
 8008298:	3001      	adds	r0, #1
 800829a:	f000 80aa 	beq.w	80083f2 <_vfiprintf_r+0x20e>
 800829e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a0:	445a      	add	r2, fp
 80082a2:	9209      	str	r2, [sp, #36]	; 0x24
 80082a4:	f89a 3000 	ldrb.w	r3, [sl]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80a2 	beq.w	80083f2 <_vfiprintf_r+0x20e>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b8:	f10a 0a01 	add.w	sl, sl, #1
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	9307      	str	r3, [sp, #28]
 80082c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c4:	931a      	str	r3, [sp, #104]	; 0x68
 80082c6:	4654      	mov	r4, sl
 80082c8:	2205      	movs	r2, #5
 80082ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ce:	4858      	ldr	r0, [pc, #352]	; (8008430 <_vfiprintf_r+0x24c>)
 80082d0:	f7f7 ff86 	bl	80001e0 <memchr>
 80082d4:	9a04      	ldr	r2, [sp, #16]
 80082d6:	b9d8      	cbnz	r0, 8008310 <_vfiprintf_r+0x12c>
 80082d8:	06d1      	lsls	r1, r2, #27
 80082da:	bf44      	itt	mi
 80082dc:	2320      	movmi	r3, #32
 80082de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e2:	0713      	lsls	r3, r2, #28
 80082e4:	bf44      	itt	mi
 80082e6:	232b      	movmi	r3, #43	; 0x2b
 80082e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ec:	f89a 3000 	ldrb.w	r3, [sl]
 80082f0:	2b2a      	cmp	r3, #42	; 0x2a
 80082f2:	d015      	beq.n	8008320 <_vfiprintf_r+0x13c>
 80082f4:	9a07      	ldr	r2, [sp, #28]
 80082f6:	4654      	mov	r4, sl
 80082f8:	2000      	movs	r0, #0
 80082fa:	f04f 0c0a 	mov.w	ip, #10
 80082fe:	4621      	mov	r1, r4
 8008300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008304:	3b30      	subs	r3, #48	; 0x30
 8008306:	2b09      	cmp	r3, #9
 8008308:	d94e      	bls.n	80083a8 <_vfiprintf_r+0x1c4>
 800830a:	b1b0      	cbz	r0, 800833a <_vfiprintf_r+0x156>
 800830c:	9207      	str	r2, [sp, #28]
 800830e:	e014      	b.n	800833a <_vfiprintf_r+0x156>
 8008310:	eba0 0308 	sub.w	r3, r0, r8
 8008314:	fa09 f303 	lsl.w	r3, r9, r3
 8008318:	4313      	orrs	r3, r2
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	46a2      	mov	sl, r4
 800831e:	e7d2      	b.n	80082c6 <_vfiprintf_r+0xe2>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	1d19      	adds	r1, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	9103      	str	r1, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	bfbb      	ittet	lt
 800832c:	425b      	neglt	r3, r3
 800832e:	f042 0202 	orrlt.w	r2, r2, #2
 8008332:	9307      	strge	r3, [sp, #28]
 8008334:	9307      	strlt	r3, [sp, #28]
 8008336:	bfb8      	it	lt
 8008338:	9204      	strlt	r2, [sp, #16]
 800833a:	7823      	ldrb	r3, [r4, #0]
 800833c:	2b2e      	cmp	r3, #46	; 0x2e
 800833e:	d10c      	bne.n	800835a <_vfiprintf_r+0x176>
 8008340:	7863      	ldrb	r3, [r4, #1]
 8008342:	2b2a      	cmp	r3, #42	; 0x2a
 8008344:	d135      	bne.n	80083b2 <_vfiprintf_r+0x1ce>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	9203      	str	r2, [sp, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfb8      	it	lt
 8008352:	f04f 33ff 	movlt.w	r3, #4294967295
 8008356:	3402      	adds	r4, #2
 8008358:	9305      	str	r3, [sp, #20]
 800835a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008440 <_vfiprintf_r+0x25c>
 800835e:	7821      	ldrb	r1, [r4, #0]
 8008360:	2203      	movs	r2, #3
 8008362:	4650      	mov	r0, sl
 8008364:	f7f7 ff3c 	bl	80001e0 <memchr>
 8008368:	b140      	cbz	r0, 800837c <_vfiprintf_r+0x198>
 800836a:	2340      	movs	r3, #64	; 0x40
 800836c:	eba0 000a 	sub.w	r0, r0, sl
 8008370:	fa03 f000 	lsl.w	r0, r3, r0
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	4303      	orrs	r3, r0
 8008378:	3401      	adds	r4, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008380:	482c      	ldr	r0, [pc, #176]	; (8008434 <_vfiprintf_r+0x250>)
 8008382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008386:	2206      	movs	r2, #6
 8008388:	f7f7 ff2a 	bl	80001e0 <memchr>
 800838c:	2800      	cmp	r0, #0
 800838e:	d03f      	beq.n	8008410 <_vfiprintf_r+0x22c>
 8008390:	4b29      	ldr	r3, [pc, #164]	; (8008438 <_vfiprintf_r+0x254>)
 8008392:	bb1b      	cbnz	r3, 80083dc <_vfiprintf_r+0x1f8>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	3307      	adds	r3, #7
 8008398:	f023 0307 	bic.w	r3, r3, #7
 800839c:	3308      	adds	r3, #8
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a2:	443b      	add	r3, r7
 80083a4:	9309      	str	r3, [sp, #36]	; 0x24
 80083a6:	e767      	b.n	8008278 <_vfiprintf_r+0x94>
 80083a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ac:	460c      	mov	r4, r1
 80083ae:	2001      	movs	r0, #1
 80083b0:	e7a5      	b.n	80082fe <_vfiprintf_r+0x11a>
 80083b2:	2300      	movs	r3, #0
 80083b4:	3401      	adds	r4, #1
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	4619      	mov	r1, r3
 80083ba:	f04f 0c0a 	mov.w	ip, #10
 80083be:	4620      	mov	r0, r4
 80083c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c4:	3a30      	subs	r2, #48	; 0x30
 80083c6:	2a09      	cmp	r2, #9
 80083c8:	d903      	bls.n	80083d2 <_vfiprintf_r+0x1ee>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0c5      	beq.n	800835a <_vfiprintf_r+0x176>
 80083ce:	9105      	str	r1, [sp, #20]
 80083d0:	e7c3      	b.n	800835a <_vfiprintf_r+0x176>
 80083d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d6:	4604      	mov	r4, r0
 80083d8:	2301      	movs	r3, #1
 80083da:	e7f0      	b.n	80083be <_vfiprintf_r+0x1da>
 80083dc:	ab03      	add	r3, sp, #12
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <_vfiprintf_r+0x258>)
 80083e4:	a904      	add	r1, sp, #16
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7fd fe10 	bl	800600c <_printf_float>
 80083ec:	4607      	mov	r7, r0
 80083ee:	1c78      	adds	r0, r7, #1
 80083f0:	d1d6      	bne.n	80083a0 <_vfiprintf_r+0x1bc>
 80083f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083f4:	07d9      	lsls	r1, r3, #31
 80083f6:	d405      	bmi.n	8008404 <_vfiprintf_r+0x220>
 80083f8:	89ab      	ldrh	r3, [r5, #12]
 80083fa:	059a      	lsls	r2, r3, #22
 80083fc:	d402      	bmi.n	8008404 <_vfiprintf_r+0x220>
 80083fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008400:	f000 faaf 	bl	8008962 <__retarget_lock_release_recursive>
 8008404:	89ab      	ldrh	r3, [r5, #12]
 8008406:	065b      	lsls	r3, r3, #25
 8008408:	f53f af12 	bmi.w	8008230 <_vfiprintf_r+0x4c>
 800840c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800840e:	e711      	b.n	8008234 <_vfiprintf_r+0x50>
 8008410:	ab03      	add	r3, sp, #12
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	462a      	mov	r2, r5
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <_vfiprintf_r+0x258>)
 8008418:	a904      	add	r1, sp, #16
 800841a:	4630      	mov	r0, r6
 800841c:	f7fe f89a 	bl	8006554 <_printf_i>
 8008420:	e7e4      	b.n	80083ec <_vfiprintf_r+0x208>
 8008422:	bf00      	nop
 8008424:	08009094 	.word	0x08009094
 8008428:	080090b4 	.word	0x080090b4
 800842c:	08009074 	.word	0x08009074
 8008430:	08008f1c 	.word	0x08008f1c
 8008434:	08008f26 	.word	0x08008f26
 8008438:	0800600d 	.word	0x0800600d
 800843c:	080081bf 	.word	0x080081bf
 8008440:	08008f22 	.word	0x08008f22

08008444 <__swbuf_r>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	460e      	mov	r6, r1
 8008448:	4614      	mov	r4, r2
 800844a:	4605      	mov	r5, r0
 800844c:	b118      	cbz	r0, 8008456 <__swbuf_r+0x12>
 800844e:	6983      	ldr	r3, [r0, #24]
 8008450:	b90b      	cbnz	r3, 8008456 <__swbuf_r+0x12>
 8008452:	f000 f9e7 	bl	8008824 <__sinit>
 8008456:	4b21      	ldr	r3, [pc, #132]	; (80084dc <__swbuf_r+0x98>)
 8008458:	429c      	cmp	r4, r3
 800845a:	d12b      	bne.n	80084b4 <__swbuf_r+0x70>
 800845c:	686c      	ldr	r4, [r5, #4]
 800845e:	69a3      	ldr	r3, [r4, #24]
 8008460:	60a3      	str	r3, [r4, #8]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	071a      	lsls	r2, r3, #28
 8008466:	d52f      	bpl.n	80084c8 <__swbuf_r+0x84>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	b36b      	cbz	r3, 80084c8 <__swbuf_r+0x84>
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	6820      	ldr	r0, [r4, #0]
 8008470:	1ac0      	subs	r0, r0, r3
 8008472:	6963      	ldr	r3, [r4, #20]
 8008474:	b2f6      	uxtb	r6, r6
 8008476:	4283      	cmp	r3, r0
 8008478:	4637      	mov	r7, r6
 800847a:	dc04      	bgt.n	8008486 <__swbuf_r+0x42>
 800847c:	4621      	mov	r1, r4
 800847e:	4628      	mov	r0, r5
 8008480:	f000 f93c 	bl	80086fc <_fflush_r>
 8008484:	bb30      	cbnz	r0, 80084d4 <__swbuf_r+0x90>
 8008486:	68a3      	ldr	r3, [r4, #8]
 8008488:	3b01      	subs	r3, #1
 800848a:	60a3      	str	r3, [r4, #8]
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	6022      	str	r2, [r4, #0]
 8008492:	701e      	strb	r6, [r3, #0]
 8008494:	6963      	ldr	r3, [r4, #20]
 8008496:	3001      	adds	r0, #1
 8008498:	4283      	cmp	r3, r0
 800849a:	d004      	beq.n	80084a6 <__swbuf_r+0x62>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	07db      	lsls	r3, r3, #31
 80084a0:	d506      	bpl.n	80084b0 <__swbuf_r+0x6c>
 80084a2:	2e0a      	cmp	r6, #10
 80084a4:	d104      	bne.n	80084b0 <__swbuf_r+0x6c>
 80084a6:	4621      	mov	r1, r4
 80084a8:	4628      	mov	r0, r5
 80084aa:	f000 f927 	bl	80086fc <_fflush_r>
 80084ae:	b988      	cbnz	r0, 80084d4 <__swbuf_r+0x90>
 80084b0:	4638      	mov	r0, r7
 80084b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b4:	4b0a      	ldr	r3, [pc, #40]	; (80084e0 <__swbuf_r+0x9c>)
 80084b6:	429c      	cmp	r4, r3
 80084b8:	d101      	bne.n	80084be <__swbuf_r+0x7a>
 80084ba:	68ac      	ldr	r4, [r5, #8]
 80084bc:	e7cf      	b.n	800845e <__swbuf_r+0x1a>
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <__swbuf_r+0xa0>)
 80084c0:	429c      	cmp	r4, r3
 80084c2:	bf08      	it	eq
 80084c4:	68ec      	ldreq	r4, [r5, #12]
 80084c6:	e7ca      	b.n	800845e <__swbuf_r+0x1a>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f81a 	bl	8008504 <__swsetup_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d0cb      	beq.n	800846c <__swbuf_r+0x28>
 80084d4:	f04f 37ff 	mov.w	r7, #4294967295
 80084d8:	e7ea      	b.n	80084b0 <__swbuf_r+0x6c>
 80084da:	bf00      	nop
 80084dc:	08009094 	.word	0x08009094
 80084e0:	080090b4 	.word	0x080090b4
 80084e4:	08009074 	.word	0x08009074

080084e8 <__ascii_wctomb>:
 80084e8:	b149      	cbz	r1, 80084fe <__ascii_wctomb+0x16>
 80084ea:	2aff      	cmp	r2, #255	; 0xff
 80084ec:	bf85      	ittet	hi
 80084ee:	238a      	movhi	r3, #138	; 0x8a
 80084f0:	6003      	strhi	r3, [r0, #0]
 80084f2:	700a      	strbls	r2, [r1, #0]
 80084f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80084f8:	bf98      	it	ls
 80084fa:	2001      	movls	r0, #1
 80084fc:	4770      	bx	lr
 80084fe:	4608      	mov	r0, r1
 8008500:	4770      	bx	lr
	...

08008504 <__swsetup_r>:
 8008504:	4b32      	ldr	r3, [pc, #200]	; (80085d0 <__swsetup_r+0xcc>)
 8008506:	b570      	push	{r4, r5, r6, lr}
 8008508:	681d      	ldr	r5, [r3, #0]
 800850a:	4606      	mov	r6, r0
 800850c:	460c      	mov	r4, r1
 800850e:	b125      	cbz	r5, 800851a <__swsetup_r+0x16>
 8008510:	69ab      	ldr	r3, [r5, #24]
 8008512:	b913      	cbnz	r3, 800851a <__swsetup_r+0x16>
 8008514:	4628      	mov	r0, r5
 8008516:	f000 f985 	bl	8008824 <__sinit>
 800851a:	4b2e      	ldr	r3, [pc, #184]	; (80085d4 <__swsetup_r+0xd0>)
 800851c:	429c      	cmp	r4, r3
 800851e:	d10f      	bne.n	8008540 <__swsetup_r+0x3c>
 8008520:	686c      	ldr	r4, [r5, #4]
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008528:	0719      	lsls	r1, r3, #28
 800852a:	d42c      	bmi.n	8008586 <__swsetup_r+0x82>
 800852c:	06dd      	lsls	r5, r3, #27
 800852e:	d411      	bmi.n	8008554 <__swsetup_r+0x50>
 8008530:	2309      	movs	r3, #9
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	e03e      	b.n	80085be <__swsetup_r+0xba>
 8008540:	4b25      	ldr	r3, [pc, #148]	; (80085d8 <__swsetup_r+0xd4>)
 8008542:	429c      	cmp	r4, r3
 8008544:	d101      	bne.n	800854a <__swsetup_r+0x46>
 8008546:	68ac      	ldr	r4, [r5, #8]
 8008548:	e7eb      	b.n	8008522 <__swsetup_r+0x1e>
 800854a:	4b24      	ldr	r3, [pc, #144]	; (80085dc <__swsetup_r+0xd8>)
 800854c:	429c      	cmp	r4, r3
 800854e:	bf08      	it	eq
 8008550:	68ec      	ldreq	r4, [r5, #12]
 8008552:	e7e6      	b.n	8008522 <__swsetup_r+0x1e>
 8008554:	0758      	lsls	r0, r3, #29
 8008556:	d512      	bpl.n	800857e <__swsetup_r+0x7a>
 8008558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800855a:	b141      	cbz	r1, 800856e <__swsetup_r+0x6a>
 800855c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008560:	4299      	cmp	r1, r3
 8008562:	d002      	beq.n	800856a <__swsetup_r+0x66>
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff fb6f 	bl	8007c48 <_free_r>
 800856a:	2300      	movs	r3, #0
 800856c:	6363      	str	r3, [r4, #52]	; 0x34
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	2300      	movs	r3, #0
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f043 0308 	orr.w	r3, r3, #8
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	b94b      	cbnz	r3, 800859e <__swsetup_r+0x9a>
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008594:	d003      	beq.n	800859e <__swsetup_r+0x9a>
 8008596:	4621      	mov	r1, r4
 8008598:	4630      	mov	r0, r6
 800859a:	f000 fa07 	bl	80089ac <__smakebuf_r>
 800859e:	89a0      	ldrh	r0, [r4, #12]
 80085a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085a4:	f010 0301 	ands.w	r3, r0, #1
 80085a8:	d00a      	beq.n	80085c0 <__swsetup_r+0xbc>
 80085aa:	2300      	movs	r3, #0
 80085ac:	60a3      	str	r3, [r4, #8]
 80085ae:	6963      	ldr	r3, [r4, #20]
 80085b0:	425b      	negs	r3, r3
 80085b2:	61a3      	str	r3, [r4, #24]
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	b943      	cbnz	r3, 80085ca <__swsetup_r+0xc6>
 80085b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085bc:	d1ba      	bne.n	8008534 <__swsetup_r+0x30>
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	0781      	lsls	r1, r0, #30
 80085c2:	bf58      	it	pl
 80085c4:	6963      	ldrpl	r3, [r4, #20]
 80085c6:	60a3      	str	r3, [r4, #8]
 80085c8:	e7f4      	b.n	80085b4 <__swsetup_r+0xb0>
 80085ca:	2000      	movs	r0, #0
 80085cc:	e7f7      	b.n	80085be <__swsetup_r+0xba>
 80085ce:	bf00      	nop
 80085d0:	2000000c 	.word	0x2000000c
 80085d4:	08009094 	.word	0x08009094
 80085d8:	080090b4 	.word	0x080090b4
 80085dc:	08009074 	.word	0x08009074

080085e0 <abort>:
 80085e0:	b508      	push	{r3, lr}
 80085e2:	2006      	movs	r0, #6
 80085e4:	f000 fa52 	bl	8008a8c <raise>
 80085e8:	2001      	movs	r0, #1
 80085ea:	f7f9 fd85 	bl	80020f8 <_exit>
	...

080085f0 <__sflush_r>:
 80085f0:	898a      	ldrh	r2, [r1, #12]
 80085f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	4605      	mov	r5, r0
 80085f8:	0710      	lsls	r0, r2, #28
 80085fa:	460c      	mov	r4, r1
 80085fc:	d458      	bmi.n	80086b0 <__sflush_r+0xc0>
 80085fe:	684b      	ldr	r3, [r1, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	dc05      	bgt.n	8008610 <__sflush_r+0x20>
 8008604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	dc02      	bgt.n	8008610 <__sflush_r+0x20>
 800860a:	2000      	movs	r0, #0
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008612:	2e00      	cmp	r6, #0
 8008614:	d0f9      	beq.n	800860a <__sflush_r+0x1a>
 8008616:	2300      	movs	r3, #0
 8008618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800861c:	682f      	ldr	r7, [r5, #0]
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	d032      	beq.n	8008688 <__sflush_r+0x98>
 8008622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	075a      	lsls	r2, r3, #29
 8008628:	d505      	bpl.n	8008636 <__sflush_r+0x46>
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	1ac0      	subs	r0, r0, r3
 800862e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008630:	b10b      	cbz	r3, 8008636 <__sflush_r+0x46>
 8008632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008634:	1ac0      	subs	r0, r0, r3
 8008636:	2300      	movs	r3, #0
 8008638:	4602      	mov	r2, r0
 800863a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800863c:	6a21      	ldr	r1, [r4, #32]
 800863e:	4628      	mov	r0, r5
 8008640:	47b0      	blx	r6
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	d106      	bne.n	8008656 <__sflush_r+0x66>
 8008648:	6829      	ldr	r1, [r5, #0]
 800864a:	291d      	cmp	r1, #29
 800864c:	d82c      	bhi.n	80086a8 <__sflush_r+0xb8>
 800864e:	4a2a      	ldr	r2, [pc, #168]	; (80086f8 <__sflush_r+0x108>)
 8008650:	40ca      	lsrs	r2, r1
 8008652:	07d6      	lsls	r6, r2, #31
 8008654:	d528      	bpl.n	80086a8 <__sflush_r+0xb8>
 8008656:	2200      	movs	r2, #0
 8008658:	6062      	str	r2, [r4, #4]
 800865a:	04d9      	lsls	r1, r3, #19
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	d504      	bpl.n	800866c <__sflush_r+0x7c>
 8008662:	1c42      	adds	r2, r0, #1
 8008664:	d101      	bne.n	800866a <__sflush_r+0x7a>
 8008666:	682b      	ldr	r3, [r5, #0]
 8008668:	b903      	cbnz	r3, 800866c <__sflush_r+0x7c>
 800866a:	6560      	str	r0, [r4, #84]	; 0x54
 800866c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800866e:	602f      	str	r7, [r5, #0]
 8008670:	2900      	cmp	r1, #0
 8008672:	d0ca      	beq.n	800860a <__sflush_r+0x1a>
 8008674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008678:	4299      	cmp	r1, r3
 800867a:	d002      	beq.n	8008682 <__sflush_r+0x92>
 800867c:	4628      	mov	r0, r5
 800867e:	f7ff fae3 	bl	8007c48 <_free_r>
 8008682:	2000      	movs	r0, #0
 8008684:	6360      	str	r0, [r4, #52]	; 0x34
 8008686:	e7c1      	b.n	800860c <__sflush_r+0x1c>
 8008688:	6a21      	ldr	r1, [r4, #32]
 800868a:	2301      	movs	r3, #1
 800868c:	4628      	mov	r0, r5
 800868e:	47b0      	blx	r6
 8008690:	1c41      	adds	r1, r0, #1
 8008692:	d1c7      	bne.n	8008624 <__sflush_r+0x34>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0c4      	beq.n	8008624 <__sflush_r+0x34>
 800869a:	2b1d      	cmp	r3, #29
 800869c:	d001      	beq.n	80086a2 <__sflush_r+0xb2>
 800869e:	2b16      	cmp	r3, #22
 80086a0:	d101      	bne.n	80086a6 <__sflush_r+0xb6>
 80086a2:	602f      	str	r7, [r5, #0]
 80086a4:	e7b1      	b.n	800860a <__sflush_r+0x1a>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	e7ad      	b.n	800860c <__sflush_r+0x1c>
 80086b0:	690f      	ldr	r7, [r1, #16]
 80086b2:	2f00      	cmp	r7, #0
 80086b4:	d0a9      	beq.n	800860a <__sflush_r+0x1a>
 80086b6:	0793      	lsls	r3, r2, #30
 80086b8:	680e      	ldr	r6, [r1, #0]
 80086ba:	bf08      	it	eq
 80086bc:	694b      	ldreq	r3, [r1, #20]
 80086be:	600f      	str	r7, [r1, #0]
 80086c0:	bf18      	it	ne
 80086c2:	2300      	movne	r3, #0
 80086c4:	eba6 0807 	sub.w	r8, r6, r7
 80086c8:	608b      	str	r3, [r1, #8]
 80086ca:	f1b8 0f00 	cmp.w	r8, #0
 80086ce:	dd9c      	ble.n	800860a <__sflush_r+0x1a>
 80086d0:	6a21      	ldr	r1, [r4, #32]
 80086d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086d4:	4643      	mov	r3, r8
 80086d6:	463a      	mov	r2, r7
 80086d8:	4628      	mov	r0, r5
 80086da:	47b0      	blx	r6
 80086dc:	2800      	cmp	r0, #0
 80086de:	dc06      	bgt.n	80086ee <__sflush_r+0xfe>
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	e78e      	b.n	800860c <__sflush_r+0x1c>
 80086ee:	4407      	add	r7, r0
 80086f0:	eba8 0800 	sub.w	r8, r8, r0
 80086f4:	e7e9      	b.n	80086ca <__sflush_r+0xda>
 80086f6:	bf00      	nop
 80086f8:	20400001 	.word	0x20400001

080086fc <_fflush_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	690b      	ldr	r3, [r1, #16]
 8008700:	4605      	mov	r5, r0
 8008702:	460c      	mov	r4, r1
 8008704:	b913      	cbnz	r3, 800870c <_fflush_r+0x10>
 8008706:	2500      	movs	r5, #0
 8008708:	4628      	mov	r0, r5
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	b118      	cbz	r0, 8008716 <_fflush_r+0x1a>
 800870e:	6983      	ldr	r3, [r0, #24]
 8008710:	b90b      	cbnz	r3, 8008716 <_fflush_r+0x1a>
 8008712:	f000 f887 	bl	8008824 <__sinit>
 8008716:	4b14      	ldr	r3, [pc, #80]	; (8008768 <_fflush_r+0x6c>)
 8008718:	429c      	cmp	r4, r3
 800871a:	d11b      	bne.n	8008754 <_fflush_r+0x58>
 800871c:	686c      	ldr	r4, [r5, #4]
 800871e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0ef      	beq.n	8008706 <_fflush_r+0xa>
 8008726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008728:	07d0      	lsls	r0, r2, #31
 800872a:	d404      	bmi.n	8008736 <_fflush_r+0x3a>
 800872c:	0599      	lsls	r1, r3, #22
 800872e:	d402      	bmi.n	8008736 <_fflush_r+0x3a>
 8008730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008732:	f000 f915 	bl	8008960 <__retarget_lock_acquire_recursive>
 8008736:	4628      	mov	r0, r5
 8008738:	4621      	mov	r1, r4
 800873a:	f7ff ff59 	bl	80085f0 <__sflush_r>
 800873e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008740:	07da      	lsls	r2, r3, #31
 8008742:	4605      	mov	r5, r0
 8008744:	d4e0      	bmi.n	8008708 <_fflush_r+0xc>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	059b      	lsls	r3, r3, #22
 800874a:	d4dd      	bmi.n	8008708 <_fflush_r+0xc>
 800874c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874e:	f000 f908 	bl	8008962 <__retarget_lock_release_recursive>
 8008752:	e7d9      	b.n	8008708 <_fflush_r+0xc>
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <_fflush_r+0x70>)
 8008756:	429c      	cmp	r4, r3
 8008758:	d101      	bne.n	800875e <_fflush_r+0x62>
 800875a:	68ac      	ldr	r4, [r5, #8]
 800875c:	e7df      	b.n	800871e <_fflush_r+0x22>
 800875e:	4b04      	ldr	r3, [pc, #16]	; (8008770 <_fflush_r+0x74>)
 8008760:	429c      	cmp	r4, r3
 8008762:	bf08      	it	eq
 8008764:	68ec      	ldreq	r4, [r5, #12]
 8008766:	e7da      	b.n	800871e <_fflush_r+0x22>
 8008768:	08009094 	.word	0x08009094
 800876c:	080090b4 	.word	0x080090b4
 8008770:	08009074 	.word	0x08009074

08008774 <std>:
 8008774:	2300      	movs	r3, #0
 8008776:	b510      	push	{r4, lr}
 8008778:	4604      	mov	r4, r0
 800877a:	e9c0 3300 	strd	r3, r3, [r0]
 800877e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008782:	6083      	str	r3, [r0, #8]
 8008784:	8181      	strh	r1, [r0, #12]
 8008786:	6643      	str	r3, [r0, #100]	; 0x64
 8008788:	81c2      	strh	r2, [r0, #14]
 800878a:	6183      	str	r3, [r0, #24]
 800878c:	4619      	mov	r1, r3
 800878e:	2208      	movs	r2, #8
 8008790:	305c      	adds	r0, #92	; 0x5c
 8008792:	f7fd fb93 	bl	8005ebc <memset>
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <std+0x38>)
 8008798:	6263      	str	r3, [r4, #36]	; 0x24
 800879a:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <std+0x3c>)
 800879c:	62a3      	str	r3, [r4, #40]	; 0x28
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <std+0x40>)
 80087a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087a2:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <std+0x44>)
 80087a4:	6224      	str	r4, [r4, #32]
 80087a6:	6323      	str	r3, [r4, #48]	; 0x30
 80087a8:	bd10      	pop	{r4, pc}
 80087aa:	bf00      	nop
 80087ac:	08008ac5 	.word	0x08008ac5
 80087b0:	08008ae7 	.word	0x08008ae7
 80087b4:	08008b1f 	.word	0x08008b1f
 80087b8:	08008b43 	.word	0x08008b43

080087bc <_cleanup_r>:
 80087bc:	4901      	ldr	r1, [pc, #4]	; (80087c4 <_cleanup_r+0x8>)
 80087be:	f000 b8af 	b.w	8008920 <_fwalk_reent>
 80087c2:	bf00      	nop
 80087c4:	080086fd 	.word	0x080086fd

080087c8 <__sfmoreglue>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	1e4a      	subs	r2, r1, #1
 80087cc:	2568      	movs	r5, #104	; 0x68
 80087ce:	4355      	muls	r5, r2
 80087d0:	460e      	mov	r6, r1
 80087d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087d6:	f7ff fa87 	bl	8007ce8 <_malloc_r>
 80087da:	4604      	mov	r4, r0
 80087dc:	b140      	cbz	r0, 80087f0 <__sfmoreglue+0x28>
 80087de:	2100      	movs	r1, #0
 80087e0:	e9c0 1600 	strd	r1, r6, [r0]
 80087e4:	300c      	adds	r0, #12
 80087e6:	60a0      	str	r0, [r4, #8]
 80087e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087ec:	f7fd fb66 	bl	8005ebc <memset>
 80087f0:	4620      	mov	r0, r4
 80087f2:	bd70      	pop	{r4, r5, r6, pc}

080087f4 <__sfp_lock_acquire>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__sfp_lock_acquire+0x8>)
 80087f6:	f000 b8b3 	b.w	8008960 <__retarget_lock_acquire_recursive>
 80087fa:	bf00      	nop
 80087fc:	20000418 	.word	0x20000418

08008800 <__sfp_lock_release>:
 8008800:	4801      	ldr	r0, [pc, #4]	; (8008808 <__sfp_lock_release+0x8>)
 8008802:	f000 b8ae 	b.w	8008962 <__retarget_lock_release_recursive>
 8008806:	bf00      	nop
 8008808:	20000418 	.word	0x20000418

0800880c <__sinit_lock_acquire>:
 800880c:	4801      	ldr	r0, [pc, #4]	; (8008814 <__sinit_lock_acquire+0x8>)
 800880e:	f000 b8a7 	b.w	8008960 <__retarget_lock_acquire_recursive>
 8008812:	bf00      	nop
 8008814:	20000413 	.word	0x20000413

08008818 <__sinit_lock_release>:
 8008818:	4801      	ldr	r0, [pc, #4]	; (8008820 <__sinit_lock_release+0x8>)
 800881a:	f000 b8a2 	b.w	8008962 <__retarget_lock_release_recursive>
 800881e:	bf00      	nop
 8008820:	20000413 	.word	0x20000413

08008824 <__sinit>:
 8008824:	b510      	push	{r4, lr}
 8008826:	4604      	mov	r4, r0
 8008828:	f7ff fff0 	bl	800880c <__sinit_lock_acquire>
 800882c:	69a3      	ldr	r3, [r4, #24]
 800882e:	b11b      	cbz	r3, 8008838 <__sinit+0x14>
 8008830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008834:	f7ff bff0 	b.w	8008818 <__sinit_lock_release>
 8008838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800883c:	6523      	str	r3, [r4, #80]	; 0x50
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <__sinit+0x68>)
 8008840:	4a13      	ldr	r2, [pc, #76]	; (8008890 <__sinit+0x6c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	62a2      	str	r2, [r4, #40]	; 0x28
 8008846:	42a3      	cmp	r3, r4
 8008848:	bf04      	itt	eq
 800884a:	2301      	moveq	r3, #1
 800884c:	61a3      	streq	r3, [r4, #24]
 800884e:	4620      	mov	r0, r4
 8008850:	f000 f820 	bl	8008894 <__sfp>
 8008854:	6060      	str	r0, [r4, #4]
 8008856:	4620      	mov	r0, r4
 8008858:	f000 f81c 	bl	8008894 <__sfp>
 800885c:	60a0      	str	r0, [r4, #8]
 800885e:	4620      	mov	r0, r4
 8008860:	f000 f818 	bl	8008894 <__sfp>
 8008864:	2200      	movs	r2, #0
 8008866:	60e0      	str	r0, [r4, #12]
 8008868:	2104      	movs	r1, #4
 800886a:	6860      	ldr	r0, [r4, #4]
 800886c:	f7ff ff82 	bl	8008774 <std>
 8008870:	68a0      	ldr	r0, [r4, #8]
 8008872:	2201      	movs	r2, #1
 8008874:	2109      	movs	r1, #9
 8008876:	f7ff ff7d 	bl	8008774 <std>
 800887a:	68e0      	ldr	r0, [r4, #12]
 800887c:	2202      	movs	r2, #2
 800887e:	2112      	movs	r1, #18
 8008880:	f7ff ff78 	bl	8008774 <std>
 8008884:	2301      	movs	r3, #1
 8008886:	61a3      	str	r3, [r4, #24]
 8008888:	e7d2      	b.n	8008830 <__sinit+0xc>
 800888a:	bf00      	nop
 800888c:	08008cf4 	.word	0x08008cf4
 8008890:	080087bd 	.word	0x080087bd

08008894 <__sfp>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	4607      	mov	r7, r0
 8008898:	f7ff ffac 	bl	80087f4 <__sfp_lock_acquire>
 800889c:	4b1e      	ldr	r3, [pc, #120]	; (8008918 <__sfp+0x84>)
 800889e:	681e      	ldr	r6, [r3, #0]
 80088a0:	69b3      	ldr	r3, [r6, #24]
 80088a2:	b913      	cbnz	r3, 80088aa <__sfp+0x16>
 80088a4:	4630      	mov	r0, r6
 80088a6:	f7ff ffbd 	bl	8008824 <__sinit>
 80088aa:	3648      	adds	r6, #72	; 0x48
 80088ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	d503      	bpl.n	80088bc <__sfp+0x28>
 80088b4:	6833      	ldr	r3, [r6, #0]
 80088b6:	b30b      	cbz	r3, 80088fc <__sfp+0x68>
 80088b8:	6836      	ldr	r6, [r6, #0]
 80088ba:	e7f7      	b.n	80088ac <__sfp+0x18>
 80088bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088c0:	b9d5      	cbnz	r5, 80088f8 <__sfp+0x64>
 80088c2:	4b16      	ldr	r3, [pc, #88]	; (800891c <__sfp+0x88>)
 80088c4:	60e3      	str	r3, [r4, #12]
 80088c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088ca:	6665      	str	r5, [r4, #100]	; 0x64
 80088cc:	f000 f847 	bl	800895e <__retarget_lock_init_recursive>
 80088d0:	f7ff ff96 	bl	8008800 <__sfp_lock_release>
 80088d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088dc:	6025      	str	r5, [r4, #0]
 80088de:	61a5      	str	r5, [r4, #24]
 80088e0:	2208      	movs	r2, #8
 80088e2:	4629      	mov	r1, r5
 80088e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088e8:	f7fd fae8 	bl	8005ebc <memset>
 80088ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088f4:	4620      	mov	r0, r4
 80088f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f8:	3468      	adds	r4, #104	; 0x68
 80088fa:	e7d9      	b.n	80088b0 <__sfp+0x1c>
 80088fc:	2104      	movs	r1, #4
 80088fe:	4638      	mov	r0, r7
 8008900:	f7ff ff62 	bl	80087c8 <__sfmoreglue>
 8008904:	4604      	mov	r4, r0
 8008906:	6030      	str	r0, [r6, #0]
 8008908:	2800      	cmp	r0, #0
 800890a:	d1d5      	bne.n	80088b8 <__sfp+0x24>
 800890c:	f7ff ff78 	bl	8008800 <__sfp_lock_release>
 8008910:	230c      	movs	r3, #12
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	e7ee      	b.n	80088f4 <__sfp+0x60>
 8008916:	bf00      	nop
 8008918:	08008cf4 	.word	0x08008cf4
 800891c:	ffff0001 	.word	0xffff0001

08008920 <_fwalk_reent>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	4606      	mov	r6, r0
 8008926:	4688      	mov	r8, r1
 8008928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800892c:	2700      	movs	r7, #0
 800892e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008932:	f1b9 0901 	subs.w	r9, r9, #1
 8008936:	d505      	bpl.n	8008944 <_fwalk_reent+0x24>
 8008938:	6824      	ldr	r4, [r4, #0]
 800893a:	2c00      	cmp	r4, #0
 800893c:	d1f7      	bne.n	800892e <_fwalk_reent+0xe>
 800893e:	4638      	mov	r0, r7
 8008940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008944:	89ab      	ldrh	r3, [r5, #12]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d907      	bls.n	800895a <_fwalk_reent+0x3a>
 800894a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800894e:	3301      	adds	r3, #1
 8008950:	d003      	beq.n	800895a <_fwalk_reent+0x3a>
 8008952:	4629      	mov	r1, r5
 8008954:	4630      	mov	r0, r6
 8008956:	47c0      	blx	r8
 8008958:	4307      	orrs	r7, r0
 800895a:	3568      	adds	r5, #104	; 0x68
 800895c:	e7e9      	b.n	8008932 <_fwalk_reent+0x12>

0800895e <__retarget_lock_init_recursive>:
 800895e:	4770      	bx	lr

08008960 <__retarget_lock_acquire_recursive>:
 8008960:	4770      	bx	lr

08008962 <__retarget_lock_release_recursive>:
 8008962:	4770      	bx	lr

08008964 <__swhatbuf_r>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	460e      	mov	r6, r1
 8008968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896c:	2900      	cmp	r1, #0
 800896e:	b096      	sub	sp, #88	; 0x58
 8008970:	4614      	mov	r4, r2
 8008972:	461d      	mov	r5, r3
 8008974:	da07      	bge.n	8008986 <__swhatbuf_r+0x22>
 8008976:	2300      	movs	r3, #0
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	89b3      	ldrh	r3, [r6, #12]
 800897c:	061a      	lsls	r2, r3, #24
 800897e:	d410      	bmi.n	80089a2 <__swhatbuf_r+0x3e>
 8008980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008984:	e00e      	b.n	80089a4 <__swhatbuf_r+0x40>
 8008986:	466a      	mov	r2, sp
 8008988:	f000 f902 	bl	8008b90 <_fstat_r>
 800898c:	2800      	cmp	r0, #0
 800898e:	dbf2      	blt.n	8008976 <__swhatbuf_r+0x12>
 8008990:	9a01      	ldr	r2, [sp, #4]
 8008992:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008996:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800899a:	425a      	negs	r2, r3
 800899c:	415a      	adcs	r2, r3
 800899e:	602a      	str	r2, [r5, #0]
 80089a0:	e7ee      	b.n	8008980 <__swhatbuf_r+0x1c>
 80089a2:	2340      	movs	r3, #64	; 0x40
 80089a4:	2000      	movs	r0, #0
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	b016      	add	sp, #88	; 0x58
 80089aa:	bd70      	pop	{r4, r5, r6, pc}

080089ac <__smakebuf_r>:
 80089ac:	898b      	ldrh	r3, [r1, #12]
 80089ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089b0:	079d      	lsls	r5, r3, #30
 80089b2:	4606      	mov	r6, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	d507      	bpl.n	80089c8 <__smakebuf_r+0x1c>
 80089b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	2301      	movs	r3, #1
 80089c2:	6163      	str	r3, [r4, #20]
 80089c4:	b002      	add	sp, #8
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	ab01      	add	r3, sp, #4
 80089ca:	466a      	mov	r2, sp
 80089cc:	f7ff ffca 	bl	8008964 <__swhatbuf_r>
 80089d0:	9900      	ldr	r1, [sp, #0]
 80089d2:	4605      	mov	r5, r0
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff f987 	bl	8007ce8 <_malloc_r>
 80089da:	b948      	cbnz	r0, 80089f0 <__smakebuf_r+0x44>
 80089dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e0:	059a      	lsls	r2, r3, #22
 80089e2:	d4ef      	bmi.n	80089c4 <__smakebuf_r+0x18>
 80089e4:	f023 0303 	bic.w	r3, r3, #3
 80089e8:	f043 0302 	orr.w	r3, r3, #2
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	e7e3      	b.n	80089b8 <__smakebuf_r+0xc>
 80089f0:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <__smakebuf_r+0x7c>)
 80089f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	6020      	str	r0, [r4, #0]
 80089f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	6163      	str	r3, [r4, #20]
 8008a02:	9b01      	ldr	r3, [sp, #4]
 8008a04:	6120      	str	r0, [r4, #16]
 8008a06:	b15b      	cbz	r3, 8008a20 <__smakebuf_r+0x74>
 8008a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f000 f8d1 	bl	8008bb4 <_isatty_r>
 8008a12:	b128      	cbz	r0, 8008a20 <__smakebuf_r+0x74>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	89a0      	ldrh	r0, [r4, #12]
 8008a22:	4305      	orrs	r5, r0
 8008a24:	81a5      	strh	r5, [r4, #12]
 8008a26:	e7cd      	b.n	80089c4 <__smakebuf_r+0x18>
 8008a28:	080087bd 	.word	0x080087bd

08008a2c <_malloc_usable_size_r>:
 8008a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a30:	1f18      	subs	r0, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfbc      	itt	lt
 8008a36:	580b      	ldrlt	r3, [r1, r0]
 8008a38:	18c0      	addlt	r0, r0, r3
 8008a3a:	4770      	bx	lr

08008a3c <_raise_r>:
 8008a3c:	291f      	cmp	r1, #31
 8008a3e:	b538      	push	{r3, r4, r5, lr}
 8008a40:	4604      	mov	r4, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	d904      	bls.n	8008a50 <_raise_r+0x14>
 8008a46:	2316      	movs	r3, #22
 8008a48:	6003      	str	r3, [r0, #0]
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a52:	b112      	cbz	r2, 8008a5a <_raise_r+0x1e>
 8008a54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a58:	b94b      	cbnz	r3, 8008a6e <_raise_r+0x32>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 f830 	bl	8008ac0 <_getpid_r>
 8008a60:	462a      	mov	r2, r5
 8008a62:	4601      	mov	r1, r0
 8008a64:	4620      	mov	r0, r4
 8008a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6a:	f000 b817 	b.w	8008a9c <_kill_r>
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d00a      	beq.n	8008a88 <_raise_r+0x4c>
 8008a72:	1c59      	adds	r1, r3, #1
 8008a74:	d103      	bne.n	8008a7e <_raise_r+0x42>
 8008a76:	2316      	movs	r3, #22
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	e7e7      	b.n	8008a4e <_raise_r+0x12>
 8008a7e:	2400      	movs	r4, #0
 8008a80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a84:	4628      	mov	r0, r5
 8008a86:	4798      	blx	r3
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e7e0      	b.n	8008a4e <_raise_r+0x12>

08008a8c <raise>:
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <raise+0xc>)
 8008a8e:	4601      	mov	r1, r0
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	f7ff bfd3 	b.w	8008a3c <_raise_r>
 8008a96:	bf00      	nop
 8008a98:	2000000c 	.word	0x2000000c

08008a9c <_kill_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	; (8008abc <_kill_r+0x20>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	f7f9 fb15 	bl	80020d8 <_kill>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	d102      	bne.n	8008ab8 <_kill_r+0x1c>
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	b103      	cbz	r3, 8008ab8 <_kill_r+0x1c>
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
 8008aba:	bf00      	nop
 8008abc:	2000040c 	.word	0x2000040c

08008ac0 <_getpid_r>:
 8008ac0:	f7f9 bb02 	b.w	80020c8 <_getpid>

08008ac4 <__sread>:
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	f000 f894 	bl	8008bf8 <_read_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	bfab      	itete	ge
 8008ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ad8:	181b      	addge	r3, r3, r0
 8008ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ade:	bfac      	ite	ge
 8008ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ae2:	81a3      	strhlt	r3, [r4, #12]
 8008ae4:	bd10      	pop	{r4, pc}

08008ae6 <__swrite>:
 8008ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	461f      	mov	r7, r3
 8008aec:	898b      	ldrh	r3, [r1, #12]
 8008aee:	05db      	lsls	r3, r3, #23
 8008af0:	4605      	mov	r5, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	4616      	mov	r6, r2
 8008af6:	d505      	bpl.n	8008b04 <__swrite+0x1e>
 8008af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afc:	2302      	movs	r3, #2
 8008afe:	2200      	movs	r2, #0
 8008b00:	f000 f868 	bl	8008bd4 <_lseek_r>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	4628      	mov	r0, r5
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	f000 b817 	b.w	8008b4c <_write_r>

08008b1e <__sseek>:
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	460c      	mov	r4, r1
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 f855 	bl	8008bd4 <_lseek_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	bf15      	itete	ne
 8008b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strheq	r3, [r4, #12]
 8008b3c:	bf18      	it	ne
 8008b3e:	81a3      	strhne	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__sclose>:
 8008b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b46:	f000 b813 	b.w	8008b70 <_close_r>
	...

08008b4c <_write_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d07      	ldr	r5, [pc, #28]	; (8008b6c <_write_r+0x20>)
 8008b50:	4604      	mov	r4, r0
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f7f9 faf3 	bl	8002146 <_write>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_write_r+0x1e>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_write_r+0x1e>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	2000040c 	.word	0x2000040c

08008b70 <_close_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	; (8008b8c <_close_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f9 faff 	bl	800217e <_close>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_close_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_close_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	2000040c 	.word	0x2000040c

08008b90 <_fstat_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d07      	ldr	r5, [pc, #28]	; (8008bb0 <_fstat_r+0x20>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	602b      	str	r3, [r5, #0]
 8008b9e:	f7f9 fafa 	bl	8002196 <_fstat>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d102      	bne.n	8008bac <_fstat_r+0x1c>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	b103      	cbz	r3, 8008bac <_fstat_r+0x1c>
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
 8008bae:	bf00      	nop
 8008bb0:	2000040c 	.word	0x2000040c

08008bb4 <_isatty_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d06      	ldr	r5, [pc, #24]	; (8008bd0 <_isatty_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7f9 faf9 	bl	80021b6 <_isatty>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_isatty_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_isatty_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	2000040c 	.word	0x2000040c

08008bd4 <_lseek_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	; (8008bf4 <_lseek_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f9 faf2 	bl	80021cc <_lseek>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_lseek_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_lseek_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	2000040c 	.word	0x2000040c

08008bf8 <_read_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	; (8008c18 <_read_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7f9 fa80 	bl	800210c <_read>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_read_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_read_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	2000040c 	.word	0x2000040c

08008c1c <_init>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr

08008c28 <_fini>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	bf00      	nop
 8008c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2e:	bc08      	pop	{r3}
 8008c30:	469e      	mov	lr, r3
 8008c32:	4770      	bx	lr
